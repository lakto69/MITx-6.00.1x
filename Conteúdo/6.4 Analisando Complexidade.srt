0
00:00:00,000 --> 00:00:00,670
...

1
00:00:00,670 --> 00:00:04,460
We've seen some simple classes of algorithms, constant, log,

2
00:00:04,460 --> 00:00:05,234
linear.

3
00:00:05,234 --> 00:00:06,400
And we didn't do log linear.

4
00:00:06,400 --> 00:00:08,700
But we'll do that one in a little while.

5
00:00:08,700 --> 00:00:11,130
The next class are polynomial complexity.

6
00:00:11,130 --> 00:00:13,810
And the most common here are quadratic.

7
00:00:13,810 --> 00:00:15,900
The complexity grows with the square

8
00:00:15,900 --> 00:00:18,360
of the size of the input.

9
00:00:18,360 --> 00:00:21,130
Again, I want you to see what are some of the characteristics

10
00:00:21,130 --> 00:00:22,860
to lead to that kind of algorithm.

11
00:00:22,860 --> 00:00:24,734
And one of the things we're going to see here

12
00:00:24,734 --> 00:00:26,410
is that this commonly occurs when

13
00:00:26,410 --> 00:00:30,310
we have nested loops or recursive function calls inside

14
00:00:30,310 --> 00:00:31,460
of the algorithm.

15
00:00:31,460 --> 00:00:34,070
And we need to say that in a way where the recursive function

16
00:00:34,070 --> 00:00:36,400
call has some costs other than constant.

17
00:00:36,400 --> 00:00:38,090
Because as we saw with factorial,

18
00:00:38,090 --> 00:00:40,740
you can have recursive function calls

19
00:00:40,740 --> 00:00:42,570
and have it still be linear.

20
00:00:42,570 --> 00:00:44,360
As before, let's look at some examples

21
00:00:44,360 --> 00:00:48,980
and see the characteristics that lead to this kind of behavior.

22
00:00:48,980 --> 00:00:51,006
Here's a simple algorithm.

23
00:00:51,006 --> 00:00:51,880
I want to explain it.

24
00:00:51,880 --> 00:00:53,980
But again, I'm less concerned about what it does.

25
00:00:53,980 --> 00:00:55,396
I'm more interested in showing you

26
00:00:55,396 --> 00:00:57,680
what the pattern is that leads to this.

27
00:00:57,680 --> 00:01:00,960
So this is an algorithm that given two lists of elements--

28
00:01:00,960 --> 00:01:03,370
could be numbers, could be something else-- but given

29
00:01:03,370 --> 00:01:05,209
two lists is going to try to decide

30
00:01:05,209 --> 00:01:09,780
is the first list a subset of the second list, meaning

31
00:01:09,780 --> 00:01:12,250
every element of the first list does it also occur

32
00:01:12,250 --> 00:01:13,880
in the second list even though there

33
00:01:13,880 --> 00:01:16,570
may be other elements inside the second list.

34
00:01:16,570 --> 00:01:19,080
Let's look at the code and the characteristics of the code.

35
00:01:19,080 --> 00:01:21,190
And then let's analyze it.

36
00:01:21,190 --> 00:01:25,460
So this starts by taking an element in the first list.

37
00:01:25,460 --> 00:01:27,880
It's going to set up a little flag here

38
00:01:27,880 --> 00:01:30,660
that initially says I don't yet have a match.

39
00:01:30,660 --> 00:01:32,660
And then given that element from the first list,

40
00:01:32,660 --> 00:01:36,060
it's going to loop over all the elements of the second list

41
00:01:36,060 --> 00:01:38,870
asking do I have an instance of that element

42
00:01:38,870 --> 00:01:40,370
in the second list.

43
00:01:40,370 --> 00:01:44,640
If I find one right here, I'm going to set that flag to true

44
00:01:44,640 --> 00:01:48,350
and break out of that loop.

45
00:01:48,350 --> 00:01:50,680
Once I've broken out of that loop, I then test.

46
00:01:50,680 --> 00:01:55,320
And having set match to true, the if not match doesn't hold.

47
00:01:55,320 --> 00:01:57,250
And so I don't return false.

48
00:01:57,250 --> 00:02:00,310
I go back around to the loop and get the next element

49
00:02:00,310 --> 00:02:02,060
of the first list.

50
00:02:02,060 --> 00:02:04,940
On the other hand, if I go through all of this search

51
00:02:04,940 --> 00:02:09,449
here and don't find a match, then the matched flag

52
00:02:09,449 --> 00:02:10,240
is set to false.

53
00:02:10,240 --> 00:02:11,890
And when I come to this test, I'm

54
00:02:11,890 --> 00:02:15,300
going to break out of the entire thing by returning false.

55
00:02:15,300 --> 00:02:18,440
If I get through the entire set of the list L1

56
00:02:18,440 --> 00:02:20,800
and I've found a match in all cases, in that case,

57
00:02:20,800 --> 00:02:22,500
I'm going to return true.

58
00:02:22,500 --> 00:02:23,000
Now.

59
00:02:23,000 --> 00:02:25,970
You notice here I've got nested loops.

60
00:02:25,970 --> 00:02:27,730
I've got an outer loop on L1.

61
00:02:27,730 --> 00:02:29,880
I've got an inner loop on L2.

62
00:02:29,880 --> 00:02:33,930
And even though I could break out of either of those lists,

63
00:02:33,930 --> 00:02:38,380
either here or here, we know that it's

64
00:02:38,380 --> 00:02:40,840
the worst case behavior that we're interested in.

65
00:02:40,840 --> 00:02:44,450
And that's going to happen when in fact L1

66
00:02:44,450 --> 00:02:46,410
is in fact a subset of L2 because I'm

67
00:02:46,410 --> 00:02:51,036
going to search through all of L1 looking for that solution.

68
00:02:51,036 --> 00:02:53,160
Key thing I want you to do if I step back from this

69
00:02:53,160 --> 00:02:56,300
is to notice here I've got a nested loop, a loop

70
00:02:56,300 --> 00:02:57,640
inside of a loop.

71
00:02:57,640 --> 00:03:00,310
And that's characteristic of quadratic complexity.

72
00:03:00,310 --> 00:03:02,560
And let's see why.

73
00:03:02,560 --> 00:03:06,300
So if I take my code, I can now ask what is the order of growth

74
00:03:06,300 --> 00:03:07,860
here.

75
00:03:07,860 --> 00:03:10,700
First of all, I know that the outer loop is generally

76
00:03:10,700 --> 00:03:13,790
going to be executed the length of L1 times.

77
00:03:13,790 --> 00:03:15,960
So however many elements there are in L1, let's call

78
00:03:15,960 --> 00:03:20,020
that, for example, n, is going to execute that loop n times

79
00:03:20,020 --> 00:03:21,910
because it's going to ask for each element,

80
00:03:21,910 --> 00:03:23,391
does it have a match.

81
00:03:23,391 --> 00:03:23,890
Yes.

82
00:03:23,890 --> 00:03:25,670
It's possible they could stop earlier.

83
00:03:25,670 --> 00:03:27,280
But in the worst case, it's going

84
00:03:27,280 --> 00:03:29,400
to go through all of them.

85
00:03:29,400 --> 00:03:30,990
What else do I know?

86
00:03:30,990 --> 00:03:34,790
I know that for each outer iteration, for each element

87
00:03:34,790 --> 00:03:37,670
in L1 I'm going to go through this inner loop,

88
00:03:37,670 --> 00:03:41,545
this loop up to the length of L2 times.

89
00:03:41,545 --> 00:03:42,920
And in fact, in the worst case, I

90
00:03:42,920 --> 00:03:47,070
am going to go through it up to the length of L2 times.

91
00:03:47,070 --> 00:03:49,162
So what do I have then?

92
00:03:49,162 --> 00:03:50,120
I've got an outer loop.

93
00:03:50,120 --> 00:03:52,850
I do length of L1 times.

94
00:03:52,850 --> 00:03:54,470
For each one of those, I do length

95
00:03:54,470 --> 00:03:56,160
of L2 kinds of operations.

96
00:03:56,160 --> 00:03:59,550
And by our multiplication log we know that that basically

97
00:03:59,550 --> 00:04:04,100
says this order of growth is the product of the length of L1

98
00:04:04,100 --> 00:04:08,210
times the length of L2.

99
00:04:08,210 --> 00:04:09,740
What's the worst case?

100
00:04:09,740 --> 00:04:12,630
The worst case is when they're both of the same length.

101
00:04:12,630 --> 00:04:14,810
And in that case, again, let's just call that n.

102
00:04:14,810 --> 00:04:17,185
We're going to do n squared operations,

103
00:04:17,185 --> 00:04:19,742
n times n operations.

104
00:04:19,742 --> 00:04:21,700
And as I said, the fact that we might break out

105
00:04:21,700 --> 00:04:23,895
of the loop earlier doesn't change the order

106
00:04:23,895 --> 00:04:25,720
of growth of the algorithm.

107
00:04:25,720 --> 00:04:29,630
The worst case is basically quadratic in the length

108
00:04:29,630 --> 00:04:31,034
of the list.

109
00:04:31,034 --> 00:04:32,325
You've seen the characteristic.

110
00:04:32,325 --> 00:04:34,910


111
00:04:34,910 --> 00:04:37,650
Nested loops is a nice characteristic of something

112
00:04:37,650 --> 00:04:41,700
that is inherently quadratic in complexity.

113
00:04:41,700 --> 00:04:43,300
Here's another example.

114
00:04:43,300 --> 00:04:45,857
I want to find the intersection of two lists.

115
00:04:45,857 --> 00:04:47,440
And then I want to return a list where

116
00:04:47,440 --> 00:04:49,680
each element appears only once.

117
00:04:49,680 --> 00:04:51,710
So L1 is a list of things, could be numbers,

118
00:04:51,710 --> 00:04:52,790
could be something else.

119
00:04:52,790 --> 00:04:54,437
L2 is similarly a list.

120
00:04:54,437 --> 00:04:56,020
And I'm going to first start by trying

121
00:04:56,020 --> 00:05:01,250
to find a list that has those that appear in both lists.

122
00:05:01,250 --> 00:05:03,250
And then because there might be some duplication

123
00:05:03,250 --> 00:05:04,916
I'm going to clean it up and only return

124
00:05:04,916 --> 00:05:08,229
a list where the elements appear exactly once.

125
00:05:08,229 --> 00:05:10,270
I'm not going to step through the code in detail.

126
00:05:10,270 --> 00:05:13,370
But notice, again, a nice, common pattern.

127
00:05:13,370 --> 00:05:15,770
There is a nested pair of loops.

128
00:05:15,770 --> 00:05:17,490
And what I'm doing here makes sense.

129
00:05:17,490 --> 00:05:21,210
I set up a temporary variable called tmp for temp.

130
00:05:21,210 --> 00:05:24,390
For each element of loop 1 I run through all the elements

131
00:05:24,390 --> 00:05:29,220
of loop 2 asking is that element from loop 1-- from list 1,

132
00:05:29,220 --> 00:05:30,590
rather, in list 2.

133
00:05:30,590 --> 00:05:32,830
And if it is, I add it into temp.

134
00:05:32,830 --> 00:05:34,850
I just appended it to the end of that.

135
00:05:34,850 --> 00:05:38,080
Once I've done all of that, I'm going to clean it up

136
00:05:38,080 --> 00:05:41,204
by sending a new temporary variable called Res result.

137
00:05:41,204 --> 00:05:42,870
And then running through the things that

138
00:05:42,870 --> 00:05:46,750
appear in both lists, I simply say if I haven't already put it

139
00:05:46,750 --> 00:05:48,705
into the result, add it in.

140
00:05:48,705 --> 00:05:50,080
But I'm not going to duplicate it

141
00:05:50,080 --> 00:05:51,660
if it appears more than once.

142
00:05:51,660 --> 00:05:56,130
And then I'm going to return the result res down here.

143
00:05:56,130 --> 00:05:57,700
Key characteristic.

144
00:05:57,700 --> 00:05:59,660
I've got a bottom loop.

145
00:05:59,660 --> 00:06:00,850
It's just a loop.

146
00:06:00,850 --> 00:06:04,034
I've got a nested pair of loops here.

147
00:06:04,034 --> 00:06:05,950
And we've already seen in our earlier example,

148
00:06:05,950 --> 00:06:09,150
that's probably an indication of the quadratic performance.

149
00:06:09,150 --> 00:06:11,040
So let's look at it.

150
00:06:11,040 --> 00:06:13,900
There's my coat and here's what I know.

151
00:06:13,900 --> 00:06:17,587
That first nested loop, by exactly the same analysis

152
00:06:17,587 --> 00:06:19,170
I did with the early example, is going

153
00:06:19,170 --> 00:06:23,370
to take the length of L1 times the length of L2 steps.

154
00:06:23,370 --> 00:06:29,230
Because for every element of L1 I do however many elements

155
00:06:29,230 --> 00:06:31,090
there are in L2 number of steps.

156
00:06:31,090 --> 00:06:33,090
And here, there's no breaking out of it earlier.

157
00:06:33,090 --> 00:06:35,520
So it's literally going to be I do length of L2

158
00:06:35,520 --> 00:06:37,680
steps for every element in L1.

159
00:06:37,680 --> 00:06:41,080
So therefore, the product of those two links.

160
00:06:41,080 --> 00:06:43,500
The second loop, the bottom, just

161
00:06:43,500 --> 00:06:46,970
goes through at most length of L1 number of steps.

162
00:06:46,970 --> 00:06:50,350
If every element of L1 also appeared in L2.

163
00:06:50,350 --> 00:06:54,460
Ah, so now I've got a case of two different orders of growth.

164
00:06:54,460 --> 00:06:55,830
The first one is quadratic.

165
00:06:55,830 --> 00:06:57,580
The second one is linear.

166
00:06:57,580 --> 00:07:00,760
That second term, as we make the problem size really large,

167
00:07:00,760 --> 00:07:03,830
simply gets overwhelmed by the first term.

168
00:07:03,830 --> 00:07:06,380
And so we ignore that second term.

169
00:07:06,380 --> 00:07:09,100
And we simply say this is quadratic in that product

170
00:07:09,100 --> 00:07:12,000
of length of L1 and length of L2.

171
00:07:12,000 --> 00:07:13,500
And again, worst case is in essence

172
00:07:13,500 --> 00:07:15,249
when consider both of the same length we'd

173
00:07:15,249 --> 00:07:18,160
say this is order n squared-- so a nice example

174
00:07:18,160 --> 00:07:21,480
of a quadratic complexity algorithm--

175
00:07:21,480 --> 00:07:25,530
characteristic, nested loops.

176
00:07:25,530 --> 00:07:29,720
Now, that can happen in a wide range of cases.

177
00:07:29,720 --> 00:07:32,150
Here's simply another example where now I'm

178
00:07:32,150 --> 00:07:35,560
simply doing something that's going over a range.

179
00:07:35,560 --> 00:07:37,520
And the only difference here is that that range

180
00:07:37,520 --> 00:07:40,000
may get generated incrementally as I need it.

181
00:07:40,000 --> 00:07:42,690
But otherwise, this is exactly like the two cases

182
00:07:42,690 --> 00:07:44,270
I saw before.

183
00:07:44,270 --> 00:07:45,580
What do I want to look at here?

184
00:07:45,580 --> 00:07:49,080
I want to look at what's the cost of the first loop, which

185
00:07:49,080 --> 00:07:51,747
is I want to do it n times because of that range.

186
00:07:51,747 --> 00:07:53,580
And then what's the cost of the second loop?

187
00:07:53,580 --> 00:07:56,320
I'm also going to do it n times because of that range.

188
00:07:56,320 --> 00:07:57,720
So it's n times n.

189
00:07:57,720 --> 00:08:01,760
Again, it's order n squared.

190
00:08:01,760 --> 00:08:04,680
You see the characteristics of quadratic complexity

191
00:08:04,680 --> 00:08:05,769
algorithms.

192
00:08:05,769 --> 00:08:06,269


