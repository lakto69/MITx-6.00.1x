0
00:00:00,000 --> 00:00:01,000
...

1
00:00:01,000 --> 00:00:04,230
We've been using exhaustive algorithms, guess and check

2
00:00:04,230 --> 00:00:05,280
algorithms.

3
00:00:05,280 --> 00:00:06,535
When we got integers we saw.

4
00:00:06,535 --> 00:00:07,910
That's nice, because there's only

5
00:00:07,910 --> 00:00:09,830
going to be a finite number of solutions.

6
00:00:09,830 --> 00:00:11,640
But we won't be able to find, say,

7
00:00:11,640 --> 00:00:14,370
square root of cube roots of numbers

8
00:00:14,370 --> 00:00:16,960
where that isn't a perfect square or a perfect cube.

9
00:00:16,960 --> 00:00:19,190
We've generalized that to look at something

10
00:00:19,190 --> 00:00:20,750
that does a different kind of guess

11
00:00:20,750 --> 00:00:23,440
and check where we take incremental steps,

12
00:00:23,440 --> 00:00:25,260
still enumerating all the possibilities

13
00:00:25,260 --> 00:00:27,100
within the resolution of that step,

14
00:00:27,100 --> 00:00:28,740
trying to find a solution.

15
00:00:28,740 --> 00:00:31,480
And we saw that that either means we take very small steps,

16
00:00:31,480 --> 00:00:32,910
and we take a long time.

17
00:00:32,910 --> 00:00:36,369
Or if we take larger steps, we might miss the solution.

18
00:00:36,369 --> 00:00:38,660
And I suggest that we want to find a more effective way

19
00:00:38,660 --> 00:00:39,950
of doing that.

20
00:00:39,950 --> 00:00:42,550
So here's an example of that and a wonderful tool

21
00:00:42,550 --> 00:00:45,150
that we're going to see a lot as we go through the course.

22
00:00:45,150 --> 00:00:47,680
It's called bisection search.

23
00:00:47,680 --> 00:00:49,042
Let's think about a square root.

24
00:00:49,042 --> 00:00:51,500
One of the things we know about the square root of a number

25
00:00:51,500 --> 00:00:53,800
is that it lies between 1 and that number

26
00:00:53,800 --> 00:00:55,890
if that number is bigger than or equal to 1.

27
00:00:55,890 --> 00:00:57,760
We'll do fractions in a second.

28
00:00:57,760 --> 00:01:00,630
So square root of 25 lies somewhere, we know,

29
00:01:00,630 --> 00:01:02,830
between 1 and 25.

30
00:01:02,830 --> 00:01:04,650
Here's the basic idea.

31
00:01:04,650 --> 00:01:06,740
Rather than trying everything starting at 1

32
00:01:06,740 --> 00:01:08,750
and taking small steps, suppose we

33
00:01:08,750 --> 00:01:12,010
pick a number in the middle between 1 and say 25?

34
00:01:12,010 --> 00:01:13,005
12 and 1/2.

35
00:01:13,005 --> 00:01:15,917
If we're lucky, that's going to be close enough.

36
00:01:15,917 --> 00:01:18,000
Well, it's probably not close enough in this case.

37
00:01:18,000 --> 00:01:20,410
We know where it is, but it's a nice start.

38
00:01:20,410 --> 00:01:23,280
But we can take that idea and generalize it.

39
00:01:23,280 --> 00:01:25,870
If it's not close enough, then we can ask,

40
00:01:25,870 --> 00:01:28,886
well, was the guess too big or too small?

41
00:01:28,886 --> 00:01:34,300
And in particular, if that guess g squared is bigger than x,

42
00:01:34,300 --> 00:01:35,910
we know it's too big.

43
00:01:35,910 --> 00:01:37,300
So what can we say?

44
00:01:37,300 --> 00:01:40,470
Well, we know that the answer has to lie below g,

45
00:01:40,470 --> 00:01:44,950
and that's really cool, because it says all of this stuff here,

46
00:01:44,950 --> 00:01:46,190
throw it away.

47
00:01:46,190 --> 00:01:47,570
I don't have to look there.

48
00:01:47,570 --> 00:01:52,860
I know that the answer has to be somewhere between 1 and g.

49
00:01:52,860 --> 00:01:54,430
Do the same thing.

50
00:01:54,430 --> 00:01:56,650
Pick something halfway between.

51
00:01:56,650 --> 00:01:58,340
That's my new guess.

52
00:01:58,340 --> 00:01:59,010
Try it again.

53
00:01:59,010 --> 00:02:00,620
If it's close enough, I'm done.

54
00:02:00,620 --> 00:02:03,440
If it's not, ask the same question.

55
00:02:03,440 --> 00:02:07,130
And for example, in this case, if g squared is less than x,

56
00:02:07,130 --> 00:02:08,800
then we know it was too small.

57
00:02:08,800 --> 00:02:13,470
So we can throw that stuff away and only focus on this portion.

58
00:02:13,470 --> 00:02:17,209
And, again, pick something in the middle and keep trying.

59
00:02:17,209 --> 00:02:18,750
You can already see why this is going

60
00:02:18,750 --> 00:02:21,180
to be really nice, because on each step,

61
00:02:21,180 --> 00:02:23,450
I'm throwing away half of the things

62
00:02:23,450 --> 00:02:25,140
that I don't have to look at anymore.

63
00:02:25,140 --> 00:02:28,200
And that's going to let me hopefully very quickly zero in

64
00:02:28,200 --> 00:02:30,870
on finding the right solution.

65
00:02:30,870 --> 00:02:32,020
That's a wonderful idea.

66
00:02:32,020 --> 00:02:34,353
It's called bisection search, and we're going to use it.

67
00:02:34,353 --> 00:02:37,290
So what do we say at each stage?

68
00:02:37,290 --> 00:02:38,960
I'm losing half the values.

69
00:02:38,960 --> 00:02:39,520
Really cool.

70
00:02:39,520 --> 00:02:40,978
Let's see what happens if we wanted

71
00:02:40,978 --> 00:02:43,210
to actually make code for it.

72
00:02:43,210 --> 00:02:44,957
So this is a little bit of a busy slide,

73
00:02:44,957 --> 00:02:46,040
but we'll walk through it.

74
00:02:46,040 --> 00:02:49,870
This is an example of computing square root using that example

75
00:02:49,870 --> 00:02:51,846
of a bisection search.

76
00:02:51,846 --> 00:02:53,970
I'm going to start off just giving it the thing I'm

77
00:02:53,970 --> 00:02:55,220
going to look for.

78
00:02:55,220 --> 00:02:56,210
x will be 25.

79
00:02:56,210 --> 00:02:58,200
That's the thing I'm going to use as the root.

80
00:02:58,200 --> 00:02:59,616
Again, I'm going to pick something

81
00:02:59,616 --> 00:03:01,680
that I'm going to use to tell how close I am.

82
00:03:01,680 --> 00:03:04,386
And I'm also going to keep track of how often do I actually

83
00:03:04,386 --> 00:03:06,010
run through the loop just to compare it

84
00:03:06,010 --> 00:03:07,670
to what we saw earlier.

85
00:03:07,670 --> 00:03:11,359
I need to set a low value and a high value,

86
00:03:11,359 --> 00:03:12,900
the range in which I'm going to look.

87
00:03:12,900 --> 00:03:17,590
Initially, that is 1 to the number itself.

88
00:03:17,590 --> 00:03:20,480
And then I'm going to make an initial guess, which is halfway

89
00:03:20,480 --> 00:03:21,390
in between.

90
00:03:21,390 --> 00:03:24,360
Just high plus low divided by 2.

91
00:03:24,360 --> 00:03:26,850
And then I run through one of those nice little loops.

92
00:03:26,850 --> 00:03:27,660
What do I do?

93
00:03:27,660 --> 00:03:30,990
I say if the difference between the answer

94
00:03:30,990 --> 00:03:34,360
squared and x is bigger than or equal to epsilon,

95
00:03:34,360 --> 00:03:35,920
I'm not close enough.

96
00:03:35,920 --> 00:03:39,140
And in that case, I'm going to print out some information,

97
00:03:39,140 --> 00:03:42,510
increase the number of guesses by 1.

98
00:03:42,510 --> 00:03:44,140
And then do what I just did, which

99
00:03:44,140 --> 00:03:47,770
is if answer is too small, that is,

100
00:03:47,770 --> 00:03:49,530
answer squared is less than x, then

101
00:03:49,530 --> 00:03:53,860
I can change the low part of the range to move up to answer.

102
00:03:53,860 --> 00:03:57,240
And if answer is too big, I can change the high part

103
00:03:57,240 --> 00:03:59,890
of the range down to answer.

104
00:03:59,890 --> 00:04:01,740
As I did before, I start out here.

105
00:04:01,740 --> 00:04:03,810
If answer was too big, I changed the high arrange

106
00:04:03,810 --> 00:04:04,976
to bring it down into there.

107
00:04:04,976 --> 00:04:07,582
If answer is too small, I bring the low range down into there,

108
00:04:07,582 --> 00:04:09,790
and I keep sorting it down until I get into something

109
00:04:09,790 --> 00:04:11,260
that's reasonable.

110
00:04:11,260 --> 00:04:14,830
This algorithm just captured that idea I just described.

111
00:04:14,830 --> 00:04:18,399
So let's try it out We'll do it with 25.

112
00:04:18,399 --> 00:04:20,480
Here's a bisection search on square root.

113
00:04:20,480 --> 00:04:24,720
And if I run this code, wow, it actually

114
00:04:24,720 --> 00:04:26,160
got there very quickly.

115
00:04:26,160 --> 00:04:28,450
It did it in 13 guesses.

116
00:04:28,450 --> 00:04:30,470
I'll remind you, in the previous case we took

117
00:04:30,470 --> 00:04:32,560
30,000 guesses to get there.

118
00:04:32,560 --> 00:04:34,560
I don't want to print all that out on my screen.

119
00:04:34,560 --> 00:04:36,490
And notice how quickly it zeroes in.

120
00:04:36,490 --> 00:04:39,860
It starts off with low 0 and high 25.

121
00:04:39,860 --> 00:04:43,160
And then it says low 0 and high 12 and 1/2, half and then low

122
00:04:43,160 --> 00:04:44,830
0 and high 6 and 1/2.

123
00:04:44,830 --> 00:04:46,950
You can see, if you look at the printout,

124
00:04:46,950 --> 00:04:49,470
how quickly it narrows in on the range.

125
00:04:49,470 --> 00:04:50,356
That's really cool.

126
00:04:50,356 --> 00:04:53,000


127
00:04:53,000 --> 00:04:54,890
Do the same thing with cube root.

128
00:04:54,890 --> 00:04:56,700
I can do exactly the same idea.

129
00:04:56,700 --> 00:04:58,570
This is almost exactly the same code.

130
00:04:58,570 --> 00:05:02,370
The only difference is I'm using guess cubed

131
00:05:02,370 --> 00:05:04,210
rather than guess squared.

132
00:05:04,210 --> 00:05:06,300
And I'm going to keep track of otherwise exactly

133
00:05:06,300 --> 00:05:07,752
the same information.

134
00:05:07,752 --> 00:05:08,710
And let's compare that.

135
00:05:08,710 --> 00:05:11,750
If I go over and pull up my cube root example,

136
00:05:11,750 --> 00:05:13,904
we'll start with 27.

137
00:05:13,904 --> 00:05:15,570
Again, I'll remind you that in this case

138
00:05:15,570 --> 00:05:18,370
I was doing 30,000 checks to deal with this.

139
00:05:18,370 --> 00:05:22,620
Now I run it, and in 14 guesses it

140
00:05:22,620 --> 00:05:24,520
gives me a really good answer.

141
00:05:24,520 --> 00:05:28,170
And if I pick something that's not a perfect cube, like 54,

142
00:05:28,170 --> 00:05:31,030
and I do the same thing, in this case

143
00:05:31,030 --> 00:05:34,980
it took 15 guesses to get me a really good answer.

144
00:05:34,980 --> 00:05:38,210
This is a powerful tool, that idea of bisection search,

145
00:05:38,210 --> 00:05:41,240
throwing away half the possible values at every stage,

146
00:05:41,240 --> 00:05:44,240
let's me very quickly zero in.

147
00:05:44,240 --> 00:05:46,870
As before I can ask, well, can I do everything?

148
00:05:46,870 --> 00:05:49,830
This is only going to work for numbers bigger than 1.

149
00:05:49,830 --> 00:05:51,390
What about fractions?

150
00:05:51,390 --> 00:05:53,500
Well, I know with fractions between 0 and 1,

151
00:05:53,500 --> 00:05:56,160
now the difference is that the root doesn't

152
00:05:56,160 --> 00:05:58,570
lie between the number and x itself,

153
00:05:58,570 --> 00:06:01,410
or it lies between 0 and that number.

154
00:06:01,410 --> 00:06:02,910
But that's an easy way to change,

155
00:06:02,910 --> 00:06:05,460
and we can actually think about making that change.

156
00:06:05,460 --> 00:06:07,660
But just to remind you of how powerful this is,

157
00:06:07,660 --> 00:06:09,620
notice what happens.

158
00:06:09,620 --> 00:06:12,210
If I start if with the number n, on the first guess

159
00:06:12,210 --> 00:06:14,720
I reduce the set of things in half.

160
00:06:14,720 --> 00:06:16,820
On the second guess, I reduce it by another half.

161
00:06:16,820 --> 00:06:18,340
So it's now n over 4.

162
00:06:18,340 --> 00:06:21,470
After g guesses, I've got a range that's only n over 2

163
00:06:21,470 --> 00:06:22,606
to the g.

164
00:06:22,606 --> 00:06:26,320
And what this says is that in an amount of time that

165
00:06:26,320 --> 00:06:29,000
is going to grow as the log of n,

166
00:06:29,000 --> 00:06:30,640
I'm going to get to an answer.

167
00:06:30,640 --> 00:06:32,300
That's really nice, because it says

168
00:06:32,300 --> 00:06:34,910
I don't take a linear time, I actually take less than linear

169
00:06:34,910 --> 00:06:36,310
time to get there.

170
00:06:36,310 --> 00:06:38,710
We'll come back to that idea later on in the course,

171
00:06:38,710 --> 00:06:42,260
but this is a great example of a logarithmic time algorithm

172
00:06:42,260 --> 00:06:45,114
finding an answer very quickly.

173
00:06:45,114 --> 00:06:47,030
I jumped ahead a little bit, because I already

174
00:06:47,030 --> 00:06:48,460
started talking about what happens

175
00:06:48,460 --> 00:06:51,160
if I want to look for cubes only greater than 1,

176
00:06:51,160 --> 00:06:53,100
I could modify to look at negative cubes,

177
00:06:53,100 --> 00:06:55,180
and I could modify it to look at things where

178
00:06:55,180 --> 00:06:57,340
the answer is less than 1.

179
00:06:57,340 --> 00:07:00,070
And so for example, if x is less than 1,

180
00:07:00,070 --> 00:07:02,140
I just change the search space.

181
00:07:02,140 --> 00:07:04,090
So now, rather than going from 1 up

182
00:07:04,090 --> 00:07:07,070
to x, it goes from 0 to x-- sorry,

183
00:07:07,070 --> 00:07:10,912
rather than going from 0 to x, I want to go from x up to 1.

184
00:07:10,912 --> 00:07:11,870
I'm not going to do it.

185
00:07:11,870 --> 00:07:14,161
I'm going to leave it for something for you to try out,

186
00:07:14,161 --> 00:07:15,970
but it's really easy to make that change.

187
00:07:15,970 --> 00:07:18,780
And, again, notice what I've done.

188
00:07:18,780 --> 00:07:22,760
Start with a basic set of code, check to see what it runs on,

189
00:07:22,760 --> 00:07:24,900
and then decide if I wanted to use the same code,

190
00:07:24,900 --> 00:07:26,900
how could small changes have it run

191
00:07:26,900 --> 00:07:30,670
on other kinds of solutions?

192
00:07:30,670 --> 00:07:32,700
What can I take away from this?

193
00:07:32,700 --> 00:07:35,320
Bisection search really radically reduces

194
00:07:35,320 --> 00:07:36,270
computation time.

195
00:07:36,270 --> 00:07:39,820
I went from 30,000 times through a loop to 10 or 15 times

196
00:07:39,820 --> 00:07:40,830
through a loop.

197
00:07:40,830 --> 00:07:42,770
That's really nice.

198
00:07:42,770 --> 00:07:45,850
And this should work on any problem we would

199
00:07:45,850 --> 00:07:47,560
call an ordering property.

200
00:07:47,560 --> 00:07:50,120
That is, the value of the function being solved

201
00:07:50,120 --> 00:07:53,110
varies monotonically, that is, it increases

202
00:07:53,110 --> 00:07:55,430
as the input value increases.

203
00:07:55,430 --> 00:07:56,890
G squared has that property.

204
00:07:56,890 --> 00:07:58,320
As I change g, it grows.

205
00:07:58,320 --> 00:08:00,360
G squared grows as g grows.

206
00:08:00,360 --> 00:08:02,340
G cubed, same kind of idea.

207
00:08:02,340 --> 00:08:05,620
So bisection search will work on any problem

208
00:08:05,620 --> 00:08:07,534
that has that kind of property.

209
00:08:07,534 --> 00:08:09,200
We're going to see more examples of that

210
00:08:09,200 --> 00:08:11,430
as we go through the course.

