0
00:00:00,000 --> 00:00:00,510
...

1
00:00:00,510 --> 00:00:02,120
So we've built a hierarchy.

2
00:00:02,120 --> 00:00:02,996
We've got professors.

3
00:00:02,996 --> 00:00:04,578
We've got different kinds of students.

4
00:00:04,578 --> 00:00:05,480
We've got MIT people.

5
00:00:05,480 --> 00:00:07,030
We've got ordinary people.

6
00:00:07,030 --> 00:00:08,670
We've seen some of the nice aspects

7
00:00:08,670 --> 00:00:12,230
of how that lets us isolate methods within particular class

8
00:00:12,230 --> 00:00:13,470
instances.

9
00:00:13,470 --> 00:00:16,630
Let's look at one more direction of building this hierarchy,

10
00:00:16,630 --> 00:00:20,040
in particular to look at a class that can include instances

11
00:00:20,040 --> 00:00:22,450
of other classes within it.

12
00:00:22,450 --> 00:00:24,372
And here, staying with my theme of students,

13
00:00:24,372 --> 00:00:26,455
I'm going to create something called a grade book.

14
00:00:26,455 --> 00:00:28,810
And the idea is to build a data structure that

15
00:00:28,810 --> 00:00:30,600
can hold grades for students.

16
00:00:30,600 --> 00:00:33,230
And I want to gather together the data and procedures

17
00:00:33,230 --> 00:00:35,110
for dealing with them in a single structure

18
00:00:35,110 --> 00:00:37,660
so that users can manipulate them without knowing

19
00:00:37,660 --> 00:00:39,170
the internal details.

20
00:00:39,170 --> 00:00:42,510
So within a class or a grade book instance,

21
00:00:42,510 --> 00:00:45,097
I'm going to have representations of students.

22
00:00:45,097 --> 00:00:46,930
I'm going to have representations of grades.

23
00:00:46,930 --> 00:00:48,950
I'm going to capture all of those instances

24
00:00:48,950 --> 00:00:51,919
of other classes inside of that structure.

25
00:00:51,919 --> 00:00:53,710
Let's look at some code, and let's see what

26
00:00:53,710 --> 00:00:56,380
happens when we then use it.

27
00:00:56,380 --> 00:00:59,766
So here's my definition for grades as a class.

28
00:00:59,766 --> 00:01:01,140
And you notice the docstring that

29
00:01:01,140 --> 00:01:04,580
says it's a mapping from students to a list of grades.

30
00:01:04,580 --> 00:01:06,442
And I want to show you what that means.

31
00:01:06,442 --> 00:01:07,900
As always, I'm going to start with,

32
00:01:07,900 --> 00:01:11,130
how do I create an instance of a grade book or an empty grade

33
00:01:11,130 --> 00:01:11,860
book?

34
00:01:11,860 --> 00:01:13,900
And I'm going to have two parts here.

35
00:01:13,900 --> 00:01:16,280
The first part is, inside that grade book,

36
00:01:16,280 --> 00:01:17,690
I want a list to students.

37
00:01:17,690 --> 00:01:20,410
I want a list of the different students in the class.

38
00:01:20,410 --> 00:01:22,110
As we saw in an earlier example, I

39
00:01:22,110 --> 00:01:23,870
could do this with a set of lists,

40
00:01:23,870 --> 00:01:26,000
but I'd like to associate with the student

41
00:01:26,000 --> 00:01:27,740
a piece of information.

42
00:01:27,740 --> 00:01:31,360
So I'm similarly going to have an internal representation

43
00:01:31,360 --> 00:01:33,000
of the grades, and they are going

44
00:01:33,000 --> 00:01:34,620
to be represented as a dictionary,

45
00:01:34,620 --> 00:01:37,840
because I'm going to use ID number to get a list of grades

46
00:01:37,840 --> 00:01:40,140
associated with each student.

47
00:01:40,140 --> 00:01:42,330
Let's look at that a little more carefully.

48
00:01:42,330 --> 00:01:45,240
I'm going to set up students as an instance name

49
00:01:45,240 --> 00:01:50,270
within an instance created here that's initially an empty list.

50
00:01:50,270 --> 00:01:54,730
When I want to add a student to my class,

51
00:01:54,730 --> 00:01:56,450
I'm going to, first of all, check

52
00:01:56,450 --> 00:01:58,742
to make sure that that student is not already in there.

53
00:01:58,742 --> 00:02:00,658
And then notice there's that little test where

54
00:02:00,658 --> 00:02:02,560
I'm going to raise a value error if, in fact,

55
00:02:02,560 --> 00:02:04,970
I've already got a version of a student in the class.

56
00:02:04,970 --> 00:02:07,630
But the second thing is, notice how I do the add,

57
00:02:07,630 --> 00:02:09,340
because students is a list.

58
00:02:09,340 --> 00:02:11,330
I simply append directly onto it,

59
00:02:11,330 --> 00:02:14,660
mutating that list to add in that student.

60
00:02:14,660 --> 00:02:18,680
Grades is a dictionary, and so notice when I add

61
00:02:18,680 --> 00:02:20,740
a student what I do.

62
00:02:20,740 --> 00:02:24,200
I take the student, which is an instance of a class.

63
00:02:24,200 --> 00:02:27,130
I get out the procedure that is associated with it

64
00:02:27,130 --> 00:02:28,750
that gets out the ID name.

65
00:02:28,750 --> 00:02:31,800
I call it with the open close paren,

66
00:02:31,800 --> 00:02:36,370
and that gives me now a spot in the dictionary.

67
00:02:36,370 --> 00:02:37,960
In fact, it's going to create a spot

68
00:02:37,960 --> 00:02:40,100
in the dictionary in this case, and into that,

69
00:02:40,100 --> 00:02:42,600
I store an empty list.

70
00:02:42,600 --> 00:02:44,850
The nice thing here is that my dictionary is going

71
00:02:44,850 --> 00:02:47,730
to be accessed by ID number.

72
00:02:47,730 --> 00:02:49,860
Separately, I'll have a list of students,

73
00:02:49,860 --> 00:02:52,120
and that will allow me to manipulate either of those,

74
00:02:52,120 --> 00:02:55,090
depending on what information I want to get out.

75
00:02:55,090 --> 00:02:56,820
The last piece about this class, when

76
00:02:56,820 --> 00:02:58,802
I set up the initial instance, I'm

77
00:02:58,802 --> 00:03:00,510
going to say arbitrarily, because there's

78
00:03:00,510 --> 00:03:04,980
nothing in there, that this list or this collection is sorted.

79
00:03:04,980 --> 00:03:07,180
If there's nothing there, that's obviously true.

80
00:03:07,180 --> 00:03:09,100
When I add a new student to the class,

81
00:03:09,100 --> 00:03:11,940
because it's getting appended to the end of the list,

82
00:03:11,940 --> 00:03:13,944
I'm going to change that flag to false.

83
00:03:13,944 --> 00:03:15,360
And that'll be important if I ever

84
00:03:15,360 --> 00:03:19,760
want to get out a list of the students sorted by ID number.

85
00:03:19,760 --> 00:03:20,560
All right.

86
00:03:20,560 --> 00:03:22,970
There's the first part of grading the grades

87
00:03:22,970 --> 00:03:26,060
object, the grade book.

88
00:03:26,060 --> 00:03:28,990
Now, I want to add a grade in.

89
00:03:28,990 --> 00:03:31,590
I've got a student, and they've got a new grade in this class.

90
00:03:31,590 --> 00:03:33,370
And, remember, a student going to have multiple grades,

91
00:03:33,370 --> 00:03:34,990
because there are multiple quizzes.

92
00:03:34,990 --> 00:03:37,400
So how do I want to deal with that?

93
00:03:37,400 --> 00:03:40,820
Adding the grade is going to be fairly straightforward.

94
00:03:40,820 --> 00:03:42,980
Notice the format that I've got here.

95
00:03:42,980 --> 00:03:45,380
Because it's a dictionary, as I just did before,

96
00:03:45,380 --> 00:03:47,990
I'm going to take the student, who is an instance,

97
00:03:47,990 --> 00:03:50,560
call the get ID number from that class on it.

98
00:03:50,560 --> 00:03:55,000
That gives me back an ID number, and I then going to,

99
00:03:55,000 --> 00:04:00,510
in that spot, in grades, insert-- let me rephrase

100
00:04:00,510 --> 00:04:01,940
that-- add something.

101
00:04:01,940 --> 00:04:05,180
To say it a little bit better, doing that particular access

102
00:04:05,180 --> 00:04:08,660
gets me out from the dictionary a list of grades.

103
00:04:08,660 --> 00:04:10,780
It goes into the dictionary, pulls it out.

104
00:04:10,780 --> 00:04:13,790
Because it's a list of grades, I can add to the end.

105
00:04:13,790 --> 00:04:15,012
Mutate in place.

106
00:04:15,012 --> 00:04:15,720
And that's great.

107
00:04:15,720 --> 00:04:19,470
It says for every student, I can add a new grade to their list.

108
00:04:19,470 --> 00:04:22,320
Notice I'm going to use my nice try method to do that,

109
00:04:22,320 --> 00:04:24,630
and, simply, it will work unless there

110
00:04:24,630 --> 00:04:27,490
is no entry in the dictionary for the student, in which case

111
00:04:27,490 --> 00:04:32,700
it's going to raise a key error saying that I've got a problem.

112
00:04:32,700 --> 00:04:35,180
And in that case, I'm going to explicitly raise

113
00:04:35,180 --> 00:04:39,120
a value error, printing out, here's the problem,

114
00:04:39,120 --> 00:04:42,040
using that idea we had earlier on of trying something

115
00:04:42,040 --> 00:04:44,523
and then handling the exception when it comes up.

116
00:04:44,523 --> 00:04:46,960
I can add grades to the grade book.

117
00:04:46,960 --> 00:04:50,060
Finally, I might want to get out a list of grades for a student.

118
00:04:50,060 --> 00:04:52,620
And, again, I'm going to use the try method with almost

119
00:04:52,620 --> 00:04:54,750
the same kind of indexing.

120
00:04:54,750 --> 00:04:57,520
Given the student, which is an instance,

121
00:04:57,520 --> 00:05:00,680
I call the class method for that type of instance

122
00:05:00,680 --> 00:05:03,600
to get out of particular ID number,

123
00:05:03,600 --> 00:05:06,360
and I go into grades, which is a dictionary,

124
00:05:06,360 --> 00:05:09,230
to retrieve that entry.

125
00:05:09,230 --> 00:05:11,380
The last thing I do we saw before, which is,

126
00:05:11,380 --> 00:05:13,490
rather than returning it, I'm going

127
00:05:13,490 --> 00:05:16,650
to return a copy, which means I can do things on that

128
00:05:16,650 --> 00:05:19,010
without destroying the original set of grades.

129
00:05:19,010 --> 00:05:20,780
A safe thing to do.

130
00:05:20,780 --> 00:05:23,590
And, again, as before, I'm going to run in case I hit an error.

131
00:05:23,590 --> 00:05:26,270
And if I get an error, meaning I can't get into the dictionary,

132
00:05:26,270 --> 00:05:28,250
I'm again going to raise my own value error,

133
00:05:28,250 --> 00:05:32,700
telling me that the student was not in the grade book.

134
00:05:32,700 --> 00:05:34,750
And then, finally, I might want to get

135
00:05:34,750 --> 00:05:36,769
a list of all the students in the grade book.

136
00:05:36,769 --> 00:05:38,560
And here's what I'm going to take advantage

137
00:05:38,560 --> 00:05:43,640
of that flag, which is, if that flag for this instance

138
00:05:43,640 --> 00:05:47,420
is sorted, is false, I'm going to go ahead and sort--

139
00:05:47,420 --> 00:05:49,940
remember, it's a list, so I can do that in place.

140
00:05:49,940 --> 00:05:55,680
I'll set the flag to true, and then, in either case,

141
00:05:55,680 --> 00:05:57,300
having done that, I'm going to return

142
00:05:57,300 --> 00:05:59,730
a copy of the list of students.

143
00:05:59,730 --> 00:06:01,900
So I go into students, which is a list,

144
00:06:01,900 --> 00:06:04,220
and I return a copy, again, so I don't accidentally

145
00:06:04,220 --> 00:06:08,980
destroy the underlying list stored inside of the instance.

146
00:06:08,980 --> 00:06:10,300
What do I have here?

147
00:06:10,300 --> 00:06:13,030
I've got a data structure, a grade book.

148
00:06:13,030 --> 00:06:16,580
Inside of it, I have a set of classes.

149
00:06:16,580 --> 00:06:18,110
And notice how I'm storing them.

150
00:06:18,110 --> 00:06:20,260
I have a list of the students.

151
00:06:20,260 --> 00:06:21,370
Those are the classes.

152
00:06:21,370 --> 00:06:24,030
And I have associated with that a dictionary that,

153
00:06:24,030 --> 00:06:29,690
by ID number, lets me retrieve information about each student.

154
00:06:29,690 --> 00:06:30,500
OK.

155
00:06:30,500 --> 00:06:33,410
Let's see what happens if we were to try this out.

156
00:06:33,410 --> 00:06:35,980
So I can create this.

157
00:06:35,980 --> 00:06:38,440
Now I want to get out a report.

158
00:06:38,440 --> 00:06:41,036
How are students doing in my class?

159
00:06:41,036 --> 00:06:42,910
Here, I'm going to take advantage of the fact

160
00:06:42,910 --> 00:06:45,397
that I get out-- or I can get out, rather,

161
00:06:45,397 --> 00:06:46,230
all of the students.

162
00:06:46,230 --> 00:06:48,240
And if I go back a slide, remember,

163
00:06:48,240 --> 00:06:50,110
all students here gives me a copy

164
00:06:50,110 --> 00:06:53,180
of the list of all the students stored in that class.

165
00:06:53,180 --> 00:06:55,710
So if I go back forward, what am I going to do?

166
00:06:55,710 --> 00:07:00,010
I'm simply going to loop over that collection,

167
00:07:00,010 --> 00:07:01,970
and I'm going to use that method to get out

168
00:07:01,970 --> 00:07:04,840
that list so that I'm preserving the information hiding.

169
00:07:04,840 --> 00:07:07,067
I'm not directly going in and getting that list,

170
00:07:07,067 --> 00:07:08,400
and I'm going to loop over that.

171
00:07:08,400 --> 00:07:10,615
For every student in that list, I'm

172
00:07:10,615 --> 00:07:12,560
going to simply do a little computation.

173
00:07:12,560 --> 00:07:15,185
I'll set total to zero, number of grades to zero.

174
00:07:15,185 --> 00:07:19,000
And I'll run for every grade in the grades associated

175
00:07:19,000 --> 00:07:20,150
with that student.

176
00:07:20,150 --> 00:07:21,910
And notice the access.

177
00:07:21,910 --> 00:07:24,990
Notice the access there, right here, which is,

178
00:07:24,990 --> 00:07:28,790
again, I'm using the getter of get grades for that student

179
00:07:28,790 --> 00:07:30,590
to return the list of grades.

180
00:07:30,590 --> 00:07:32,620
And I just run through it, adding the grades up,

181
00:07:32,620 --> 00:07:34,170
including then increasing the number

182
00:07:34,170 --> 00:07:35,445
grades I've got recorded.

183
00:07:35,445 --> 00:07:36,820
And then I'm going to just report

184
00:07:36,820 --> 00:07:40,480
the average, unless I have a divide by zero error, in which

185
00:07:40,480 --> 00:07:42,920
case I will report something different.

186
00:07:42,920 --> 00:07:46,040
And I'm simply appending that onto that list

187
00:07:46,040 --> 00:07:47,290
that I'm growing.

188
00:07:47,290 --> 00:07:49,790
When I'm done with all of that, I'm just going to return it.

189
00:07:49,790 --> 00:07:52,800
I'm going to do one unusual thing down here, which

190
00:07:52,800 --> 00:07:55,720
is, because this is a big list of strings,

191
00:07:55,720 --> 00:07:57,510
I'm going to return it where I just

192
00:07:57,510 --> 00:07:59,900
break this up by inserting a carriage

193
00:07:59,900 --> 00:08:02,630
return in between each one of those strings.

194
00:08:02,630 --> 00:08:04,330
And that's what that joint operation

195
00:08:04,330 --> 00:08:05,510
does that we saw earlier.

196
00:08:05,510 --> 00:08:08,730
It says, taking that string, I'm going

197
00:08:08,730 --> 00:08:13,740
to insert into it a carriage return or this backslash n

198
00:08:13,740 --> 00:08:15,670
in place of each one of those pieces,

199
00:08:15,670 --> 00:08:17,378
and that's just going to print things out

200
00:08:17,378 --> 00:08:19,260
in a nicer manner for us.

201
00:08:19,260 --> 00:08:21,820
I think we're ready to try this out.

202
00:08:21,820 --> 00:08:24,710
So I'm going to create a little database of students.

203
00:08:24,710 --> 00:08:27,505
And let me just go to my computer and set that up.

204
00:08:27,505 --> 00:08:32,000


205
00:08:32,000 --> 00:08:35,580
So if I load this into my system,

206
00:08:35,580 --> 00:08:36,935
it prints out a set of things.

207
00:08:36,935 --> 00:08:39,110
Now let's see why it printed that out.

208
00:08:39,110 --> 00:08:40,789
I'm going to create some undergraduates.

209
00:08:40,789 --> 00:08:42,880
I'm going to create a couple of graduate students.

210
00:08:42,880 --> 00:08:45,540
I'm then going to create one of these grade books.

211
00:08:45,540 --> 00:08:49,034
And I'm going to add the students into that grade book.

212
00:08:49,034 --> 00:08:50,950
And notice I'm adding them in arbitrary order.

213
00:08:50,950 --> 00:08:53,200
That doesn't matter, because things like the ID number

214
00:08:53,200 --> 00:08:55,780
are going to help us sort out who they are.

215
00:08:55,780 --> 00:08:58,620
Having done that, I can add some grades.

216
00:08:58,620 --> 00:09:00,534
And what I did is I added in grades

217
00:09:00,534 --> 00:09:02,200
for each one of these students, and then

218
00:09:02,200 --> 00:09:04,920
I just asked to print out a grade report.

219
00:09:04,920 --> 00:09:08,564
And it prints out that sequence that you saw there, nicely

220
00:09:08,564 --> 00:09:10,730
set up because those carriage returns don't print it

221
00:09:10,730 --> 00:09:13,960
as one huge, long string but print each entry, if you like,

222
00:09:13,960 --> 00:09:16,460
on a different line.

223
00:09:16,460 --> 00:09:19,232
Now that I've done that, I could go in and add some more grades.

224
00:09:19,232 --> 00:09:20,690
And I'm going to just do that here.

225
00:09:20,690 --> 00:09:22,910
Add in some additional grades, and if I

226
00:09:22,910 --> 00:09:35,556
do that, I can again check to see what happens if I-- sorry.

227
00:09:35,556 --> 00:09:36,680
I just want to set this up.

228
00:09:36,680 --> 00:09:39,040
What happens if I then print that out?

229
00:09:39,040 --> 00:09:44,150
So if I load that into my system, oh, nice.

230
00:09:44,150 --> 00:09:46,840
It's updated the grades to have the pieces I wanted inside

231
00:09:46,840 --> 00:09:48,184
of there.

232
00:09:48,184 --> 00:09:49,850
The point you should take away from this

233
00:09:49,850 --> 00:09:53,690
is that I'm now dealing with this database, this structure,

234
00:09:53,690 --> 00:09:55,944
without having to know the internal details.

235
00:09:55,944 --> 00:09:58,110
I don't know in what order are the students entered.

236
00:09:58,110 --> 00:10:00,840
I don't know that, in fact, the grades are stored as a list.

237
00:10:00,840 --> 00:10:03,930
I can simply say, use Add Grade to add a grade associated

238
00:10:03,930 --> 00:10:05,190
with the student.

239
00:10:05,190 --> 00:10:06,850
I can then use things like sorted

240
00:10:06,850 --> 00:10:09,300
to simply figure out how to resort them so that they'll

241
00:10:09,300 --> 00:10:11,020
come out in an appropriate order,

242
00:10:11,020 --> 00:10:13,990
and then I can print out the appropriate information.

243
00:10:13,990 --> 00:10:18,010
And also notice this class has within it a large number

244
00:10:18,010 --> 00:10:19,970
of other class instances.

245
00:10:19,970 --> 00:10:21,490
That's perfect, because if I change

246
00:10:21,490 --> 00:10:23,650
the behavior of those class instances,

247
00:10:23,650 --> 00:10:28,350
it won't change the behavior of the grade book.

248
00:10:28,350 --> 00:10:31,130
Now, if I wanted to get out, for example,

249
00:10:31,130 --> 00:10:34,730
all the students in a class, I could do that

250
00:10:34,730 --> 00:10:38,590
by doing what I show right here, and I should do it that way.

251
00:10:38,590 --> 00:10:40,940
I'm going to just show you an example of that.

252
00:10:40,940 --> 00:10:49,870
If I say, for S in 600 all students--

253
00:10:49,870 --> 00:10:53,480
let me printout, yes-- it nicely prints out

254
00:10:53,480 --> 00:10:56,110
a list of the names of the students there.

255
00:10:56,110 --> 00:11:00,350
So exactly what I'd like, sorted by ID number, which is perfect.

256
00:11:00,350 --> 00:11:06,410
Now, why didn't I just do for S in 600 dot students,

257
00:11:06,410 --> 00:11:09,210
I know that that's the representation I'm using.

258
00:11:09,210 --> 00:11:10,014
I could do it.

259
00:11:10,014 --> 00:11:11,680
In fact, if I typed it, it would give me

260
00:11:11,680 --> 00:11:13,650
out basically the same kind of thing.

261
00:11:13,650 --> 00:11:17,940
But this violates that data hiding aspect of an object.

262
00:11:17,940 --> 00:11:20,160
It exposes the internal representation.

263
00:11:20,160 --> 00:11:22,340
I want to come back and remind you of this idea

264
00:11:22,340 --> 00:11:24,370
that I don't want to do that.

265
00:11:24,370 --> 00:11:28,090
Having built this system, I want to isolate from the user

266
00:11:28,090 --> 00:11:29,930
the internal representation.

267
00:11:29,930 --> 00:11:31,740
And as a consequence, if I were to change

268
00:11:31,740 --> 00:11:33,630
how I want to represent a grade book,

269
00:11:33,630 --> 00:11:35,600
I should only need to change the methods

270
00:11:35,600 --> 00:11:38,480
within that object, not any external procedures that

271
00:11:38,480 --> 00:11:39,240
use it.

272
00:11:39,240 --> 00:11:42,100
So in that case, this would still work,

273
00:11:42,100 --> 00:11:43,790
but this would not if I were to change

274
00:11:43,790 --> 00:11:45,720
that internal representation.

275
00:11:45,720 --> 00:11:47,490
Just a reminder of a good, clean way

276
00:11:47,490 --> 00:11:51,130
to try and build your hierarchy.

277
00:11:51,130 --> 00:11:52,960
So what we see here is that this nicely

278
00:11:52,960 --> 00:11:56,825
separates the collection of data from the use of the data.

279
00:11:56,825 --> 00:11:59,270
I could start now computing statistics

280
00:11:59,270 --> 00:12:01,210
on how students are performing in my class.

281
00:12:01,210 --> 00:12:02,940
I can add students to my class.

282
00:12:02,940 --> 00:12:05,740
If I needed to, I could drop a student from the class.

283
00:12:05,740 --> 00:12:08,320
Because the access is through methods associated

284
00:12:08,320 --> 00:12:12,200
with that grade book object, I've got this nice separation,

285
00:12:12,200 --> 00:12:14,210
and I'm going to try and be consistent of only

286
00:12:14,210 --> 00:12:18,070
using those methods to get out the internal data.

287
00:12:18,070 --> 00:12:19,740
There is one problem left with this,

288
00:12:19,740 --> 00:12:21,198
which is the thing I'm going to fix

289
00:12:21,198 --> 00:12:23,570
in the last portion of this lecture.

290
00:12:23,570 --> 00:12:26,310
Right now, this version is inefficient.

291
00:12:26,310 --> 00:12:27,770
To get a list of all the students,

292
00:12:27,770 --> 00:12:31,030
I create a copy of the internal list.

293
00:12:31,030 --> 00:12:31,730
That's nice.

294
00:12:31,730 --> 00:12:33,650
It lets me manipulate things without changing

295
00:12:33,650 --> 00:12:34,910
the internal structure.

296
00:12:34,910 --> 00:12:36,940
And if I have a class of only 20 or 30

297
00:12:36,940 --> 00:12:40,170
or even a couple of hundred students, not a big deal.

298
00:12:40,170 --> 00:12:43,230
But in a MOOC like this with 100,000 students,

299
00:12:43,230 --> 00:12:46,620
I don't want to always be generating a list 100,000 long

300
00:12:46,620 --> 00:12:48,570
before I do something with it, and I

301
00:12:48,570 --> 00:12:51,840
want to see how I might change things to have efficiency

302
00:12:51,840 --> 00:12:55,780
while preserving the performance that I've seen so far.

