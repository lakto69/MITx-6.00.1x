0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:03,460
This idea of function invocation-- function calling--

2
00:00:03,460 --> 00:00:04,547
is really important.

3
00:00:04,547 --> 00:00:06,130
It's central to how we're going to use

4
00:00:06,130 --> 00:00:08,130
functions to control our code.

5
00:00:08,130 --> 00:00:10,720
So I want to work through in a little more careful detail

6
00:00:10,720 --> 00:00:13,750
exactly what happens when we call a function

7
00:00:13,750 --> 00:00:17,282
and how we get values associated with variables.

8
00:00:17,282 --> 00:00:18,740
You'll see on the screen here, I've

9
00:00:18,740 --> 00:00:20,370
got a little piece of code.

10
00:00:20,370 --> 00:00:22,592
I'm defining a function called f.

11
00:00:22,592 --> 00:00:24,620
I'm binding x to 3, and then I'm going

12
00:00:24,620 --> 00:00:28,954
to call f with the value of x and bind that to z.

13
00:00:28,954 --> 00:00:31,120
Let me show you what happens if I actually run this.

14
00:00:31,120 --> 00:00:34,740
So on my computer, I've got a version of that file.

15
00:00:34,740 --> 00:00:37,790
And I'm going to load it into my shell.

16
00:00:37,790 --> 00:00:41,140
And what it prints out, as you can see, as it says in f of x,

17
00:00:41,140 --> 00:00:43,240
x is equal to 4.

18
00:00:43,240 --> 00:00:44,632
How'd that happen?

19
00:00:44,632 --> 00:00:46,590
What's going on here, because x seems like it's

20
00:00:46,590 --> 00:00:48,380
used in a lot of places?

21
00:00:48,380 --> 00:00:50,510
So this is going to be an important opportunity

22
00:00:50,510 --> 00:00:53,560
to look at how functions are called.

23
00:00:53,560 --> 00:00:56,870
As I've already said, the key idea is each formal parameter--

24
00:00:56,870 --> 00:00:58,580
in this case, I only have one-- is

25
00:00:58,580 --> 00:01:01,720
going to get bound to the value of the actual parameter

26
00:01:01,720 --> 00:01:03,640
when the function is called.

27
00:01:03,640 --> 00:01:05,580
And then when I call a function, I'm

28
00:01:05,580 --> 00:01:07,770
going to create a new environment,

29
00:01:07,770 --> 00:01:09,800
sometimes called a frame or a scope,

30
00:01:09,800 --> 00:01:12,190
a new place in which I'm going to bind variables

31
00:01:12,190 --> 00:01:14,970
and relative to which I'm going to evaluate

32
00:01:14,970 --> 00:01:17,050
the body of the function.

33
00:01:17,050 --> 00:01:20,910
Think of that scope as a mapping of names to objects.

34
00:01:20,910 --> 00:01:23,450
And, in fact, we've been using that idea when we were just

35
00:01:23,450 --> 00:01:25,340
talking to the shell, when we defined

36
00:01:25,340 --> 00:01:28,390
x to have a value of, say, of 5, we were creating

37
00:01:28,390 --> 00:01:31,960
in the global scope or frame a binding of the name

38
00:01:31,960 --> 00:01:34,700
x to the value 5.

39
00:01:34,700 --> 00:01:37,950
Now, let's look at this in a little more careful detail.

40
00:01:37,950 --> 00:01:40,420
Imagine I now do what I just did on my computer.

41
00:01:40,420 --> 00:01:43,500
I evaluate this sequence of expressions.

42
00:01:43,500 --> 00:01:45,494
There is that formal parameter.

43
00:01:45,494 --> 00:01:47,410
There's the actual parameter I'm going to use,

44
00:01:47,410 --> 00:01:49,210
and let's look at what happens.

45
00:01:49,210 --> 00:01:52,350
I evaluate that, and in that global frame,

46
00:01:52,350 --> 00:01:54,880
I create a set of bindings.

47
00:01:54,880 --> 00:01:57,540
First one is evaluating that definition

48
00:01:57,540 --> 00:02:02,260
binds the variable name f to something.

49
00:02:02,260 --> 00:02:05,170
Oh, but that's important, because that something is just

50
00:02:05,170 --> 00:02:06,560
a set of code.

51
00:02:06,560 --> 00:02:08,320
I haven't run f yet.

52
00:02:08,320 --> 00:02:11,039
I haven't tried to do x equals x plus 1 or anything else.

53
00:02:11,039 --> 00:02:14,140
I've literally, in the machine, said associate the name

54
00:02:14,140 --> 00:02:17,280
f with a chunk of stuff.

55
00:02:17,280 --> 00:02:19,510
Next thing I did was I evaluated x equal 3,

56
00:02:19,510 --> 00:02:20,880
and that just creates a binding.

57
00:02:20,880 --> 00:02:21,838
We've seen this before.

58
00:02:21,838 --> 00:02:26,990
So in the global scope, x has a binding to the value of 3.

59
00:02:26,990 --> 00:02:29,630
And now I'm ready to evaluate that last expression, which

60
00:02:29,630 --> 00:02:34,370
says give the name z the value of calling f on x.

61
00:02:34,370 --> 00:02:36,090
And I'm ready to do that.

62
00:02:36,090 --> 00:02:38,490
Now remember, before I can actually do the binding of c,

63
00:02:38,490 --> 00:02:40,281
I have to get the value of that expression.

64
00:02:40,281 --> 00:02:45,720
So calling f literally creates a new scope, a new frame.

65
00:02:45,720 --> 00:02:48,060
It will actually inherit things from the global frame

66
00:02:48,060 --> 00:02:51,450
if it needs it, but right now I've got a new environment.

67
00:02:51,450 --> 00:02:54,960
The definition of x has a formal variable

68
00:02:54,960 --> 00:02:58,850
x, and that's exactly what that corresponds to.

69
00:02:58,850 --> 00:03:02,070
And the value associated with it is

70
00:03:02,070 --> 00:03:08,482
the value of x that I passed in, which actually came from there.

71
00:03:08,482 --> 00:03:09,940
I know it looks a little confusing.

72
00:03:09,940 --> 00:03:11,950
I'm deliberately using two different values

73
00:03:11,950 --> 00:03:14,640
of x so you can see where the bindings come from.

74
00:03:14,640 --> 00:03:18,340
So f evaluated on x says, what is the value of x?

75
00:03:18,340 --> 00:03:21,760
I get it from the binding that I just did previously.

76
00:03:21,760 --> 00:03:25,400
So inside that f scope, x is bound to 3.

77
00:03:25,400 --> 00:03:28,340
Now, relative to that scope, I'm going

78
00:03:28,340 --> 00:03:30,590
to evaluate the body of f.

79
00:03:30,590 --> 00:03:32,830
I want to do the work that f says it's going to do.

80
00:03:32,830 --> 00:03:35,300
So let me see what happens there.

81
00:03:35,300 --> 00:03:38,862
First expression says, evaluate x plus 1,

82
00:03:38,862 --> 00:03:40,820
and I'm actually going to go back for a second.

83
00:03:40,820 --> 00:03:44,280
Remember, in the f scope, x has the binding of 3.

84
00:03:44,280 --> 00:03:47,940
I add 3 plus 1, that 4, and I create a new binding

85
00:03:47,940 --> 00:03:50,880
for x but in the f scope, because that's

86
00:03:50,880 --> 00:03:52,380
where I'm doing the work.

87
00:03:52,380 --> 00:03:54,440
So it changes it here.

88
00:03:54,440 --> 00:03:56,310
It does not change the thing that

89
00:03:56,310 --> 00:03:58,050
was out in the global frame.

90
00:03:58,050 --> 00:03:59,110
That's great.

91
00:03:59,110 --> 00:04:02,040
Now, relative to that, I'm going to print out something,

92
00:04:02,040 --> 00:04:03,570
and on my computer screen you saw

93
00:04:03,570 --> 00:04:07,340
it said, in f of x, x is equal to-- ah--

94
00:04:07,340 --> 00:04:09,370
the value of x in the f scope.

95
00:04:09,370 --> 00:04:12,170
And that's why it printed out 4.

96
00:04:12,170 --> 00:04:16,810
And then what it's going to do is it's going to return x.

97
00:04:16,810 --> 00:04:19,070
So literally it's going to get the value of x

98
00:04:19,070 --> 00:04:21,500
in the f scope, which is 4, and it's

99
00:04:21,500 --> 00:04:24,050
going to return it to the person who asked for it.

100
00:04:24,050 --> 00:04:25,740
And what was that person?

101
00:04:25,740 --> 00:04:26,720
That was down here.

102
00:04:26,720 --> 00:04:28,600
We're doing the binding of z.

103
00:04:28,600 --> 00:04:31,930
So I've just returned to that binding,

104
00:04:31,930 --> 00:04:34,700
a value for f of x, which is 4, and that

105
00:04:34,700 --> 00:04:37,930
creates the binding for z.

106
00:04:37,930 --> 00:04:41,510
If this is a little confusing, watch the same segment again,

107
00:04:41,510 --> 00:04:44,080
because this is an important idea.

108
00:04:44,080 --> 00:04:46,170
Any time I do an evaluate-- sorry, rephrase

109
00:04:46,170 --> 00:04:49,690
that-- any time I do an invocation of a function,

110
00:04:49,690 --> 00:04:51,180
I create a new frame.

111
00:04:51,180 --> 00:04:54,650
I bind the formal parameter of that function, or parameters

112
00:04:54,650 --> 00:04:56,670
if there is more than one, to the values

113
00:04:56,670 --> 00:04:58,410
of the expressions passed in.

114
00:04:58,410 --> 00:05:00,390
And relative to that frame, I now

115
00:05:00,390 --> 00:05:02,730
evaluate the body of that expression.

116
00:05:02,730 --> 00:05:04,750
When I'm done with the body of the function,

117
00:05:04,750 --> 00:05:07,050
if there's a return, I'm going to send the value back

118
00:05:07,050 --> 00:05:10,230
to whoever called for it and erase or remove that frame

119
00:05:10,230 --> 00:05:12,630
because I no longer need it.

120
00:05:12,630 --> 00:05:13,400
OK.

121
00:05:13,400 --> 00:05:17,190
With that idea, let's look at a couple of other examples.

122
00:05:17,190 --> 00:05:20,380
First, what happens if there is no return statement?

123
00:05:20,380 --> 00:05:22,620
Here's my function from before-- is even.

124
00:05:22,620 --> 00:05:26,460
But rather than returning is the remainder of i divided

125
00:05:26,460 --> 00:05:29,460
by 2 equal to 0, I just have the expression.

126
00:05:29,460 --> 00:05:31,950
So there's no return here.

127
00:05:31,950 --> 00:05:36,310
What happens in this case is that Python returns the value

128
00:05:36,310 --> 00:05:38,940
none, because I did not give a return.

129
00:05:38,940 --> 00:05:41,530
So Python will say in a function call,

130
00:05:41,530 --> 00:05:43,200
if you don't have an explicit return,

131
00:05:43,200 --> 00:05:45,390
I return the none value.

132
00:05:45,390 --> 00:05:47,370
It represents the absence of a value,

133
00:05:47,370 --> 00:05:49,489
and unfortunately that would mean, in this case,

134
00:05:49,489 --> 00:05:51,530
I would not get back the answer of true or false.

135
00:05:51,530 --> 00:05:53,620
I would simply print out nothing, because there's

136
00:05:53,620 --> 00:05:55,700
nothing to be returned.

137
00:05:55,700 --> 00:05:57,204
Point of this is, any time I want

138
00:05:57,204 --> 00:05:59,120
a function to do something, unless it's simply

139
00:05:59,120 --> 00:06:01,450
doing something we call a side effect,

140
00:06:01,450 --> 00:06:04,100
I always want to have at least one return that's

141
00:06:04,100 --> 00:06:06,250
going to give a value back.

142
00:06:06,250 --> 00:06:09,471
So remember to keep your returns in.

143
00:06:09,471 --> 00:06:11,970
In fact, that gives me a chance to talk about the difference

144
00:06:11,970 --> 00:06:14,475
between return and print.

145
00:06:14,475 --> 00:06:15,850
You can see the description here,

146
00:06:15,850 --> 00:06:17,820
and let's just do it quickly.

147
00:06:17,820 --> 00:06:21,740
Return only has a meaning inside a function.

148
00:06:21,740 --> 00:06:25,000
It's the only place we can use it, inside a function.

149
00:06:25,000 --> 00:06:26,600
I could have more than one return.

150
00:06:26,600 --> 00:06:28,430
If I have branches or other conditionals,

151
00:06:28,430 --> 00:06:31,020
I might have different places from which I want a return.

152
00:06:31,020 --> 00:06:34,930
But only one return will ever be executed inside the function,

153
00:06:34,930 --> 00:06:37,180
because it's going to throw me outside of the function

154
00:06:37,180 --> 00:06:38,840
and return a value.

155
00:06:38,840 --> 00:06:42,690
Any code inside the function but after the return statement

156
00:06:42,690 --> 00:06:44,395
will never be executed.

157
00:06:44,395 --> 00:06:45,770
And of course, a return does have

158
00:06:45,770 --> 00:06:47,090
a value associated with it.

159
00:06:47,090 --> 00:06:50,580
It's given back to the person who called the function.

160
00:06:50,580 --> 00:06:53,120
By comparison, while return has a meaning only

161
00:06:53,120 --> 00:06:55,350
inside a function, a print can certainly

162
00:06:55,350 --> 00:06:57,250
be used inside a function, but it can also

163
00:06:57,250 --> 00:06:58,950
be used outside of a function.

164
00:06:58,950 --> 00:07:00,510
We've already seen that.

165
00:07:00,510 --> 00:07:03,710
We can also execute many print statements inside a function.

166
00:07:03,710 --> 00:07:06,930
And any code inside the function after that print statement

167
00:07:06,930 --> 00:07:09,110
can, in fact, be executed.

168
00:07:09,110 --> 00:07:11,550
Again, a print has a value associated with it,

169
00:07:11,550 --> 00:07:14,670
but it is simply output directly onto the console

170
00:07:14,670 --> 00:07:16,780
rather than being returned.

171
00:07:16,780 --> 00:07:20,010
So prints are going to be handy to have us pass information

172
00:07:20,010 --> 00:07:21,990
back to the user to let them know

173
00:07:21,990 --> 00:07:23,850
the status of a computation.

174
00:07:23,850 --> 00:07:25,480
Return is the way in which I'm going

175
00:07:25,480 --> 00:07:28,290
to get a value back to somebody who asked for it, whether it's

176
00:07:28,290 --> 00:07:32,760
me as the user or some other function call.

177
00:07:32,760 --> 00:07:34,260
With that in mind, let's look at,

178
00:07:34,260 --> 00:07:37,250
in fact, how you might have other function calls.

179
00:07:37,250 --> 00:07:41,970
So not only can parameters have numerical values,

180
00:07:41,970 --> 00:07:43,740
they could also have another values,

181
00:07:43,740 --> 00:07:45,820
including being a function.

182
00:07:45,820 --> 00:07:48,910
So I have three definitions of functions here.

183
00:07:48,910 --> 00:07:51,740
The first one, A, takes no parameters.

184
00:07:51,740 --> 00:07:53,990
I've said this earlier, but I'm going to say it again.

185
00:07:53,990 --> 00:07:56,270
Notice it has an open and close paren.

186
00:07:56,270 --> 00:07:57,200
That's important.

187
00:07:57,200 --> 00:07:59,840
I have to tell it that there are no parameters there.

188
00:07:59,840 --> 00:08:04,660
Function B takes one parameter, in this case called y.

189
00:08:04,660 --> 00:08:10,450
And function C also takes one parameter, in this case it's z.

190
00:08:10,450 --> 00:08:12,840
What's interesting about this is how these functions

191
00:08:12,840 --> 00:08:13,370
are going to use them.

192
00:08:13,370 --> 00:08:14,911
And in a second, I'm going to run it.

193
00:08:14,911 --> 00:08:17,699
But notice I'm going to call function A with no parameter.

194
00:08:17,699 --> 00:08:19,490
So an open and close paren to tell me there

195
00:08:19,490 --> 00:08:20,684
are no parameters.

196
00:08:20,684 --> 00:08:22,100
I'm going to call function B. It's

197
00:08:22,100 --> 00:08:23,391
going to take in one parameter.

198
00:08:23,391 --> 00:08:25,790
In this case, I'm going to give it a number.

199
00:08:25,790 --> 00:08:28,600
And function C is going to take in one parameter,

200
00:08:28,600 --> 00:08:31,830
but in this case it's another function.

201
00:08:31,830 --> 00:08:32,330
Whoa.

202
00:08:32,330 --> 00:08:33,480
That's funky.

203
00:08:33,480 --> 00:08:34,770
It's actually OK.

204
00:08:34,770 --> 00:08:36,830
I can pass in the name of the function,

205
00:08:36,830 --> 00:08:39,289
and that will literally pass the actual function

206
00:08:39,289 --> 00:08:43,537
in to that parameter call for function C.

207
00:08:43,537 --> 00:08:45,120
Let's see what happens if we try this.

208
00:08:45,120 --> 00:08:47,830
So I've got that code loaded up over here.

209
00:08:47,830 --> 00:08:50,610
I'm going to pass it into my computer.

210
00:08:50,610 --> 00:08:52,900
And notice what it printed out.

211
00:08:52,900 --> 00:08:55,846
The first thing is it printed out inside function A.

212
00:08:55,846 --> 00:08:59,240
That came from calling this function,

213
00:08:59,240 --> 00:09:02,640
and that's the print statement right there.

214
00:09:02,640 --> 00:09:05,800
There is no return in function A.

215
00:09:05,800 --> 00:09:08,930
And so, in fact, the print takes the value returned

216
00:09:08,930 --> 00:09:11,580
by function A, which was none, and it printed it out

217
00:09:11,580 --> 00:09:13,290
on my computer.

218
00:09:13,290 --> 00:09:14,850
I then take the next call.

219
00:09:14,850 --> 00:09:18,440
I pass into the function B. Function B

220
00:09:18,440 --> 00:09:21,530
prints inside function B right there,

221
00:09:21,530 --> 00:09:23,260
which is the next thing it did.

222
00:09:23,260 --> 00:09:26,180
And then it returns the value passed in, which

223
00:09:26,180 --> 00:09:27,440
is the value of y, which is 2.

224
00:09:27,440 --> 00:09:30,340
That gets out at the 5, which is why on my machine

225
00:09:30,340 --> 00:09:31,420
I printed out 7.

226
00:09:31,420 --> 00:09:34,450
The print statement printed out 7.

227
00:09:34,450 --> 00:09:37,020
And then the last one, again, a little funky.

228
00:09:37,020 --> 00:09:42,411
I passed in function A as an argument for z in function C.

229
00:09:42,411 --> 00:09:43,160
And what happened?

230
00:09:43,160 --> 00:09:46,070
It printed out inside function C,

231
00:09:46,070 --> 00:09:50,870
and then it called a return of calling z with no arguments.

232
00:09:50,870 --> 00:09:51,800
And what's z?

233
00:09:51,800 --> 00:09:55,410
It's function A. Oh, that's nice, because function A then

234
00:09:55,410 --> 00:09:59,370
said print out inside function A, which it did.

235
00:09:59,370 --> 00:10:02,550
Return nothing, because there is no return statement.

236
00:10:02,550 --> 00:10:07,504
And so this print at the bottom then printed out none.

237
00:10:07,504 --> 00:10:09,170
We could step through it more carefully,

238
00:10:09,170 --> 00:10:10,620
but you hopefully get the idea.

239
00:10:10,620 --> 00:10:13,570
In each case, I'm simply evaluating the body

240
00:10:13,570 --> 00:10:15,170
with respect to a frame.

241
00:10:15,170 --> 00:10:16,930
And the arguments could, in fact,

242
00:10:16,930 --> 00:10:20,400
be other functions that I can invoke inside

243
00:10:20,400 --> 00:10:25,380
of a function call, which I did inside of function C.

244
00:10:25,380 --> 00:10:27,610
So as a consequence, inside of a function,

245
00:10:27,610 --> 00:10:30,320
we can both access a variable defined outside

246
00:10:30,320 --> 00:10:32,874
as well as a variable defined inside.

247
00:10:32,874 --> 00:10:34,540
On the other hand, inside of a function,

248
00:10:34,540 --> 00:10:37,080
we can't modify a variable that's

249
00:10:37,080 --> 00:10:40,850
defined outside of the scope of that function.

250
00:10:40,850 --> 00:10:42,930
And here I have three little examples just

251
00:10:42,930 --> 00:10:44,900
to give you a sense of that.

252
00:10:44,900 --> 00:10:48,149
What I'm going to do is show you basically

253
00:10:48,149 --> 00:10:50,440
what would happen for each one of these function calls.

254
00:10:50,440 --> 00:10:56,530
So I've defined f of x to be set x equal to 1, add 1 to x,

255
00:10:56,530 --> 00:10:59,020
and then print out the value of x.

256
00:10:59,020 --> 00:11:01,880
I've define g to simply say print x,

257
00:11:01,880 --> 00:11:03,970
and then print x plus 1.

258
00:11:03,970 --> 00:11:05,620
And I've defined h to have a body that

259
00:11:05,620 --> 00:11:08,290
says simply increment x by 1.

260
00:11:08,290 --> 00:11:12,230
And I want to think about what do those things actually do?

261
00:11:12,230 --> 00:11:14,460
Well, let's look at each of those examples.

262
00:11:14,460 --> 00:11:18,520
In each case, I'm going to define x to have the value 5.

263
00:11:18,520 --> 00:11:21,130
I'm going to call the function with that value of x,

264
00:11:21,130 --> 00:11:23,540
and then I'm going to print out x.

265
00:11:23,540 --> 00:11:24,950
What happens?

266
00:11:24,950 --> 00:11:29,750
In the case of f of x, x as 5 is passed in.

267
00:11:29,750 --> 00:11:34,120
I redefine x to be 1 inside of there.

268
00:11:34,120 --> 00:11:37,530
And then I add 1 to that value of x, which is 2,

269
00:11:37,530 --> 00:11:39,420
and then I print out x.

270
00:11:39,420 --> 00:11:44,740
So, in fact, f of x is going to print out the value 2.

271
00:11:44,740 --> 00:11:50,110
And then this print statement is going to print out the value 5.

272
00:11:50,110 --> 00:11:51,220
Why?

273
00:11:51,220 --> 00:11:54,840
Because it sees the value of x defined in the global scope,

274
00:11:54,840 --> 00:11:57,090
which is where I am.

275
00:11:57,090 --> 00:12:01,760
What happens in the case of g? g says-- well, first of all,

276
00:12:01,760 --> 00:12:03,920
I called g with the value of x, which

277
00:12:03,920 --> 00:12:07,110
is 5, which means 5 is going to be used in place of y.

278
00:12:07,110 --> 00:12:09,620
And then I say print x.

279
00:12:09,620 --> 00:12:10,120
Hmm.

280
00:12:10,120 --> 00:12:11,078
You say, wait a minute.

281
00:12:11,078 --> 00:12:12,990
There is no x as a parameter to g.

282
00:12:12,990 --> 00:12:15,010
That's fine, because it then says

283
00:12:15,010 --> 00:12:18,270
if I can't find it in the frame associated with g,

284
00:12:18,270 --> 00:12:19,340
let me look outside.

285
00:12:19,340 --> 00:12:21,340
And there is a value, which is 5.

286
00:12:21,340 --> 00:12:25,840
So in this case, it's going to print 5,

287
00:12:25,840 --> 00:12:30,100
then it's going to print 6, which is x plus 1.

288
00:12:30,100 --> 00:12:30,977
It has no return.

289
00:12:30,977 --> 00:12:32,560
So it's not going to do anything else.

290
00:12:32,560 --> 00:12:34,770
And then I'm going to print the value

291
00:12:34,770 --> 00:12:37,830
of x, which I get from here, the global environment.

292
00:12:37,830 --> 00:12:40,420
And it's going to print 5.

293
00:12:40,420 --> 00:12:42,716
Finally, I define h of y.

294
00:12:42,716 --> 00:12:43,340
I've done that.

295
00:12:43,340 --> 00:12:48,610
I've defined x to be 5, and now I call h with the value of y

296
00:12:48,610 --> 00:12:49,922
being 5.

297
00:12:49,922 --> 00:12:50,630
And what do I do?

298
00:12:50,630 --> 00:12:52,290
I'm going to print out-- sorry, not that.

299
00:12:52,290 --> 00:12:52,873
Rephrase that.

300
00:12:52,873 --> 00:12:55,270
I'm going to try and define x to be x plus 1.

301
00:12:55,270 --> 00:12:57,144
And let's think about what happens.

302
00:12:57,144 --> 00:12:58,810
So just to go back to this, I've already

303
00:12:58,810 --> 00:12:59,897
defined x from outside g.

304
00:12:59,897 --> 00:13:01,230
That's why I pick up that scope.

305
00:13:01,230 --> 00:13:03,760
What happens in the case of h?

306
00:13:03,760 --> 00:13:07,240
Oh, I got an unbound variable error,

307
00:13:07,240 --> 00:13:11,330
because I'm trying to look up the local variable value of x.

308
00:13:11,330 --> 00:13:13,844
I'm referencing it before I've assigned it.

309
00:13:13,844 --> 00:13:15,760
So, in fact, I'm going to complain about this,

310
00:13:15,760 --> 00:13:18,160
and I'm not going to succeed.

311
00:13:18,160 --> 00:13:22,340
So we can see, I can look up values outside the scope,

312
00:13:22,340 --> 00:13:26,300
but I can't change the values of those things

313
00:13:26,300 --> 00:13:28,160
outside of the scope appropriately.

314
00:13:28,160 --> 00:13:29,720
And that's a place where I have to be

315
00:13:29,720 --> 00:13:33,350
careful about how I actually use these different procedures.

316
00:13:33,350 --> 00:13:35,550
Three different examples shows you different ways

317
00:13:35,550 --> 00:13:37,880
in which we can deduce how we actually pick up

318
00:13:37,880 --> 00:13:41,110
the values of the variables.

319
00:13:41,110 --> 00:13:43,720
In each case, as I said, the x comes

320
00:13:43,720 --> 00:13:45,970
from the global or main program scope

321
00:13:45,970 --> 00:13:48,460
when I print out this value at the bottom down here.

322
00:13:48,460 --> 00:13:51,507


323
00:13:51,507 --> 00:13:53,590
I'm going to show you one more example of scoping.

324
00:13:53,590 --> 00:13:55,030
I want to do a quick aside, which

325
00:13:55,030 --> 00:13:56,867
says when you get to really tricky things,

326
00:13:56,867 --> 00:13:58,450
there's a nice place to go look, which

327
00:13:58,450 --> 00:14:00,908
is this place on the web called the Python Tutor that helps

328
00:14:00,908 --> 00:14:03,030
you sort these pieces out.

329
00:14:03,030 --> 00:14:05,680
And the last example, before we move on to other topics,

330
00:14:05,680 --> 00:14:09,410
is to look at something that actually has a function defined

331
00:14:09,410 --> 00:14:12,380
inside another function.

332
00:14:12,380 --> 00:14:14,150
Wow, that sounds neat.

333
00:14:14,150 --> 00:14:16,960
Here I've got a definition for g, and inside of there,

334
00:14:16,960 --> 00:14:19,069
I've got a definition for h.

335
00:14:19,069 --> 00:14:20,610
And if I look at this code, I'm going

336
00:14:20,610 --> 00:14:22,029
to actually run it over here.

337
00:14:22,029 --> 00:14:23,570
Let's see what happens when I run it,

338
00:14:23,570 --> 00:14:26,950
and let's see why it does that appropriate thing.

339
00:14:26,950 --> 00:14:28,920
And when I ran it, it prints out the statement

340
00:14:28,920 --> 00:14:32,176
inside g of x, x bound to 4.

341
00:14:32,176 --> 00:14:34,670
And I want to see how that comes about.

342
00:14:34,670 --> 00:14:35,970
So here we go.

343
00:14:35,970 --> 00:14:39,059
When I evaluate or when I just, in fact,

344
00:14:39,059 --> 00:14:41,350
evaluate it inside my machine, this description, here's

345
00:14:41,350 --> 00:14:42,470
what happened.

346
00:14:42,470 --> 00:14:44,390
As I saw before, in the global environment,

347
00:14:44,390 --> 00:14:48,450
g was bound to a bunch of code.

348
00:14:48,450 --> 00:14:49,656
Where is h?

349
00:14:49,656 --> 00:14:51,300
It hasn't happened yet.

350
00:14:51,300 --> 00:14:52,970
It's simply sitting in a chunk of code.

351
00:14:52,970 --> 00:14:54,790
We have not yet evaluated that body.

352
00:14:54,790 --> 00:14:56,630
So nothing has happened yet.

353
00:14:56,630 --> 00:14:58,700
x is bound to 3.

354
00:14:58,700 --> 00:15:00,960
So when I get to the point shown by the arrow here,

355
00:15:00,960 --> 00:15:03,840
this point in the code, I've got g as some code.

356
00:15:03,840 --> 00:15:06,190
I've got x bound to the value 3.

357
00:15:06,190 --> 00:15:10,310
Now I'm ready to do a binding for z to be a call to g.

358
00:15:10,310 --> 00:15:11,850
We saw it happen before.

359
00:15:11,850 --> 00:15:15,910
g creates a new scope, and inside of that scope

360
00:15:15,910 --> 00:15:18,900
I'm going to bind the value of x.

361
00:15:18,900 --> 00:15:21,780
And that x is coming from the formal parameter for g.

362
00:15:21,780 --> 00:15:23,900
The value is coming from the binding

363
00:15:23,900 --> 00:15:26,090
for x in the global scope.

364
00:15:26,090 --> 00:15:28,230
So x is bound to 3.

365
00:15:28,230 --> 00:15:31,370
And then I'm going to evaluate the body of g.

366
00:15:31,370 --> 00:15:35,330
And this is cool, because that says inside of here,

367
00:15:35,330 --> 00:15:38,070
I'm evaluating the definition of h.

368
00:15:38,070 --> 00:15:40,630
This is sometimes called an internal or helper function,

369
00:15:40,630 --> 00:15:43,210
because it belongs only to g.

370
00:15:43,210 --> 00:15:47,020
The binding for h right here is to some set of code.

371
00:15:47,020 --> 00:15:50,145
Only when I'm inside of g can I use h.

372
00:15:50,145 --> 00:15:51,180
It's protected.

373
00:15:51,180 --> 00:15:52,427
That's great.

374
00:15:52,427 --> 00:15:53,260
Haven't used it yet.

375
00:15:53,260 --> 00:15:54,844
I've just got a binding for h.

376
00:15:54,844 --> 00:15:55,760
And then what do I do?

377
00:15:55,760 --> 00:15:59,670
I create a binding for x, and notice what happened.

378
00:15:59,670 --> 00:16:04,310
I say get the current value of x, which was 3, add 1 to it,

379
00:16:04,310 --> 00:16:07,310
and then change the binding for x in the scope of g,

380
00:16:07,310 --> 00:16:09,040
because that's where I'm doing the work.

381
00:16:09,040 --> 00:16:11,550
So it's changed that binding for x but not this one

382
00:16:11,550 --> 00:16:13,670
over here, which is still 3.

383
00:16:13,670 --> 00:16:15,380
And then I do the print statement,

384
00:16:15,380 --> 00:16:19,930
which is why it says in g of x, x has got the value 4.

385
00:16:19,930 --> 00:16:24,310
Because, in fact, I see this value of x over here.

386
00:16:24,310 --> 00:16:25,130
All right.

387
00:16:25,130 --> 00:16:26,210
Almost done.

388
00:16:26,210 --> 00:16:29,516
Now I'm going to call h.

389
00:16:29,516 --> 00:16:30,015
How?

390
00:16:30,015 --> 00:16:32,010
H is a function.

391
00:16:32,010 --> 00:16:33,100
It's right there.

392
00:16:33,100 --> 00:16:36,320
And since I'm invoking it, I create a new scope.

393
00:16:36,320 --> 00:16:40,450
And this scope inherits from g, which inherited

394
00:16:40,450 --> 00:16:42,710
from the global scope.

395
00:16:42,710 --> 00:16:45,230
Inside of h, I bind any formal parameters.

396
00:16:45,230 --> 00:16:46,370
There aren't any.

397
00:16:46,370 --> 00:16:46,920
What do I do?

398
00:16:46,920 --> 00:16:48,900
I evaluate the body of h.

399
00:16:48,900 --> 00:16:55,420
So I bind x to the string abc, and then what do I return?

400
00:16:55,420 --> 00:16:56,180
Oh, yeah.

401
00:16:56,180 --> 00:16:56,842
Nothing.

402
00:16:56,842 --> 00:16:58,300
Because I have no return statement.

403
00:16:58,300 --> 00:17:02,950
So having done that binding for x, I'm done with the call to h,

404
00:17:02,950 --> 00:17:05,670
and there is nothing to return.

405
00:17:05,670 --> 00:17:08,389
Having done that, I'm now ready to do the last part of g,

406
00:17:08,389 --> 00:17:10,319
which was to return x.

407
00:17:10,319 --> 00:17:13,710
And you notice that binding inside of h, of x equal to abc,

408
00:17:13,710 --> 00:17:14,660
it's gone.

409
00:17:14,660 --> 00:17:16,040
It's been garbage collected.

410
00:17:16,040 --> 00:17:19,579
And so I now simply return the value x, which I know

411
00:17:19,579 --> 00:17:21,910
is defined inside the scope of g.

412
00:17:21,910 --> 00:17:27,079
And that gets returned as the value that I associate with z.

413
00:17:27,079 --> 00:17:28,160
Perfect.

414
00:17:28,160 --> 00:17:33,050
I'm now set, because z has the binding 4.

415
00:17:33,050 --> 00:17:34,930
So there is a more complicated example,

416
00:17:34,930 --> 00:17:37,410
but you notice how those rules for scopes

417
00:17:37,410 --> 00:17:39,590
very nicely tell me and, more importantly,

418
00:17:39,590 --> 00:17:42,370
tell Python exactly how to look up values

419
00:17:42,370 --> 00:17:46,210
and how to use those to store new values as I do bindings.

