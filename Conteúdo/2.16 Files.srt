0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:02,680
Now that we have the ability to create functions,

2
00:00:02,680 --> 00:00:04,305
to define our own functions, we're

3
00:00:04,305 --> 00:00:05,680
going to be able to start solving

4
00:00:05,680 --> 00:00:07,888
some really neat problems, including some of the ones

5
00:00:07,888 --> 00:00:09,077
we just looked at.

6
00:00:09,077 --> 00:00:10,910
But one of the things that's going to happen

7
00:00:10,910 --> 00:00:13,368
is that we're going to be able to create lots of functions.

8
00:00:13,368 --> 00:00:16,360
And that means that we need to think about how to handle them.

9
00:00:16,360 --> 00:00:19,920
So far we've assumed that all of our code is stored in one file.

10
00:00:19,920 --> 00:00:22,830
And that's cumbersome when I've got large collections of code,

11
00:00:22,830 --> 00:00:25,440
or especially when I've got a collection of code that's

12
00:00:25,440 --> 00:00:28,700
going to be used by different people in different places

13
00:00:28,700 --> 00:00:31,787
and I'd like to be able to access it directly.

14
00:00:31,787 --> 00:00:33,870
And so for that we're going to introduce something

15
00:00:33,870 --> 00:00:34,953
you're going to use a lot.

16
00:00:34,953 --> 00:00:36,330
It's called a module.

17
00:00:36,330 --> 00:00:39,240
And basically a module is a Python file that has something

18
00:00:39,240 --> 00:00:42,750
with a .py extension to it that's a collection of Python

19
00:00:42,750 --> 00:00:44,750
definitions of statements.

20
00:00:44,750 --> 00:00:47,450
Once I've got that module I can use it.

21
00:00:47,450 --> 00:00:50,580
And I need to talk briefly about how do you use it.

22
00:00:50,580 --> 00:00:52,230
So for example, imagine I've created

23
00:00:52,230 --> 00:00:54,740
a little file called circle.pi.

24
00:00:54,740 --> 00:00:56,690
It's a Python file called circle and it's

25
00:00:56,690 --> 00:00:58,830
got in it a couple of simple functions for dealing

26
00:00:58,830 --> 00:01:01,270
with properties of circles-- compute the area,

27
00:01:01,270 --> 00:01:02,730
compute the circumference.

28
00:01:02,730 --> 00:01:05,489
Also put a definition of Pi inside of there.

29
00:01:05,489 --> 00:01:08,880
I've saved that file away and now I want to use it.

30
00:01:08,880 --> 00:01:10,390
How might I use it?

31
00:01:10,390 --> 00:01:12,930
Well I can import it.

32
00:01:12,930 --> 00:01:17,780
I can either import it into the shell itself or I could import

33
00:01:17,780 --> 00:01:22,050
it in fact into some other file, because I want to use it there.

34
00:01:22,050 --> 00:01:26,420
And so the usage here is if I can invoke the command import

35
00:01:26,420 --> 00:01:29,100
circle, it goes and finds that file

36
00:01:29,100 --> 00:01:32,490
and reads all of the statements, including the definitions

37
00:01:32,490 --> 00:01:35,540
and assignments inside that file, into in this case

38
00:01:35,540 --> 00:01:36,790
the shell.

39
00:01:36,790 --> 00:01:41,440
Now inside of the shell I could redefine Pi to be 3.

40
00:01:41,440 --> 00:01:43,540
That's OK, because I'm walking inside the shell.

41
00:01:43,540 --> 00:01:45,600
I could print that out, and in that case

42
00:01:45,600 --> 00:01:47,440
it's going to print out 3.

43
00:01:47,440 --> 00:01:50,590
But then I could print out the value of Pi

44
00:01:50,590 --> 00:01:52,580
that was defined in the module circle.

45
00:01:52,580 --> 00:01:56,190
And to do that I use this notation here of circle

46
00:01:56,190 --> 00:01:59,660
with a dot followed by pi.

47
00:01:59,660 --> 00:02:04,240
It's telling me in the module circle look up the value of Pi.

48
00:02:04,240 --> 00:02:08,930
And that will print out what I defined there-- 3.14159.

49
00:02:08,930 --> 00:02:12,380
And similarly I could call the function defined in circle.

50
00:02:12,380 --> 00:02:15,180
Again, the dot that says inside of the circle module

51
00:02:15,180 --> 00:02:19,490
get the function called area and call it on an argument 3

52
00:02:19,490 --> 00:02:20,990
and it prints out something.

53
00:02:20,990 --> 00:02:24,110
And the same thing with circumference.

54
00:02:24,110 --> 00:02:27,420
So I can import things into my environment, whether again it's

55
00:02:27,420 --> 00:02:29,500
the shell or as we'll see later on inside

56
00:02:29,500 --> 00:02:31,970
of another environment or it's right inside of another file

57
00:02:31,970 --> 00:02:35,260
itself because I want to use it there.

58
00:02:35,260 --> 00:02:38,100
If I don't want to refer to the functions and variables

59
00:02:38,100 --> 00:02:38,900
by their module.

60
00:02:38,900 --> 00:02:41,350
If I don't want to use that slightly clunky circle.pi

61
00:02:41,350 --> 00:02:45,870
or circle.area and I know that the names in that module

62
00:02:45,870 --> 00:02:48,120
don't collide with things I'm using directly,

63
00:02:48,120 --> 00:02:51,060
either inside the shell or inside of a new function,

64
00:02:51,060 --> 00:02:53,610
I can in fact do a slightly different version

65
00:02:53,610 --> 00:02:57,450
in which I say from a module, in this case circle,

66
00:02:57,450 --> 00:02:59,170
import everything.

67
00:02:59,170 --> 00:03:02,480
And the everything is done by simply giving it a star.

68
00:03:02,480 --> 00:03:04,850
That will bring all of the definitions, all

69
00:03:04,850 --> 00:03:07,160
of the assignments, into that environment,

70
00:03:07,160 --> 00:03:10,140
but now I simply refer to them by their name.

71
00:03:10,140 --> 00:03:14,330
I don't have to put that extra circle dot in front of them.

72
00:03:14,330 --> 00:03:16,230
This has the effect of creating bindings

73
00:03:16,230 --> 00:03:19,120
within the current scope for all of the objects defined

74
00:03:19,120 --> 00:03:20,390
within circle.

75
00:03:20,390 --> 00:03:23,210
And the statements, as a consequence, within a module

76
00:03:23,210 --> 00:03:27,250
are executed only the first time a module is imported.

77
00:03:27,250 --> 00:03:28,920
If I want to redo something I have

78
00:03:28,920 --> 00:03:31,429
to recall that actual invocation.

79
00:03:31,429 --> 00:03:32,970
But that gives me a nice way to start

80
00:03:32,970 --> 00:03:34,890
building modularity of a higher scale

81
00:03:34,890 --> 00:03:39,170
by files as well as by functions.

82
00:03:39,170 --> 00:03:40,840
And that leads to the last piece we're

83
00:03:40,840 --> 00:03:43,800
going to deal with today, which is we need a way to save

84
00:03:43,800 --> 00:03:46,310
our work for later use.

85
00:03:46,310 --> 00:03:49,790
And we certainly have that if we do something inside of the text

86
00:03:49,790 --> 00:03:51,670
editor, but we also want to be able to do

87
00:03:51,670 --> 00:03:54,880
that inside of computations we're doing.

88
00:03:54,880 --> 00:03:56,520
Every operating system on a computer

89
00:03:56,520 --> 00:03:58,070
has its own way of handling files,

90
00:03:58,070 --> 00:04:01,760
and so Python handles by providing an operating

91
00:04:01,760 --> 00:04:05,050
system independent way of accessing files

92
00:04:05,050 --> 00:04:07,140
called a file handle.

93
00:04:07,140 --> 00:04:10,780
And the way that is done is by using the special command open

94
00:04:10,780 --> 00:04:16,800
and giving it the name of a file and giving it a command.

95
00:04:16,800 --> 00:04:18,519
So in this particular case, open is

96
00:04:18,519 --> 00:04:22,160
going to open up a file handle, that is an access into a file,

97
00:04:22,160 --> 00:04:24,690
with the name kids and the W here

98
00:04:24,690 --> 00:04:26,810
says that it's opened for writing.

99
00:04:26,810 --> 00:04:28,410
I'm going to be able to write into it.

100
00:04:28,410 --> 00:04:31,560
And I've bound that to a name so I can refer to it.

101
00:04:31,560 --> 00:04:35,830
Name handle is the handle that gets into that file.

102
00:04:35,830 --> 00:04:37,510
That allows me then to use it.

103
00:04:37,510 --> 00:04:39,510
So for example, I could write a little loop that

104
00:04:39,510 --> 00:04:42,690
says to the user, type in a name,

105
00:04:42,690 --> 00:04:46,880
and I'll write it into that file.

106
00:04:46,880 --> 00:04:49,680
By again using name handle and the dot and then the

107
00:04:49,680 --> 00:04:50,990
write command.

108
00:04:50,990 --> 00:04:52,490
And this little extra character here

109
00:04:52,490 --> 00:04:54,840
is a string that just says do a carriage return

110
00:04:54,840 --> 00:04:58,047
or start a new line after the end of this right.

111
00:04:58,047 --> 00:04:59,630
I could do it as many times as I want.

112
00:04:59,630 --> 00:05:01,630
In this case it was just going to be two times,

113
00:05:01,630 --> 00:05:04,310
but what I'm doing is I'm writing directly into a file,

114
00:05:04,310 --> 00:05:06,460
in this case called kids, things that I'm

115
00:05:06,460 --> 00:05:08,080
inputting on the terminal.

116
00:05:08,080 --> 00:05:10,600
You can imagine also doing computations and writing them

117
00:05:10,600 --> 00:05:11,520
away.

118
00:05:11,520 --> 00:05:15,560
When I'm done, I close the file handle

119
00:05:15,560 --> 00:05:17,570
by invoking the method close.

120
00:05:17,570 --> 00:05:19,310
Again with name handle, because that's

121
00:05:19,310 --> 00:05:22,330
the one I set up up here, dot close.

122
00:05:22,330 --> 00:05:24,640
And the open close paren to say that it's actually

123
00:05:24,640 --> 00:05:29,940
an invoking of a function that closes up the file.

124
00:05:29,940 --> 00:05:31,980
And finally, I can do the same thing

125
00:05:31,980 --> 00:05:36,100
where I want to read from a file by giving it the special string

126
00:05:36,100 --> 00:05:39,522
R. And in this case I could read from that file

127
00:05:39,522 --> 00:05:40,980
and just print out a set of things,

128
00:05:40,980 --> 00:05:44,144
and when I'm done again close them off.

129
00:05:44,144 --> 00:05:46,060
So this gives you a little bit more power now.

130
00:05:46,060 --> 00:05:48,140
And it's part of that idea of modularity.

131
00:05:48,140 --> 00:05:50,360
I have functions giving me modularity.

132
00:05:50,360 --> 00:05:53,420
I can have collections of functions inside of files.

133
00:05:53,420 --> 00:05:56,100
I can create files as I'm interacting with them.

134
00:05:56,100 --> 00:05:58,930
And I can use all of those ideas to really control

135
00:05:58,930 --> 00:06:02,860
the complexity of the systems that I'm building.

136
00:06:02,860 --> 00:06:03,562


