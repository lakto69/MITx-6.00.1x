0
00:00:00,000 --> 00:00:00,499
...

1
00:00:00,499 --> 00:00:03,220
We've been using exhaustive algorithms, guess and check

2
00:00:03,220 --> 00:00:06,074
algorithms to solve some simple numerical problems.

3
00:00:06,074 --> 00:00:07,490
But if you think about it, they've

4
00:00:07,490 --> 00:00:09,590
all been doing things with integers

5
00:00:09,590 --> 00:00:11,750
where there is a finite number of choices

6
00:00:11,750 --> 00:00:13,040
that we have to check.

7
00:00:13,040 --> 00:00:14,070
And that makes sense.

8
00:00:14,070 --> 00:00:15,860
I can certainly run through all of them

9
00:00:15,860 --> 00:00:17,770
until I get to either the right answer

10
00:00:17,770 --> 00:00:20,227
or determined there isn't a possible answer.

11
00:00:20,227 --> 00:00:21,810
But now, suppose we want to find, say,

12
00:00:21,810 --> 00:00:25,570
the square root or the cube root of any non-negative number.

13
00:00:25,570 --> 00:00:28,070
Could be an integer, it could be a float,

14
00:00:28,070 --> 00:00:29,670
it could be any number.

15
00:00:29,670 --> 00:00:32,049
I can't generate all possible guesses.

16
00:00:32,049 --> 00:00:33,520
They're infinite.

17
00:00:33,520 --> 00:00:36,180
So I can't, in this case, guarantee an exact answer,

18
00:00:36,180 --> 00:00:37,600
but I could come close.

19
00:00:37,600 --> 00:00:39,740
Now what I just want to do is try and find

20
00:00:39,740 --> 00:00:41,800
a guess that's close enough to the cube

21
00:00:41,800 --> 00:00:44,230
root or the square root of the thing I'm looking for.

22
00:00:44,230 --> 00:00:47,310
I can still use that notion of exhaustive enumeration.

23
00:00:47,310 --> 00:00:49,520
But I'm going to now have to pick examples

24
00:00:49,520 --> 00:00:52,320
where I take small steps in order to generate the guess

25
00:00:52,320 --> 00:00:54,460
and check to see if I'm close enough.

26
00:00:54,460 --> 00:00:57,330
Let's see what that might look like.

27
00:00:57,330 --> 00:00:59,410
Here, the idea is I have to define

28
00:00:59,410 --> 00:01:01,170
what's a good enough solution.

29
00:01:01,170 --> 00:01:04,200
So I want to start with a guess, say, one.

30
00:01:04,200 --> 00:01:06,170
I want to check to see if that's close enough.

31
00:01:06,170 --> 00:01:11,460
If it isn't, I'm going to change it by a tiny amount, say 1.001.

32
00:01:11,460 --> 00:01:12,200
Check that one.

33
00:01:12,200 --> 00:01:14,390
Then 1.002 and keep doing that.

34
00:01:14,390 --> 00:01:17,930
So I need to increment by some small value as I go along.

35
00:01:17,930 --> 00:01:19,680
But I also have to define, what does it

36
00:01:19,680 --> 00:01:20,750
mean to get close enough?

37
00:01:20,750 --> 00:01:23,270
It won't be exactly the same because I'm not going

38
00:01:23,270 --> 00:01:24,900
to be able to guarantee that.

39
00:01:24,900 --> 00:01:26,800
So here, I'm going to use, in the case

40
00:01:26,800 --> 00:01:29,260
of cube root, something that tells me

41
00:01:29,260 --> 00:01:30,670
whether I'm close enough.

42
00:01:30,670 --> 00:01:33,830
By looking at-- sorry, the guess cubed,

43
00:01:33,830 --> 00:01:36,016
take the absolute value in case it's negative,

44
00:01:36,016 --> 00:01:37,640
and look at the difference between that

45
00:01:37,640 --> 00:01:39,490
and cubed to see if it's less than

46
00:01:39,490 --> 00:01:41,480
or equal to a small number.

47
00:01:41,480 --> 00:01:43,580
And if it is, I'm going to say I'm close enough

48
00:01:43,580 --> 00:01:45,380
and I'm going to stop.

49
00:01:45,380 --> 00:01:48,980
One of the tricks here is that when I have these small values,

50
00:01:48,980 --> 00:01:51,000
I'm going to have to be careful.

51
00:01:51,000 --> 00:01:53,360
If I make them really small, I'll

52
00:01:53,360 --> 00:01:55,290
make sure I find a really good guess

53
00:01:55,290 --> 00:01:57,450
but it's going to slow the program down.

54
00:01:57,450 --> 00:02:01,390
If I make them really large, I might actually miss the answer.

55
00:02:01,390 --> 00:02:03,540
And similarly, when I decide how close I

56
00:02:03,540 --> 00:02:06,930
want to get with epsilon, if I make epsilon big,

57
00:02:06,930 --> 00:02:09,930
I'm going to make it easier to find an answer,

58
00:02:09,930 --> 00:02:12,260
but I might get a less accurate answer.

59
00:02:12,260 --> 00:02:15,140
And so I have to think carefully about how I do both of those.

60
00:02:15,140 --> 00:02:16,630
But let's look at that idea to see

61
00:02:16,630 --> 00:02:20,070
how I can still use the idea of guess and check, but now

62
00:02:20,070 --> 00:02:23,960
with things that could compute the cube root of anything.

63
00:02:23,960 --> 00:02:25,457
So here's an example.

64
00:02:25,457 --> 00:02:27,790
I'm going to start off with some value for the thing I'm

65
00:02:27,790 --> 00:02:28,914
trying to find the cube of.

66
00:02:28,914 --> 00:02:31,000
27 is going to be an easy one.

67
00:02:31,000 --> 00:02:34,844
I'm going to set up some initial values.

68
00:02:34,844 --> 00:02:37,260
Epsilon is going to be something that tells me how close I

69
00:02:37,260 --> 00:02:38,690
want to get to the answer.

70
00:02:38,690 --> 00:02:40,600
Guess is where I'm going to start.

71
00:02:40,600 --> 00:02:42,290
And increments, the size in which

72
00:02:42,290 --> 00:02:44,995
I'm going to increase my guess as I move along.

73
00:02:44,995 --> 00:02:46,370
And just to keep track of it, I'm

74
00:02:46,370 --> 00:02:49,450
going to set up another variable called number of guesses.

75
00:02:49,450 --> 00:02:52,430
I'm going to use that to keep track of how many times do I go

76
00:02:52,430 --> 00:02:54,450
through the loop as I do this.

77
00:02:54,450 --> 00:02:56,190
And then what does this code do?

78
00:02:56,190 --> 00:03:00,420
It says while the difference between the cube or the guess

79
00:03:00,420 --> 00:03:03,100
cubed and the thing I'm trying to find the cubed root of,

80
00:03:03,100 --> 00:03:06,660
while that difference is still bigger than epsilon,

81
00:03:06,660 --> 00:03:10,920
I'm going to keep going by incrementing guess

82
00:03:10,920 --> 00:03:11,840
by increment.

83
00:03:11,840 --> 00:03:14,660
There's that plus equal that I've used before.

84
00:03:14,660 --> 00:03:16,470
And changing number of guesses by one.

85
00:03:16,470 --> 00:03:18,880
Saying I've done another guess and keep going.

86
00:03:18,880 --> 00:03:22,250
I'm going to keep doing that until I get to something where

87
00:03:22,250 --> 00:03:25,570
the difference between guess cubed and cubed

88
00:03:25,570 --> 00:03:26,740
is small enough.

89
00:03:26,740 --> 00:03:28,440
And at that point, I'm going to stop.

90
00:03:28,440 --> 00:03:31,760
And I'm going to return both how many guesses did I run

91
00:03:31,760 --> 00:03:35,310
and some information about did I find the right answer.

92
00:03:35,310 --> 00:03:37,360
Let's see what happens if I run that.

93
00:03:37,360 --> 00:03:39,350
So there's a piece of code.

94
00:03:39,350 --> 00:03:43,350
Let me start with 27, which is the thing I had before.

95
00:03:43,350 --> 00:03:46,900
And if I load that and run it, it

96
00:03:46,900 --> 00:03:50,370
gives me, oh, not quite the answer I expected.

97
00:03:50,370 --> 00:03:58,000
It says 2.997000000001906 is close to the cube root of 27.

98
00:03:58,000 --> 00:03:59,389
And that's true.

99
00:03:59,389 --> 00:04:00,930
We're going to see us in a little bit

100
00:04:00,930 --> 00:04:02,830
why it doesn't just give me 3.

101
00:04:02,830 --> 00:04:04,770
It gives me this funny answer in there.

102
00:04:04,770 --> 00:04:06,270
But you're going to also see that it

103
00:04:06,270 --> 00:04:12,080
took almost 30,000 times through the loop before it got to that.

104
00:04:12,080 --> 00:04:13,100
Why?

105
00:04:13,100 --> 00:04:17,269
Because I started with a very simple answer, zero.

106
00:04:17,269 --> 00:04:18,370
That wasn't close enough.

107
00:04:18,370 --> 00:04:22,789
Then I went to 0.0001, then to 0.0002.

108
00:04:22,789 --> 00:04:25,080
And you can see I'm going to have to do a lot of things

109
00:04:25,080 --> 00:04:28,400
until I get to something that's going to give me a good guess.

110
00:04:28,400 --> 00:04:31,420
Now, I could pick another example.

111
00:04:31,420 --> 00:04:33,830
Let's make it 29, which I know is not a cubed root.

112
00:04:33,830 --> 00:04:36,820
Let's see what happens if I do that.

113
00:04:36,820 --> 00:04:39,920
It's not a perfect cube, but in this case it found it.

114
00:04:39,920 --> 00:04:41,314
That's actually nice.

115
00:04:41,314 --> 00:04:42,730
In the previous case, I could only

116
00:04:42,730 --> 00:04:45,480
find things that were cube root of integers.

117
00:04:45,480 --> 00:04:48,300
And now I've got something where the cube root isn't an integer,

118
00:04:48,300 --> 00:04:49,980
but I can still find it.

119
00:04:49,980 --> 00:04:53,430
This took almost 31,000 times through the loop.

120
00:04:53,430 --> 00:04:55,390
So I could say, you know what?

121
00:04:55,390 --> 00:04:57,180
I want to use something where I'm going

122
00:04:57,180 --> 00:04:59,420
to step a little more broadly.

123
00:04:59,420 --> 00:05:02,880
Let's step every thousandth of a step

124
00:05:02,880 --> 00:05:05,380
rather than every ten thousandth of a step.

125
00:05:05,380 --> 00:05:09,330
And now if I run it, OK, I get a little bit different guess.

126
00:05:09,330 --> 00:05:11,960
But it only took 3,000 trials through it.

127
00:05:11,960 --> 00:05:15,210
And if I change it to say the increment should

128
00:05:15,210 --> 00:05:18,680
be in hundreds, I can run that.

129
00:05:18,680 --> 00:05:22,600
And if I do that-- whoops, sorry.

130
00:05:22,600 --> 00:05:24,310
It decided it didn't like that.

131
00:05:24,310 --> 00:05:28,150
Let me think about why it didn't like that.

132
00:05:28,150 --> 00:05:32,370
Ah, what's happened here?

133
00:05:32,370 --> 00:05:34,230
It's off in an infinite loop.

134
00:05:34,230 --> 00:05:36,450
And the reason it's off in an infinite loop

135
00:05:36,450 --> 00:05:40,380
is because I'm checking only to see if I get to a place

136
00:05:40,380 --> 00:05:41,700
where it's close enough.

137
00:05:41,700 --> 00:05:44,012
I've actually gone right past the cube root,

138
00:05:44,012 --> 00:05:44,970
and it's still running.

139
00:05:44,970 --> 00:05:46,600
So I need to stop this.

140
00:05:46,600 --> 00:05:49,340
And I'm going to interrupt it to hold it back.

141
00:05:49,340 --> 00:05:51,740
That's something I need to fix.

142
00:05:51,740 --> 00:05:55,720
So if I go back to a little bit better increment

143
00:05:55,720 --> 00:06:01,030
here and rerun it, I get back to the thing I wanted to have.

144
00:06:01,030 --> 00:06:03,930
OK, how would I fix that?

145
00:06:03,930 --> 00:06:07,240
I need to make sure that the guess isn't too big.

146
00:06:07,240 --> 00:06:09,510
If you think, and I'm going to go back to where I was,

147
00:06:09,510 --> 00:06:13,650
with this test, it simply says when guess cube minus cube,

148
00:06:13,650 --> 00:06:16,100
as long as it's bigger than epsilon,

149
00:06:16,100 --> 00:06:18,120
I'm going to keep going through the loop.

150
00:06:18,120 --> 00:06:23,090
If my step is too big, I could try something just below cubed

151
00:06:23,090 --> 00:06:24,260
but not have it work.

152
00:06:24,260 --> 00:06:28,550
And then go past cube and keep going further and further on.

153
00:06:28,550 --> 00:06:30,880
That says I need to make a change here,

154
00:06:30,880 --> 00:06:33,910
so I want to make sure that my guess is still small enough.

155
00:06:33,910 --> 00:06:35,680
And if I make that small change, which

156
00:06:35,680 --> 00:06:41,830
I'm going to do over here, and guess less than

157
00:06:41,830 --> 00:06:46,660
or equal to cube, I should be in a little bit better shape.

158
00:06:46,660 --> 00:06:48,060
I can still run the same one.

159
00:06:48,060 --> 00:06:54,890
But now, if I change increment to tense, run that.

160
00:06:54,890 --> 00:06:57,400
Ah, it gave me a solution.

161
00:06:57,400 --> 00:06:58,320
Not a very good one.

162
00:06:58,320 --> 00:07:00,660
It basically says I didn't find a solution.

163
00:07:00,660 --> 00:07:03,460
But at least I didn't keep running forever.

164
00:07:03,460 --> 00:07:05,210
What was the point of doing this?

165
00:07:05,210 --> 00:07:06,780
It's not to try and trick you.

166
00:07:06,780 --> 00:07:09,710
It's to remind you that as you make changes to the code,

167
00:07:09,710 --> 00:07:11,750
you need to think about the consequences.

168
00:07:11,750 --> 00:07:14,520
And this was one where my test wasn't

169
00:07:14,520 --> 00:07:17,580
capturing all of the cases.

170
00:07:17,580 --> 00:07:20,450
So what can I say about this particular algorithm?

171
00:07:20,450 --> 00:07:22,370
Step could be any small number.

172
00:07:22,370 --> 00:07:24,920
If it's too small, it's going to take a long time.

173
00:07:24,920 --> 00:07:28,020
But as we just saw, if it's too large and I'm not careful,

174
00:07:28,020 --> 00:07:31,040
it could skip over the answer without getting close enough.

175
00:07:31,040 --> 00:07:34,160
At least in this case I stopped, rather than running forever.

176
00:07:34,160 --> 00:07:38,280
In general, it's going to take x divided by step number times

177
00:07:38,280 --> 00:07:40,744
through the code to find a solution.

178
00:07:40,744 --> 00:07:42,910
And so clearly, as I make steps smaller and smaller,

179
00:07:42,910 --> 00:07:44,820
it's going to increase the number of steps.

180
00:07:44,820 --> 00:07:46,710
And I'd like to find a more efficient way

181
00:07:46,710 --> 00:07:48,990
to solving this problem.

182
00:07:48,990 --> 00:07:49,631


