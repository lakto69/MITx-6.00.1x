0
00:00:00,000 --> 00:00:01,190
...

1
00:00:01,190 --> 00:00:03,565
Welcome to 600 part 1.

2
00:00:03,565 --> 00:00:05,190
We're delighted you're going to join us

3
00:00:05,190 --> 00:00:07,780
for the next several weeks as we explore

4
00:00:07,780 --> 00:00:10,560
interesting issues around computational thinking

5
00:00:10,560 --> 00:00:12,330
and programming.

6
00:00:12,330 --> 00:00:15,690
Now, what are we going to do in this course?

7
00:00:15,690 --> 00:00:17,184
What do we want you to take away?

8
00:00:17,184 --> 00:00:18,600
At the end of this course, what is

9
00:00:18,600 --> 00:00:21,530
it we'd like you to have in your armamentarium

10
00:00:21,530 --> 00:00:24,060
of great problem-solving tools?

11
00:00:24,060 --> 00:00:27,150
We're certainly going to teach you about programming.

12
00:00:27,150 --> 00:00:30,160
We'll teach it in a particular language called Python.

13
00:00:30,160 --> 00:00:31,570
But more importantly, we want you

14
00:00:31,570 --> 00:00:34,720
to start learning how to think computationally,

15
00:00:34,720 --> 00:00:37,380
to think algorithmically, to think like a computer

16
00:00:37,380 --> 00:00:38,790
scientist.

17
00:00:38,790 --> 00:00:40,370
And what does that mean?

18
00:00:40,370 --> 00:00:42,320
It means we'd like you to think about when

19
00:00:42,320 --> 00:00:45,750
given a new challenge how can I get the computer

20
00:00:45,750 --> 00:00:47,210
to solve this for me?

21
00:00:47,210 --> 00:00:49,580
How can I describe the stages I want

22
00:00:49,580 --> 00:00:52,300
to use to get this done in such a manner

23
00:00:52,300 --> 00:00:53,800
that I don't have to do it.

24
00:00:53,800 --> 00:00:56,000
I can get the computer to do it.

25
00:00:56,000 --> 00:00:57,990
That's the notion of computational thinking,

26
00:00:57,990 --> 00:00:59,820
of algorithmic thinking, and that's

27
00:00:59,820 --> 00:01:03,670
what we're going to try and teach you about in this course.

28
00:01:03,670 --> 00:01:07,320
Now, that means you really want the computer

29
00:01:07,320 --> 00:01:08,636
to do the work for you.

30
00:01:08,636 --> 00:01:10,260
It's going to be your servant, and that

31
00:01:10,260 --> 00:01:12,580
means you need to think about how do you get it to do

32
00:01:12,580 --> 00:01:15,830
the things you want it to do.

33
00:01:15,830 --> 00:01:18,750
To do that, we're going to cover a range of topics,

34
00:01:18,750 --> 00:01:21,769
and we'll see all of these over the next several weeks.

35
00:01:21,769 --> 00:01:23,810
We want the computer to compute something for us,

36
00:01:23,810 --> 00:01:25,530
infer some new knowledge for us.

37
00:01:25,530 --> 00:01:26,920
That means we have to think about

38
00:01:26,920 --> 00:01:28,684
how do we represent that knowledge,

39
00:01:28,684 --> 00:01:30,350
and we'll do that with particular things

40
00:01:30,350 --> 00:01:32,880
inside the machine called data structures.

41
00:01:32,880 --> 00:01:34,837
We want it to infer a new information

42
00:01:34,837 --> 00:01:36,420
or define information, and we're going

43
00:01:36,420 --> 00:01:39,130
to see there are standard tools for making that happen.

44
00:01:39,130 --> 00:01:41,030
Things called iteration and recursion.

45
00:01:41,030 --> 00:01:44,434
And we'll come back to those over the next several lectures.

46
00:01:44,434 --> 00:01:46,600
A big part of what we want to do inside the computer

47
00:01:46,600 --> 00:01:49,420
is to have it be able to deal with things in a manner

48
00:01:49,420 --> 00:01:51,840
that we can see and understand, and that's says

49
00:01:51,840 --> 00:01:55,900
we're going to use the notion of abstraction to capture elements

50
00:01:55,900 --> 00:01:59,310
and then treat them as if they were primitives and reuse them.

51
00:01:59,310 --> 00:02:02,290
And that leads naturally to the idea of modularization,

52
00:02:02,290 --> 00:02:05,180
creating modules, tokens, elements

53
00:02:05,180 --> 00:02:07,220
that we can stitch together to come up

54
00:02:07,220 --> 00:02:10,669
with solutions to problems in interesting ways.

55
00:02:10,669 --> 00:02:13,232
Once we started learning how to build algorithms to think

56
00:02:13,232 --> 00:02:14,690
algorithmically, we're going to see

57
00:02:14,690 --> 00:02:17,500
that there are standard classes of algorithms,

58
00:02:17,500 --> 00:02:19,700
and we're going to use those for common problems

59
00:02:19,700 --> 00:02:21,790
like searching and sorting and we're

60
00:02:21,790 --> 00:02:24,230
going to see as well that different algorithms have

61
00:02:24,230 --> 00:02:25,450
different costs.

62
00:02:25,450 --> 00:02:27,590
And we want to see how to use that to reason

63
00:02:27,590 --> 00:02:30,160
about the expense of doing something and better

64
00:02:30,160 --> 00:02:33,260
ways of finding a solution to different problems.

65
00:02:33,260 --> 00:02:34,520
So here's our roadmap.

66
00:02:34,520 --> 00:02:36,061
These are the things that we're going

67
00:02:36,061 --> 00:02:38,470
to deal with over the next several weeks as we talk about

68
00:02:38,470 --> 00:02:41,240
and get you engaged in computational thinking.

69
00:02:41,240 --> 00:02:43,860


70
00:02:43,860 --> 00:02:46,270
If we're going to get the computer to do this for us

71
00:02:46,270 --> 00:02:49,692
though, we could start by asking so what does it really do?

72
00:02:49,692 --> 00:02:52,020
Boy, that sounds like a dumb question, right?

73
00:02:52,020 --> 00:02:53,400
Of course, computers do all sorts

74
00:02:53,400 --> 00:02:54,720
of amazing and awesome things.

75
00:02:54,720 --> 00:02:57,690
They can play Go, they can find things in the World Wide Web,

76
00:02:57,690 --> 00:03:00,910
they can do all sorts of wonderful, marvelous things.

77
00:03:00,910 --> 00:03:05,490
But fundamentally, a computer really only does two things.

78
00:03:05,490 --> 00:03:07,390
It performs calculations.

79
00:03:07,390 --> 00:03:08,760
Well, duh.

80
00:03:08,760 --> 00:03:10,220
But in this case, the calculations

81
00:03:10,220 --> 00:03:12,750
are actually very simple things.

82
00:03:12,750 --> 00:03:14,690
Turns out they can do them amazingly fast.

83
00:03:14,690 --> 00:03:17,960
But all they really do, they perform calculations,

84
00:03:17,960 --> 00:03:20,382
and they remember things.

85
00:03:20,382 --> 00:03:22,340
Early computers didn't have much of this power.

86
00:03:22,340 --> 00:03:23,740
Modern computers have a lot.

87
00:03:23,740 --> 00:03:25,850
But those are really the basis of them--

88
00:03:25,850 --> 00:03:27,470
perform a lot of calculations really

89
00:03:27,470 --> 00:03:30,280
quickly and remember results.

90
00:03:30,280 --> 00:03:33,240
Now you could ask, how fast is it really in terms

91
00:03:33,240 --> 00:03:35,069
of performing calculations?

92
00:03:35,069 --> 00:03:36,610
The machine you're using can probably

93
00:03:36,610 --> 00:03:38,640
do about a billion calculations a second.

94
00:03:38,640 --> 00:03:41,610
And just to put that in context, if I had a lamp sitting

95
00:03:41,610 --> 00:03:43,630
on my desk here-- about a foot above--

96
00:03:43,630 --> 00:03:47,140
and I hit the switch, by the time light went from the bulb

97
00:03:47,140 --> 00:03:51,190
to the table, your computer's performed two operations.

98
00:03:51,190 --> 00:03:51,889
That's amazing.

99
00:03:51,889 --> 00:03:53,680
It's really fast, and it sounds like that's

100
00:03:53,680 --> 00:03:56,480
going to let a computer do almost anything.

101
00:03:56,480 --> 00:03:57,969
How about remembering things?

102
00:03:57,969 --> 00:03:59,510
Depends on the size of your computer.

103
00:03:59,510 --> 00:04:01,460
You probably have a few gigabytes of memory in there.

104
00:04:01,460 --> 00:04:03,200
A big computer or something on the cloud

105
00:04:03,200 --> 00:04:05,690
might actually have hundreds of gigabytes of storage.

106
00:04:05,690 --> 00:04:08,480
What does that say in terms of what it can hold?

107
00:04:08,480 --> 00:04:11,420
Well, if you took the standard novel

108
00:04:11,420 --> 00:04:14,290
and you put it inside a machine, a typical machine

109
00:04:14,290 --> 00:04:17,209
could hold about 1 and 1/2 million books

110
00:04:17,209 --> 00:04:18,676
of a standard size.

111
00:04:18,676 --> 00:04:21,050
So if you're going to start reading those great classics,

112
00:04:21,050 --> 00:04:22,210
now it's going to take you a while

113
00:04:22,210 --> 00:04:23,960
before you get through all the things that

114
00:04:23,960 --> 00:04:25,627
are stored on your machine.

115
00:04:25,627 --> 00:04:27,460
So sounds like computers are amazingly good,

116
00:04:27,460 --> 00:04:30,160
even though they only do simple calculations

117
00:04:30,160 --> 00:04:32,000
and they remember results.

118
00:04:32,000 --> 00:04:34,940
Hold that thought, because we're going to come back to it.

119
00:04:34,940 --> 00:04:37,260
Because we can also ask what kinds of calculations

120
00:04:37,260 --> 00:04:39,840
does the computer actually do?

121
00:04:39,840 --> 00:04:44,330
Every computer comes with a set of built-in operations.

122
00:04:44,330 --> 00:04:47,300
These are typically primitive arithmetic operations--

123
00:04:47,300 --> 00:04:50,860
multiplication, addition, division-- and simple logic

124
00:04:50,860 --> 00:04:53,460
operations, comparing true and false values in order

125
00:04:53,460 --> 00:04:55,630
to make decisions with that.

126
00:04:55,630 --> 00:04:58,840
If that's all we had, that's going to be a real pain.

127
00:04:58,840 --> 00:05:00,930
And so what we want to do through this course

128
00:05:00,930 --> 00:05:04,090
is figure out how to define new calculations,

129
00:05:04,090 --> 00:05:07,820
new operations, things we create and give to the computer

130
00:05:07,820 --> 00:05:10,540
so that it can abstract them, encapsulate them, and treat

131
00:05:10,540 --> 00:05:12,360
them as if they're primitives.

132
00:05:12,360 --> 00:05:13,980
But to start with, a computer simply

133
00:05:13,980 --> 00:05:15,870
performs a lot of those calculations.

134
00:05:15,870 --> 00:05:20,370
So simple primitive calculations very quickly.

135
00:05:20,370 --> 00:05:22,180
Is that enough?

136
00:05:22,180 --> 00:05:22,972
It might be.

137
00:05:22,972 --> 00:05:24,430
If that's the case, we really don't

138
00:05:24,430 --> 00:05:26,329
have to do a lot in terms of computation.

139
00:05:26,329 --> 00:05:28,620
And I want to give you a couple of examples to show you

140
00:05:28,620 --> 00:05:31,120
why even with the speed of modern computers,

141
00:05:31,120 --> 00:05:34,620
you need to be able to think carefully, cleverly,

142
00:05:34,620 --> 00:05:36,280
algorithmically.

143
00:05:36,280 --> 00:05:39,095
Here are two obvious examples of things you might like to do.

144
00:05:39,095 --> 00:05:40,720
You want to find a piece of information

145
00:05:40,720 --> 00:05:43,760
on the web, something you do every day with a search engine.

146
00:05:43,760 --> 00:05:46,080
You might want to play chess or have your computer play

147
00:05:46,080 --> 00:05:47,550
chess for you.

148
00:05:47,550 --> 00:05:49,870
Suppose you want to search the web.

149
00:05:49,870 --> 00:05:51,630
How much could you do if you just

150
00:05:51,630 --> 00:05:54,195
were using simple calculations?

151
00:05:54,195 --> 00:05:55,570
Well, here's a little computation

152
00:05:55,570 --> 00:05:58,360
I did before I came in to capture this lecture.

153
00:05:58,360 --> 00:06:00,470
There are about 45 billion pages right now

154
00:06:00,470 --> 00:06:02,120
on the World Wide Web.

155
00:06:02,120 --> 00:06:05,007
On average, there are about 100 words on a page.

156
00:06:05,007 --> 00:06:06,590
And for sake of argument, let's assume

157
00:06:06,590 --> 00:06:08,410
if we want to find a word on a page,

158
00:06:08,410 --> 00:06:10,290
it's going to take us about 10 operations

159
00:06:10,290 --> 00:06:14,050
to try and find out whether that word is on that page or not.

160
00:06:14,050 --> 00:06:17,690
We'll see later on how he got it down to about 10 operations.

161
00:06:17,690 --> 00:06:20,120
That says if I'm going to just brute force

162
00:06:20,120 --> 00:06:21,910
try and search everything on the web

163
00:06:21,910 --> 00:06:24,640
to see if I can find the thing I'm looking for, it's only

164
00:06:24,640 --> 00:06:28,440
going to take me about 5.2 days to find something.

165
00:06:28,440 --> 00:06:30,550
You probably don't want to wait that long.

166
00:06:30,550 --> 00:06:33,780
So even with a very fast machine using

167
00:06:33,780 --> 00:06:37,390
these simple calculations, it's not going to be enough.

168
00:06:37,390 --> 00:06:39,731
How about playing chess?

169
00:06:39,731 --> 00:06:41,230
An expert will tell you there about,

170
00:06:41,230 --> 00:06:44,120
on average, 35 moves for every setting on the chessboard

171
00:06:44,120 --> 00:06:45,730
until you get to the endgame.

172
00:06:45,730 --> 00:06:47,801
Suppose you want to look ahead six moves

173
00:06:47,801 --> 00:06:50,050
in order to try to decide what you want to do in order

174
00:06:50,050 --> 00:06:51,650
to beat your opponent.

175
00:06:51,650 --> 00:06:54,720
That says you've got about 1.8 billion boards

176
00:06:54,720 --> 00:06:56,089
that you need to check.

177
00:06:56,089 --> 00:06:57,880
And if it's going to take you, for example,

178
00:06:57,880 --> 00:07:00,600
100 operations for every choice, it's

179
00:07:00,600 --> 00:07:03,610
going to take you about 30 minutes to decide each move.

180
00:07:03,610 --> 00:07:05,340
Probably too slow.

181
00:07:05,340 --> 00:07:06,760
And this is simply a way of saying

182
00:07:06,760 --> 00:07:09,650
that even with fast computers, we need cleverness,

183
00:07:09,650 --> 00:07:12,830
we need algorithmic thinking to take those simple computations

184
00:07:12,830 --> 00:07:15,880
and turn them into something more powerful.

185
00:07:15,880 --> 00:07:18,625
And that's as good algorithm design is going to be crucial

186
00:07:18,625 --> 00:07:20,000
and it's one of the skills you're

187
00:07:20,000 --> 00:07:23,550
going to learn throughout this course.

188
00:07:23,550 --> 00:07:24,910
What about storage?

189
00:07:24,910 --> 00:07:26,650
For lots of storage in the machine.

190
00:07:26,650 --> 00:07:29,400
Why don't I just compute everything once, store it away,

191
00:07:29,400 --> 00:07:31,250
and then just look it up.

192
00:07:31,250 --> 00:07:32,810
So let's go back to chess.

193
00:07:32,810 --> 00:07:35,700
Imagine I just want to look at all the possible chess games

194
00:07:35,700 --> 00:07:37,952
and store them away so that when I'm in any move,

195
00:07:37,952 --> 00:07:39,660
I'll just know what I want to do in order

196
00:07:39,660 --> 00:07:42,810
to get to a winning position.

197
00:07:42,810 --> 00:07:44,740
Well, experts would suggest that there

198
00:07:44,740 --> 00:07:49,560
are something on the order of 10 to the 123 different

199
00:07:49,560 --> 00:07:51,690
possible chess games.

200
00:07:51,690 --> 00:07:53,610
That's a really big number.

201
00:07:53,610 --> 00:07:55,350
And in fact, there are only about 10

202
00:07:55,350 --> 00:07:58,980
to the 80th atoms in the observable universe.

203
00:07:58,980 --> 00:08:01,960
So there's no way that we can store all of that information

204
00:08:01,960 --> 00:08:02,890
away.

205
00:08:02,890 --> 00:08:05,090
And again, it comes back to saying we can't just

206
00:08:05,090 --> 00:08:07,190
use brute force or pre-compute.

207
00:08:07,190 --> 00:08:09,570
We need to be clever about how we come up with solutions.

208
00:08:09,570 --> 00:08:12,220


209
00:08:12,220 --> 00:08:13,987
Even with that, we're going to ask

210
00:08:13,987 --> 00:08:15,820
are there going to be limits to computation,

211
00:08:15,820 --> 00:08:18,000
even if we can build clever algorithms?

212
00:08:18,000 --> 00:08:20,650
And in fact, one can suggest that there are still

213
00:08:20,650 --> 00:08:23,950
some limitations to what a computer can do.

214
00:08:23,950 --> 00:08:26,150
Some problems are still, at least at the moment, too

215
00:08:26,150 --> 00:08:28,480
complex, even with clever algorithms

216
00:08:28,480 --> 00:08:30,601
to come up with solutions fast enough.

217
00:08:30,601 --> 00:08:32,809
I'd love to know what the weather's going to be right

218
00:08:32,809 --> 00:08:34,517
in my neighborhood every morning before I

219
00:08:34,517 --> 00:08:36,280
get in my car to come to work.

220
00:08:36,280 --> 00:08:39,010
I just don't have enough data and enough compute power

221
00:08:39,010 --> 00:08:41,690
to be able to model at that level of scale.

222
00:08:41,690 --> 00:08:44,020
Maybe eventually, but not yet.

223
00:08:44,020 --> 00:08:45,740
In some cases, the fact that some things

224
00:08:45,740 --> 00:08:48,680
are too hard to compute actually works in our favor.

225
00:08:48,680 --> 00:08:50,930
And encryption schemes are an example of that.

226
00:08:50,930 --> 00:08:52,780
Things that you want to store on a computer

227
00:08:52,780 --> 00:08:56,460
encoded so nobody can break them rely on encoding or encryption

228
00:08:56,460 --> 00:08:58,830
schemes that in turn, rely on the fact

229
00:08:58,830 --> 00:09:01,620
that some problems are simply too complex to be solved

230
00:09:01,620 --> 00:09:03,750
by a computer.

231
00:09:03,750 --> 00:09:06,860
And in some cases, even if the computers get faster,

232
00:09:06,860 --> 00:09:09,590
it's still not going to be possible to solve them.

233
00:09:09,590 --> 00:09:11,400
Some problems are just fundamentally

234
00:09:11,400 --> 00:09:13,500
impossible to compute.

235
00:09:13,500 --> 00:09:15,370
And the classic one from computer sciences

236
00:09:15,370 --> 00:09:17,540
called the Turing halting problem

237
00:09:17,540 --> 00:09:21,050
and it simply says if I want to write a piece of code,

238
00:09:21,050 --> 00:09:24,800
a program that could take as input any other program

239
00:09:24,800 --> 00:09:27,010
and tell me whether it will always work,

240
00:09:27,010 --> 00:09:29,510
whether it will always stop with an answer,

241
00:09:29,510 --> 00:09:33,080
it turns out you simply can't compute that in all cases.

242
00:09:33,080 --> 00:09:35,280
So there are going to be limits to computation.

243
00:09:35,280 --> 00:09:35,999
Not to worry.

244
00:09:35,999 --> 00:09:37,790
It's going to be a lot of things we can do,

245
00:09:37,790 --> 00:09:40,278
and that's what we're going to do throughout this course.

246
00:09:40,278 --> 00:09:40,778


