0 0
00:00:00,000 --> 00:00:00.500
...

1
00:00:00,500 --> 00:00:02.680
Tendo a capacidade de lidar com exceções,

2
00:00:02,680 --> 00:00:04.760
para criar nossas próprias exceções, basicamente

3
00:00:04,760 --> 00:00:08.090
controlar como queremos lidar com circunstâncias inesperadas,

4
00:00:08,090 --> 00:00:10.750
realmente melhora nossa capacidade de escrever um bom código.

5
00:00:10,750 --> 00:00:13.757
E faz parte desse tema da programação defensiva.

6
00:00:13,757 --> 00:00:16.090
Se você pensar bem, o que eu fiz nesses exemplos foi

7
00:00:16,090 --> 00:00:19.140
Pensei em coisas que poderiam ocorrer que talvez não

8
00:00:19,140 --> 00:00:21.640
seja o que eu normalmente espero e penso sobre o que

9
00:00:21,640 --> 00:00:23.110
Eu queria fazer nesse caso.

10
00:00:23,110 --> 00:00:24.760
Então, meu exemplo de olhar as notas

11
00:00:24,760 --> 00:00:26.810
estava dizendo, se não há notas,

12
00:00:26,810 --> 00:00:28.150
como eu quero lidar com isso?

13
00:00:28,150 --> 00:00:30.900
E planejar com antecedência, para que eu não apenas gere um erro,

14
00:00:30,900 --> 00:00:33.330
Na verdade, eu lido com essa circunstância.

15
00:00:33,330 --> 00:00:36.160
Podemos pegar essa ideia e usar mais uma ferramenta do Python

16
00:00:36,160 --> 00:00:38.740
pensar em como fazer programação defensiva

17
00:00:38,740 --> 00:00:42.710
para impedir que circunstâncias levem a resultados inesperados.

18
00:00:42,710 --> 00:00:46.350
E essa última ideia é algo chamado de asserção.

19
00:00:46,350 --> 00:00:48.040
Falamos anteriormente sobre dizer:

20
00:00:48,040 --> 00:00:50.180
quando escrevemos um bom código, incluímos coisas

21
00:00:50,180 --> 00:00:52.220
como uma docstring que diz, aqui está

22
00:00:52,220 --> 00:00:54.570
como eu assumo que as entradas serão.

23
00:00:54,570 --> 00:00:56.570
E aqui estão as garantias que colocarei na saída

24
00:00:56,570 --> 00:01:00.480
se você me der sugestões que satisfaçam essas condições.

25
00:01:00,480 --> 00:01:02.970
Mas nunca cumprimos esse contrato, se quiser.

26
00:01:02,970 --> 00:01:05.720
Simplesmente dissemos, documente o que você está tentando fazer.

27
00:01:05,720 --> 00:01:08.640
Podemos querer ter certeza de que as suposições sobre o estado

28.
00:01:08,640 --> 00:01:12.072
do cálculo realmente é o que esperávamos - não

29
00:01:12,072 --> 00:01:14.530
apenas para insumos, embora esse seja um local padrão para isso,

30
00:01:14,530 --> 00:01:16.050
mas talvez de maneira mais geral.

31
00:01:16,050 --> 00:01:19.010
E para isso, podemos usar uma declaração "assert"

32.
00:01:19,010 --> 00:01:21.800
para gerar um erro - uma exceção, chamada de asserção

33
00:01:21,800 --> 00:01:24.880
error-- se essas suposições não forem atendidas.

34
00:01:24,880 --> 00:01:26.640
Como eu disse, poderia estar nas entradas.

35
00:01:26,640 --> 00:01:29.987
Pode estar em um estado intermediário do programa

36.
00:01:29,987 --> 00:01:32.070
onde quero verificar se estou no lugar certo.

37.
00:01:32,070 --> 00:01:33.970
Eu posso fazer uma afirmação que diz, eu

38.
00:01:33,970 --> 00:01:37.260
afirmo que o seguinte deve ser verdadeiro e, se não for,

39.
00:01:37,260 --> 00:01:38.500
crie uma exceção.

40.
00:01:38,500 --> 00:01:42.170
Um bom exemplo de boa programação defensiva.

41.
00:01:42,170 --> 00:01:45.470
Aqui está um exemplo, se eu voltar à minha ideia de apenas tirar

42.
00:01:45,470 --> 00:01:47.150
média de notas.

43
00:01:47,150 --> 00:01:50.650
Eu poderia afirmar - usando a palavra-chave especial "assert"

44
00:01:50,650 --> 00:01:53.440
aqui-- quando eu entro a média,

45
00:01:53,440 --> 00:01:55.620
que eu espero que exista pelo menos

46.
00:01:55,620 --> 00:01:57.160
algumas notas nessa lista.

47
00:01:57,160 --> 00:02:02.610
E, portanto, posso afirmar que o tamanho de "grades" não será 0.

48.
00:02:02,610 --> 00:02:07.340
E o que isso diz é, se eu der uma contribuição para calcular a média

49.
00:02:07,340 --> 00:02:10.030
tem uma lista de um ou mais elementos,

50.
00:02:10.030 --> 00:02:12.800
esta afirmação não será verdadeira, porque não será 0.

51
00:02:12,800 --> 00:02:13.910
Será maior que isso.

52
00:02:13,910 --> 00:02:16.800
E nesse caso, vou pular a declaração "afirmar"

53
00:02:16,800 --> 00:02:17.770
e faça a coisa certa.

54
00:02:17,770 --> 00:02:19.840
Estou seguro para ir em frente e fazer a divisão.

55
00:02:19,840 --> 00:02:22.150
Por outro lado, se eu acidentalmente

56.
00:02:22,150 --> 00:02:28.010
dê uma lista vazia e, de fato, o tamanho de "grades"

57
00:02:28,010 --> 00:02:28.530
é 0.

58
00:02:28,530 --> 00:02:30.570
A declaração "not" é falsa.

59.
00:02:30,570 --> 00:02:34.960
E como isso é falso, afirme, então, interromperá a execução,

60
00:02:34,960 --> 00:02:38.050
lançar um erro de declaração-- lançar uma exceção de declaração

61
00:02:38,050 --> 00:02:40.180
com essa mensagem impressa.

62
00:02:40,180 --> 00:02:42.060
Por isso, gera um erro de afirmação quando

63.
00:02:42,060 --> 00:02:43.470
Eu recebo algo que não quero.

64
00:02:43,470 --> 00:02:45.330
Caso contrário eu não corre bem.

65
00:02:45,330 --> 00:02:46.940
E o que é legal nisso é que não é

66.
00:02:46,940 --> 00:02:49.920
vai parar a execução, desde que eu dê a ela coisas legais.

67
00:02:49,920 --> 00:02:53.510
E esta é uma maneira simples de reforçar a expectativa

68
00:02:53,510 --> 00:02:56.200
Eu tenho para esta função.

69
00:02:56,200 --> 00:02:59.630
É uma coisa boa de se ter, porque paro imediatamente

70
00:02:59,630 --> 00:03:00.810
se a afirmação não for atendida.

71
00:03:00,810 --> 00:03:03.020
Eu não espero até que eu esteja no meio do processamento

72
00:03:03,020 --> 00:03:08.340
antes de parar a execução desse procedimento específico.

73
00:03:08,340 --> 00:03:10.820
Então, asserções são realmente uma boa maneira

74
00:03:10,820 --> 00:03:13.540
de fazer programação defensiva.

75
00:03:13,540 --> 00:03:17.500
Eles não permitem que um programador ... eu vou

76
00:03:17,500 --> 00:03:20.116
comece novamente neste slide.

77
00:03:20,116 --> 00:03:21.740
Então, asserções são uma boa maneira de lidar

78
00:03:21,740 --> 00:03:23.790
com programação defensiva.

79
00:03:23,790 --> 00:03:25.680
Quais são as propriedades das asserções?

80
00:03:25,680 --> 00:03:28.210
Primeiro de tudo, asserções não permitem que um programador

81
00:03:28,210 --> 00:03:30.880
para controlar a resposta a condições inesperadas.

82
00:03:30,880 --> 00:03:34.620
Simplesmente garantirá que a execução seja interrompida sempre que

83
00:03:34,620 --> 00:03:37.370
uma condição inesperada não é atendida.

84
00:03:37,370 --> 00:03:39.816
Normalmente, usamos para verificar as entradas.

85
00:03:39,816 --> 00:03:41.190
É o local padrão para fazer isso.

86
00:03:41,190 --> 00:03:42.648
E você verá em boa programação,

87
00:03:42,648 --> 00:03:45.430
frequentemente, toda função ou função crítica

88
00:03:45,430 --> 00:03:47.960
terá uma afirmação no começo dizendo:

89
00:03:47,960 --> 00:03:50.400
aqui está o que eu espero em termos da forma da entrada

90
00:03:50,400 --> 00:03:52.050
antes de sair.

91
00:03:52,050 --> 00:03:53.810
Se eu quero ter muito cuidado, eu

92
00:03:53,810 --> 00:03:55.500
poderia realmente usá-lo para verificar saídas

93
00:03:55,500 --> 00:03:58.550
antes de retornar um valor da função para evitar

94
00:03:58,550 --> 00:04:00.460
propagando valores ruins.

95
00:04:00,460 --> 00:04:03.010
E se você pensar sobre aquela docstring,

96
00:04:03,010 --> 00:04:04.860
Eu tenho uma expectativa sobre as entradas.

97
00:04:04,860 --> 00:04:06.720
Eu tenho uma expectativa de resultados.

98
00:04:06,720 --> 00:04:09.550
Ter uma asserção sobre entradas e saídas

99
00:04:09,550 --> 00:04:12.700
é uma boa maneira de ser muito defensivo em termos

100
00:04:12,700 --> 00:04:14.680
de como eu programo as coisas.

101
00:04:14,680 --> 00:04:17.829
A outra coisa legal é que ter esses cheques

102
00:04:17,829 --> 00:04:20.649
facilita a localização da fonte de um bug,

103
00:04:20,649 --> 00:04:22.850
porque eu vou parar a execução assim que eu

104
00:04:22,850 --> 00:04:26.030
obtenha uma entrada que não atenda às especificações de um procedimento.

105
00:04:26,030 --> 00:04:28.770
E isso me diz instantaneamente que o bug

106
00:04:28,770 --> 00:04:32.154
deve ter ocorrido antes da chamada para essa função.

107
00:04:32,154 --> 00:04:34.820
E é um pouco como fazer a pesquisa que fiz no meu início

108
00:04:34,820 --> 00:04:38.450
exemplo, mas usando asserções para me ajudar a identificar os lugares para encontrar

109
00:04:38,450 --> 00:04:40.580
os erros em vez de ter que entrar e colocar

110
00:04:40,580 --> 00:04:44.650
impressões explícitas em todo o procedimento.

111
00:04:44,650 --> 00:04:46.660
Então, onde você deve usar afirmações?

112
00:04:46,660 --> 00:04:48.820
Bem, estes são alguns bons exemplos disso.

113
00:04:48,820 --> 00:04:51.910
Nosso objetivo é detectar bugs assim que eles forem introduzidos

114
00:04:51,910 --> 00:04:53.850
e deixar claro onde eles aconteceram.

115
00:04:53,850 --> 00:04:57.320
Para que eu possa usar afirmações como um complemento para meus testes,

116
00:04:57,320 --> 00:05:01.550
aumentá-los sempre que um usuário fornece esses dados de entrada.

117
00:05:01,550 --> 00:05:03.480
E bons lugares para usar afirmações

118
00:05:03,480 --> 00:05:06.240
são verificar tipos de argumentos, verificar

119
00:05:06,240 --> 00:05:08.050
essa invariância em uma estrutura de dados

120
00:05:08,050 --> 00:05:10.860
atendidos - esta é uma lista de mais de um elemento,

121
00:05:10,860 --> 00:05:14.490
por exemplo-- para verificar restrições nos valores que estão sendo

122
00:05:14,490 --> 00:05:17.050
retornado e procurar violações

123
00:05:17,050 --> 00:05:18.630
de restrições em um procedimento.

124
00:05:18,630 --> 00:05:21.820
Por exemplo, eu digo que espero que uma lista não tenha duplicatas.

125
00:05:21,820 --> 00:05:24.430
Bem, eu poderia impor isso fazendo um cheque

126
00:05:24,430 --> 00:05:26.630
e levantando-- ou usando uma afirmação, em vez disso,

127
00:05:26,630 --> 00:05:30.560
para interromper a execução se eu chegar a esse tipo de ponto.

128
00:05:30,560 --> 00:05:33.240
Então, usando exceto para controlar o fluxo

129
00:05:33,240 --> 00:05:36.010
de processamento através de um procedimento,

130
00:05:36,010 --> 00:05:38.830
usando asserções para verificar as condições nas entradas,

131
00:05:38,830 --> 00:05:40.650
saídas e potencialmente intermediárias

132
00:05:40,650 --> 00:05:43.000
values-- duas ferramentas valiosas para ter

133
00:05:43,000 --> 00:05:46.100
enquanto você pensa em como escrever código livre de erros

134
00:05:46,100 --> 00:05:48.760
e faz programação defensiva para tentar garantir

135
00:05:48,760 --> 00:05:50.560
que é livre de erros.