0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:01,447
OK.

2
00:00:01,447 --> 00:00:03,780
We want to start thinking about how do we get a computer

3
00:00:03,780 --> 00:00:05,359
to do things for us?

4
00:00:05,359 --> 00:00:06,900
So we can start by saying, well, what

5
00:00:06,900 --> 00:00:08,066
do we want a computer to do?

6
00:00:08,066 --> 00:00:10,120
We want it to compute something.

7
00:00:10,120 --> 00:00:12,900
That sounds like a deep, philosophical question,

8
00:00:12,900 --> 00:00:13,790
and in fact, it is.

9
00:00:13,790 --> 00:00:16,370
And that leads to an even deeper philosophical question which

10
00:00:16,370 --> 00:00:18,990
is if we want a computer to compute something,

11
00:00:18,990 --> 00:00:21,450
we can ask, well, what's the knowledge that it's going

12
00:00:21,450 --> 00:00:24,000
to use to do that computation?

13
00:00:24,000 --> 00:00:26,780
And that actually leads to an interesting distinction,

14
00:00:26,780 --> 00:00:29,810
because we can divide knowledge into two types.

15
00:00:29,810 --> 00:00:32,119
What we're going to call declarative knowledge

16
00:00:32,119 --> 00:00:35,270
and what we're going to call imperative knowledge.

17
00:00:35,270 --> 00:00:37,520
Declarative knowledge-- those are statements

18
00:00:37,520 --> 00:00:40,780
of fact, statements of truth.

19
00:00:40,780 --> 00:00:43,314
For example, if I were lecturing here at MIT,

20
00:00:43,314 --> 00:00:44,730
I might have gone in ahead of time

21
00:00:44,730 --> 00:00:46,420
and strapped some-- or taped some candy

22
00:00:46,420 --> 00:00:49,600
under one of the chairs inside the lecture hall.

23
00:00:49,600 --> 00:00:51,320
An imperative piece of information

24
00:00:51,320 --> 00:00:55,700
simply says, there's candy taped to the underside of a chair.

25
00:00:55,700 --> 00:00:58,032
It doesn't tell you anything about how to find it.

26
00:00:58,032 --> 00:00:59,740
It doesn't tell you where to look for it.

27
00:00:59,740 --> 00:01:01,323
You'd either have to do it in parallel

28
00:01:01,323 --> 00:01:04,190
by having every student reach under the chair

29
00:01:04,190 --> 00:01:05,650
or search the entire lecture hall.

30
00:01:05,650 --> 00:01:08,350
It's simply a statement of fact.

31
00:01:08,350 --> 00:01:11,130
Imperative knowledge is a recipe.

32
00:01:11,130 --> 00:01:14,370
It's how to knowledge or how to information,

33
00:01:14,370 --> 00:01:19,537
and this gives us a sequence of steps to find a solution.

34
00:01:19,537 --> 00:01:22,120
Again, if I stuck candy under a chair inside the lecture hall,

35
00:01:22,120 --> 00:01:25,410
I might say to the lecturer, do the following-- face

36
00:01:25,410 --> 00:01:27,750
the students at the front of the room.

37
00:01:27,750 --> 00:01:30,300
Count up one, two, three rows.

38
00:01:30,300 --> 00:01:33,830
Start in the middle section left side, go in one chair.

39
00:01:33,830 --> 00:01:34,920
Look underneath it.

40
00:01:34,920 --> 00:01:36,430
Candy is there.

41
00:01:36,430 --> 00:01:37,570
It's a recipe.

42
00:01:37,570 --> 00:01:40,970
It's a sequence of how to steps, very mechanical,

43
00:01:40,970 --> 00:01:43,090
to get things done.

44
00:01:43,090 --> 00:01:45,350
Those two kinds of knowledge are important,

45
00:01:45,350 --> 00:01:47,990
but only the second one's going to really be of value to us,

46
00:01:47,990 --> 00:01:50,760
because that's what's going to help us get the computer

47
00:01:50,760 --> 00:01:52,930
to do something for us.

48
00:01:52,930 --> 00:01:56,170
To see it, let's look at a simple example.

49
00:01:56,170 --> 00:01:58,732
Suppose I want to compute the square root of some number.

50
00:01:58,732 --> 00:02:00,190
To make it easy, I'm going to start

51
00:02:00,190 --> 00:02:02,400
with just an integer number.

52
00:02:02,400 --> 00:02:05,290
Here's a statement of fact-- the square root

53
00:02:05,290 --> 00:02:10,134
of the number x is that y such that y squared is equal to x.

54
00:02:10,134 --> 00:02:12,050
And I'm just going to highlight it right here.

55
00:02:12,050 --> 00:02:12,690
There it is.

56
00:02:12,690 --> 00:02:15,750
There's a statement of fact.

57
00:02:15,750 --> 00:02:18,150
Does it tell me how to find a square root?

58
00:02:18,150 --> 00:02:19,730
No.

59
00:02:19,730 --> 00:02:23,660
If somebody gives me a good guess, I can use this to check.

60
00:02:23,660 --> 00:02:26,800
So if I'm trying to find the square root of, say, 16,

61
00:02:26,800 --> 00:02:29,090
and somebody gives me a guess of 4,

62
00:02:29,090 --> 00:02:32,470
I'm lucky because I can say 4 times 4 is 16 and I'm done.

63
00:02:32,470 --> 00:02:34,900
But it doesn't help me find something.

64
00:02:34,900 --> 00:02:38,630
Here's a version of imperative knowledge,

65
00:02:38,630 --> 00:02:40,640
and this is actually a very old algorithm.

66
00:02:40,640 --> 00:02:45,470
It's attributed to Alexandria of Heron, dating back

67
00:02:45,470 --> 00:02:48,800
into the 2nd century BC, although other people suggested

68
00:02:48,800 --> 00:02:50,820
it existed earlier than that.

69
00:02:50,820 --> 00:02:55,280
But here's a recipe for finding square root.

70
00:02:55,280 --> 00:02:59,390
I'm going to start with a guess, and I'm going to call it g.

71
00:02:59,390 --> 00:03:02,624
If g times g-- if g squared-- whoops.

72
00:03:02,624 --> 00:03:03,790
Sorry, I'm going to go back.

73
00:03:03,790 --> 00:03:07,380
If g squared is close enough to x, then

74
00:03:07,380 --> 00:03:11,080
I'm going to stop and say g is the answer.

75
00:03:11,080 --> 00:03:12,900
Otherwise, I'm going to create a new guess

76
00:03:12,900 --> 00:03:20,060
by taking g and x divided by g, and averaging them together.

77
00:03:20,060 --> 00:03:22,690
Take the average.

78
00:03:22,690 --> 00:03:24,080
OK.

79
00:03:24,080 --> 00:03:26,120
Once I've done that, I'm going to repeat.

80
00:03:26,120 --> 00:03:31,210
I'm going to go back up and do the same thing again.

81
00:03:31,210 --> 00:03:33,800
And that's going to give me a little algorithm, because it's

82
00:03:33,800 --> 00:03:37,510
going to let me now say, start with a guess,

83
00:03:37,510 --> 00:03:40,180
check to see if the guess is close enough, and if not,

84
00:03:40,180 --> 00:03:41,340
keep going.

85
00:03:41,340 --> 00:03:43,940
And you can see that little graph at the bottom.

86
00:03:43,940 --> 00:03:46,030
I start with not a very good guess.

87
00:03:46,030 --> 00:03:47,690
g is equal to 3.

88
00:03:47,690 --> 00:03:48,480
I square it.

89
00:03:48,480 --> 00:03:49,770
That's 9.

90
00:03:49,770 --> 00:03:53,800
9 is not, as you can see here, very close to 16,

91
00:03:53,800 --> 00:03:58,240
so I'm going to take x divided by g, which is right there.

92
00:03:58,240 --> 00:04:01,600
And I'm going to take g, and I'm going

93
00:04:01,600 --> 00:04:06,900
to average them together to get a better guess right there.

94
00:04:06,900 --> 00:04:10,196
With that better guess, I'm now going to do the same thing.

95
00:04:10,196 --> 00:04:11,820
I'm going to go back through that loop,

96
00:04:11,820 --> 00:04:15,380
go back up to step number one, and say try it again.

97
00:04:15,380 --> 00:04:16,779
And you can see the steps here.

98
00:04:16,779 --> 00:04:19,089
I square 4.1667.

99
00:04:19,089 --> 00:04:20,579
I get 17 and change.

100
00:04:20,579 --> 00:04:22,110
It's really not close enough.

101
00:04:22,110 --> 00:04:24,166
I take x divided by g.

102
00:04:24,166 --> 00:04:26,840
I take the average of x and x divided by g

103
00:04:26,840 --> 00:04:29,239
and I get a much better guess.

104
00:04:29,239 --> 00:04:30,780
And you can see after the next round,

105
00:04:30,780 --> 00:04:32,210
I get a guess that's close enough.

106
00:04:32,210 --> 00:04:34,780
I'm probably ready to stop.

107
00:04:34,780 --> 00:04:38,230
So this is a nice example of a little algorithm.

108
00:04:38,230 --> 00:04:39,700
It's a little recipe.

109
00:04:39,700 --> 00:04:42,280
And let's capture those pieces together.

110
00:04:42,280 --> 00:04:43,770
What's a recipe?

111
00:04:43,770 --> 00:04:45,330
Three pieces.

112
00:04:45,330 --> 00:04:48,230
It's a sequence of simple steps.

113
00:04:48,230 --> 00:04:51,360
It's a flow of control, a process that's going to tell us

114
00:04:51,360 --> 00:04:54,300
what order in which to execute the steps,

115
00:04:54,300 --> 00:04:57,000
and it's going to give us a way of deciding when to stop.

116
00:04:57,000 --> 00:05:00,114
So those three pieces-- simple steps.

117
00:05:00,114 --> 00:05:01,530
A sequence of things I want to do,

118
00:05:01,530 --> 00:05:04,740
a checklist, a flow of control, a thing

119
00:05:04,740 --> 00:05:07,080
that tells me when to go to the next step,

120
00:05:07,080 --> 00:05:10,170
when to jump to some other place in that sequence of steps,

121
00:05:10,170 --> 00:05:12,470
and a way of deciding when to stop.

122
00:05:12,470 --> 00:05:15,040
Those three pieces constitute an algorithm.

123
00:05:15,040 --> 00:05:17,650
And you just saw it in the little square root example.

124
00:05:17,650 --> 00:05:20,950
In general, the flow of control was going successively

125
00:05:20,950 --> 00:05:23,580
through the steps until I got to a test,

126
00:05:23,580 --> 00:05:26,290
and that test had me jump back to another place

127
00:05:26,290 --> 00:05:28,070
inside the algorithm.

128
00:05:28,070 --> 00:05:29,980
That's what an algorithm is.

129
00:05:29,980 --> 00:05:33,408
That's what a recipe is, and that's what we want to capture.

130
00:05:33,408 --> 00:05:33,908


