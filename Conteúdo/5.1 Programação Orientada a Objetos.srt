0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:04,044
When we introduced definitions into our language,

2
00:00:04,044 --> 00:00:05,460
in essence, what we were doing was

3
00:00:05,460 --> 00:00:07,500
giving you, as the programmer, the ability

4
00:00:07,500 --> 00:00:11,340
to create procedures that you could then abstract and treat

5
00:00:11,340 --> 00:00:14,610
as if they were provided by the manufacturer of the computer.

6
00:00:14,610 --> 00:00:16,840
The same way that you have addition and subtraction,

7
00:00:16,840 --> 00:00:19,530
you could create new variations of procedures

8
00:00:19,530 --> 00:00:22,630
and treat them as if they were behaving exactly the same way

9
00:00:22,630 --> 00:00:25,900
that those primitive procedures did.

10
00:00:25,900 --> 00:00:28,410
We want to do the same thing with data.

11
00:00:28,410 --> 00:00:31,410
We're going to talk now about creating objects, classes

12
00:00:31,410 --> 00:00:34,050
of objects, that you can define as a user,

13
00:00:34,050 --> 00:00:37,830
and that switch is going to add a tremendous amount of power,

14
00:00:37,830 --> 00:00:40,760
flexibility, capability to our language

15
00:00:40,760 --> 00:00:43,370
and to our ability to create new systems.

16
00:00:43,370 --> 00:00:45,810
So let's see what that means.

17
00:00:45,810 --> 00:00:49,770
Let's start by talking about the objects you already know about.

18
00:00:49,770 --> 00:00:51,450
As you know, Python supports a number

19
00:00:51,450 --> 00:00:53,100
of different kinds of data.

20
00:00:53,100 --> 00:00:54,440
We've got integers.

21
00:00:54,440 --> 00:00:55,860
We've got floating point numbers.

22
00:00:55,860 --> 00:00:57,400
We've got strings.

23
00:00:57,400 --> 00:00:58,220
We've got lists.

24
00:00:58,220 --> 00:00:59,560
We've got dictionaries.

25
00:00:59,560 --> 00:01:01,720
A few others like tuples, but basically, we

26
00:01:01,720 --> 00:01:05,440
have a primitive set of data objects.

27
00:01:05,440 --> 00:01:08,160
Each one of those examples that I have on my screen

28
00:01:08,160 --> 00:01:13,000
is an instance of an object, and every object has three pieces.

29
00:01:13,000 --> 00:01:16,770
It has a type, int, float, dictionary.

30
00:01:16,770 --> 00:01:18,810
It has an internal representation.

31
00:01:18,810 --> 00:01:21,930
It's a way of gluing together the pieces that

32
00:01:21,930 --> 00:01:23,350
compose the object.

33
00:01:23,350 --> 00:01:24,816
For primitive things like numbers,

34
00:01:24,816 --> 00:01:27,190
it really doesn't make sense to talk about it as anything

35
00:01:27,190 --> 00:01:30,090
other than a scalar, but for a list,

36
00:01:30,090 --> 00:01:32,470
it would say, how do I get the different pieces--

37
00:01:32,470 --> 00:01:35,060
elements, if you like-- of a list and glue them together?

38
00:01:35,060 --> 00:01:36,810
So every object has a type.

39
00:01:36,810 --> 00:01:39,060
It has an internal data representation.

40
00:01:39,060 --> 00:01:41,040
And associated with it, it has a set

41
00:01:41,040 --> 00:01:43,030
of procedures that allow you to interact

42
00:01:43,030 --> 00:01:45,389
with an instance of that object.

43
00:01:45,389 --> 00:01:47,430
We're going to look at some examples in a second.

44
00:01:47,430 --> 00:01:50,710
But those three pieces are key to defining an object.

45
00:01:50,710 --> 00:01:53,120
And, indeed, every instance that we create

46
00:01:53,120 --> 00:01:55,340
is a particular type of object.

47
00:01:55,340 --> 00:01:58,510
One, two, three, four is an instance of an int.

48
00:01:58,510 --> 00:02:01,895
If I define A to be, quote, "hello," end quote,

49
00:02:01,895 --> 00:02:04,850
A is now an instance of a string.

50
00:02:04,850 --> 00:02:07,260
So we talk about objects as having

51
00:02:07,260 --> 00:02:09,110
Types because that brings with them

52
00:02:09,110 --> 00:02:12,420
the ability to manipulate them.

53
00:02:12,420 --> 00:02:13,920
OK.

54
00:02:13,920 --> 00:02:16,575
If everything in Python is an object and has a type,

55
00:02:16,575 --> 00:02:17,950
what does it tell us about how we

56
00:02:17,950 --> 00:02:20,040
might think about using them?

57
00:02:20,040 --> 00:02:22,820
And the first one is, we want to think about each object

58
00:02:22,820 --> 00:02:25,000
as being a data abstraction.

59
00:02:25,000 --> 00:02:28,320
It captures an internal representation of the data

60
00:02:28,320 --> 00:02:29,130
attributes.

61
00:02:29,130 --> 00:02:30,850
We'll say what those are in a second.

62
00:02:30,850 --> 00:02:34,050
And it defines an interface for interacting with the object

63
00:02:34,050 --> 00:02:35,140
through methods.

64
00:02:35,140 --> 00:02:36,970
Think of them as procedures.

65
00:02:36,970 --> 00:02:39,640
And those methods define a behavior

66
00:02:39,640 --> 00:02:41,636
but hide the implementation.

67
00:02:41,636 --> 00:02:43,510
Again, in a second, we'll look at an example,

68
00:02:43,510 --> 00:02:47,330
but every data abstraction is an internal representation

69
00:02:47,330 --> 00:02:50,330
and an interface for getting to that internal representation,

70
00:02:50,330 --> 00:02:54,550
doing something with it, and then returning an answer.

71
00:02:54,550 --> 00:02:56,710
Associated with every object we have the ability

72
00:02:56,710 --> 00:02:59,780
to create new instances of that type of object,

73
00:02:59,780 --> 00:03:02,580
and we have the ability to get rid of it, to destroy objects,

74
00:03:02,580 --> 00:03:05,150
either explicitly using Del, which we know

75
00:03:05,150 --> 00:03:08,030
is a universal way of removing something from our environment,

76
00:03:08,030 --> 00:03:10,330
or just forgetting about them and letting the system

77
00:03:10,330 --> 00:03:12,440
eventually garbage collect or reclaim

78
00:03:12,440 --> 00:03:15,000
inaccessible or destroyed objects.

79
00:03:15,000 --> 00:03:16,780
But that idea of an object having

80
00:03:16,780 --> 00:03:19,537
a type, an internal representation, an interface

81
00:03:19,537 --> 00:03:21,620
is going to be really important as we think about,

82
00:03:21,620 --> 00:03:24,390
how do we want to create our own objects?

83
00:03:24,390 --> 00:03:26,970
We want to talk, then, about data objects and that idea

84
00:03:26,970 --> 00:03:31,320
of internal representations and ways to manipulate them.

85
00:03:31,320 --> 00:03:33,582
We have some built in data objects-- lists, tuples,

86
00:03:33,582 --> 00:03:35,290
strings-- and we're going to see examples

87
00:03:35,290 --> 00:03:37,560
of how they have both an internal representation

88
00:03:37,560 --> 00:03:39,156
and associated procedures.

89
00:03:39,156 --> 00:03:40,530
And we're going to take that idea

90
00:03:40,530 --> 00:03:44,330
and generalize it to look at the ability to create our own data

91
00:03:44,330 --> 00:03:45,590
object types.

92
00:03:45,590 --> 00:03:47,870
And that wraps back to what I said when I began.

93
00:03:47,870 --> 00:03:51,560
Once we can do that, we want to then treat those data object

94
00:03:51,560 --> 00:03:53,860
types as if they were provided to us

95
00:03:53,860 --> 00:03:56,960
and treat them the same way we would treat any built in data

96
00:03:56,960 --> 00:03:59,120
type.

97
00:03:59,120 --> 00:04:02,770
Let's look at an example to make this a little more concrete.

98
00:04:02,770 --> 00:04:05,540
This is an object of type list.

99
00:04:05,540 --> 00:04:07,836
It's an instance of a list.

100
00:04:07,836 --> 00:04:09,210
One of the questions we could ask

101
00:04:09,210 --> 00:04:11,880
is, how is it represented internally?

102
00:04:11,880 --> 00:04:12,790
Do you know?

103
00:04:12,790 --> 00:04:14,922
You shouldn't, because we haven't talked about it.

104
00:04:14,922 --> 00:04:16,630
And you shouldn't have to worry about it.

105
00:04:16,630 --> 00:04:19,890
You just want to use that data object through a defined set

106
00:04:19,890 --> 00:04:21,209
of procedures.

107
00:04:21,209 --> 00:04:23,120
It's possible inside your machine

108
00:04:23,120 --> 00:04:25,770
that a list is represented by allocating a sequence

109
00:04:25,770 --> 00:04:28,584
of consecutive slots in memory.

110
00:04:28,584 --> 00:04:30,250
The list would point to the first slot--

111
00:04:30,250 --> 00:04:31,887
that would be the first index.

112
00:04:31,887 --> 00:04:33,470
Incrementally, the next slot of memory

113
00:04:33,470 --> 00:04:35,214
could be the second index.

114
00:04:35,214 --> 00:04:37,380
Turns out that's not a great way to represent lists,

115
00:04:37,380 --> 00:04:40,230
because it's limited in the ability to change them,

116
00:04:40,230 --> 00:04:42,980
to mutate them, or to have arbitrary sized elements

117
00:04:42,980 --> 00:04:44,327
inside of them.

118
00:04:44,327 --> 00:04:46,410
So, in fact, a more common way to represent a list

119
00:04:46,410 --> 00:04:48,890
is using something called a linked list,

120
00:04:48,890 --> 00:04:52,810
where the list points to a cell in memory--

121
00:04:52,810 --> 00:04:54,980
actually, to a pair of cells in memory--

122
00:04:54,980 --> 00:04:57,990
the first one of which contains either the object or perhaps

123
00:04:57,990 --> 00:05:00,570
even a pointer to an object elsewhere,

124
00:05:00,570 --> 00:05:05,050
and the second which points to or links to the next location

125
00:05:05,050 --> 00:05:06,060
in the list.

126
00:05:06,060 --> 00:05:07,860
It might be the next spot in memory.

127
00:05:07,860 --> 00:05:09,790
It might be somewhere else in the memory.

128
00:05:09,790 --> 00:05:11,530
And when I want to index into a list,

129
00:05:11,530 --> 00:05:14,930
I'm literally walking down the list and finding the right spot

130
00:05:14,930 --> 00:05:17,490
and retrieving the element from it.

131
00:05:17,490 --> 00:05:20,630
That's a nice way to think about building lists.

132
00:05:20,630 --> 00:05:21,960
Is that the way you do it?

133
00:05:21,960 --> 00:05:24,640
Doesn't matter, because what you use with the lists

134
00:05:24,640 --> 00:05:27,720
is a way, a set of procedures, a set of methods,

135
00:05:27,720 --> 00:05:30,260
to actually manipulate the elements of the list.

136
00:05:30,260 --> 00:05:31,840
And you've seen lots of these.

137
00:05:31,840 --> 00:05:33,590
I can get out a specific element.

138
00:05:33,590 --> 00:05:35,440
I can slice into it.

139
00:05:35,440 --> 00:05:38,330
I can do it with a specific set of jumps.

140
00:05:38,330 --> 00:05:42,410
I can have procedures that actually compute things off

141
00:05:42,410 --> 00:05:44,750
of a list or get rid of an element of a list.

142
00:05:44,750 --> 00:05:47,772
I have associated with lists a set of methods,

143
00:05:47,772 --> 00:05:50,230
and there's that dot notation that we talked about earlier,

144
00:05:50,230 --> 00:05:53,170
and we're going to talk a lot more about in a few minutes.

145
00:05:53,170 --> 00:05:55,830
The key point here is I've got a set of ways

146
00:05:55,830 --> 00:05:59,610
in which I standardly interact with and manipulate lists.

147
00:05:59,610 --> 00:06:02,990
And from your perspective, you think about this.

148
00:06:02,990 --> 00:06:06,390
You don't worry about what the internal representation is,

149
00:06:06,390 --> 00:06:10,510
because those procedures take care of that for you.

150
00:06:10,510 --> 00:06:13,140
As a consequence, that internal representation

151
00:06:13,140 --> 00:06:14,850
really should be private, meaning you

152
00:06:14,850 --> 00:06:17,074
don't know what's inside of it.

153
00:06:17,074 --> 00:06:18,490
And the correct behavior, in fact,

154
00:06:18,490 --> 00:06:20,870
could be compromised if you try and manipulate

155
00:06:20,870 --> 00:06:23,110
the internal representation directly.

156
00:06:23,110 --> 00:06:26,070
Ideally, you should always use the defined interfaces

157
00:06:26,070 --> 00:06:28,360
to get at portions of or elements

158
00:06:28,360 --> 00:06:31,380
of a list or any other data object that you've created.

159
00:06:31,380 --> 00:06:33,964


160
00:06:33,964 --> 00:06:35,380
We're going to take that idea now,

161
00:06:35,380 --> 00:06:36,190
and we're going to talk about, how

162
00:06:36,190 --> 00:06:38,106
do you create your own objects, and how do you

163
00:06:38,106 --> 00:06:39,340
use your own objects?

164
00:06:39,340 --> 00:06:40,756
And we've already seen we're going

165
00:06:40,756 --> 00:06:42,280
to need an internal representation,

166
00:06:42,280 --> 00:06:44,010
and we're going to need methods to enable

167
00:06:44,010 --> 00:06:45,980
us to talk about how we want to manipulate

168
00:06:45,980 --> 00:06:47,940
that internal representation.

169
00:06:47,940 --> 00:06:49,440
To do this, though, we're also going

170
00:06:49,440 --> 00:06:51,280
to make one more distinction, and that's

171
00:06:51,280 --> 00:06:56,010
between creating a class and using an instance of a class.

172
00:06:56,010 --> 00:06:59,300
To wrap it back to earlier terms, the idea of a list

173
00:06:59,300 --> 00:07:00,559
is a class.

174
00:07:00,559 --> 00:07:02,850
But the example I had of the list one, two, three, four

175
00:07:02,850 --> 00:07:05,170
is a particular instance of a class.

176
00:07:05,170 --> 00:07:07,200
And as you know, I could have many instances.

177
00:07:07,200 --> 00:07:08,815
I can use them in different ways.

178
00:07:08,815 --> 00:07:10,440
When we want to create our own objects,

179
00:07:10,440 --> 00:07:11,830
we need to do the same thing.

180
00:07:11,830 --> 00:07:13,100
How do we create a class?

181
00:07:13,100 --> 00:07:16,080
How do we make an instance of a class?

182
00:07:16,080 --> 00:07:18,680
Creating the class is going to involve

183
00:07:18,680 --> 00:07:21,580
defining the name of the class so I can reference it.

184
00:07:21,580 --> 00:07:24,332
It's going to involve defining the class attributes.

185
00:07:24,332 --> 00:07:25,915
I'm going to come to that in a second.

186
00:07:25,915 --> 00:07:28,420
And an example of this is, in the list case,

187
00:07:28,420 --> 00:07:31,280
somebody wrote code to implement the list class,

188
00:07:31,280 --> 00:07:33,900
giving it the name list and defining the attributes

189
00:07:33,900 --> 00:07:37,670
associated with a list class.

190
00:07:37,670 --> 00:07:39,330
When I want to use the class, that

191
00:07:39,330 --> 00:07:42,900
involves creating new instances of that object, different kinds

192
00:07:42,900 --> 00:07:46,720
of lists, and then doing operations on those instances.

193
00:07:46,720 --> 00:07:49,290
So, for example, if I have the simple list L equals

194
00:07:49,290 --> 00:07:52,270
the list of one, two, then there is an operation on it,

195
00:07:52,270 --> 00:07:54,720
and that's operating on that particular instance,

196
00:07:54,720 --> 00:07:56,694
not on the whole class.

197
00:07:56,694 --> 00:07:58,610
I'm going to take those same ideas now and try

198
00:07:58,610 --> 00:08:00,070
to make them more concrete in terms

199
00:08:00,070 --> 00:08:02,840
of, how do we define a class, and how do we actually

200
00:08:02,840 --> 00:08:05,100
use instances of the class?

201
00:08:05,100 --> 00:08:08,070
But before I do it, let's talk about why.

202
00:08:08,070 --> 00:08:11,260
What I'm trying to do is now bundle together data

203
00:08:11,260 --> 00:08:12,920
into packages.

204
00:08:12,920 --> 00:08:15,250
That bundling includes linking together

205
00:08:15,250 --> 00:08:19,350
different pieces of data that are associated into one place,

206
00:08:19,350 --> 00:08:20,940
but it's also associating with it

207
00:08:20,940 --> 00:08:23,990
the methods that are going to manipulate that data object.

208
00:08:23,990 --> 00:08:26,270
And this is actually an idea we've talked about a lot,

209
00:08:26,270 --> 00:08:31,650
because this is simply a version of abstraction.

210
00:08:31,650 --> 00:08:34,400
By doing this idea of bundling things together,

211
00:08:34,400 --> 00:08:38,059
I can now treat that bundle as an abstract of data

212
00:08:38,059 --> 00:08:40,390
representation.

213
00:08:40,390 --> 00:08:42,339
To get into it, I need to have defined methods

214
00:08:42,339 --> 00:08:44,380
that can pull out pieces and do things with them,

215
00:08:44,380 --> 00:08:47,940
but I can treat the whole thing simply as an element.

216
00:08:47,940 --> 00:08:50,320
And that's also going to be really important as we think

217
00:08:50,320 --> 00:08:52,280
about building our classes.

218
00:08:52,280 --> 00:08:55,300
Second key advantage of object oriented programming

219
00:08:55,300 --> 00:08:57,340
is it gives us a divide and conquer

220
00:08:57,340 --> 00:08:58,990
approach to development.

221
00:08:58,990 --> 00:09:00,850
I can implement and test the behavior

222
00:09:00,850 --> 00:09:02,900
of each class separately.

223
00:09:02,900 --> 00:09:04,730
And once I have that done, then I

224
00:09:04,730 --> 00:09:07,720
can start doing the whole system as a larger entity.

225
00:09:07,720 --> 00:09:09,940
And that increased modularity reduces

226
00:09:09,940 --> 00:09:11,520
the complexity of the code I write

227
00:09:11,520 --> 00:09:13,630
associated with any class.

228
00:09:13,630 --> 00:09:17,400
As a consequence, it makes it much easier to reuse the code.

229
00:09:17,400 --> 00:09:21,230
In fact, many Python modules defining new classes

230
00:09:21,230 --> 00:09:23,800
inherently, and each class, therefore,

231
00:09:23,800 --> 00:09:25,621
has a separate environment.

232
00:09:25,621 --> 00:09:27,870
That means I don't have any collisions over the names.

233
00:09:27,870 --> 00:09:30,780
If I want to use a method with a particular name in one class,

234
00:09:30,780 --> 00:09:33,480
I can use a method with the same name in another class,

235
00:09:33,480 --> 00:09:36,190
because they're captured inside of a module.

236
00:09:36,190 --> 00:09:37,717
And as we'll see a little later on,

237
00:09:37,717 --> 00:09:40,300
we're going to have the notion of inheritance, in which we can

238
00:09:40,300 --> 00:09:44,450
define subclasses of classes that will capture or inherit

239
00:09:44,450 --> 00:09:48,100
behavior of its parent class and potentially modify it.

240
00:09:48,100 --> 00:09:50,190
But it makes it easier for us to write code,

241
00:09:50,190 --> 00:09:52,190
because we don't have to write the same behavior

242
00:09:52,190 --> 00:09:54,030
for every class if, in fact, we can have

243
00:09:54,030 --> 00:09:56,250
it captured in a single class.

244
00:09:56,250 --> 00:09:58,070
We're going to take those ideas and now

245
00:09:58,070 --> 00:10:00,820
start to make them much more concrete.

