0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:03,800
Now that we've seen the idea of measuring big O notation,

2
00:00:03,800 --> 00:00:06,490
different classes of complexity, what I want to do

3
00:00:06,490 --> 00:00:08,280
is look at some examples.

4
00:00:08,280 --> 00:00:12,380
Here are the list of classes in order of increasing complexity.

5
00:00:12,380 --> 00:00:15,700
And my goal here is to show you examples from almost all

6
00:00:15,700 --> 00:00:18,060
of these classes, partly so that when

7
00:00:18,060 --> 00:00:19,970
you come across a new problem you

8
00:00:19,970 --> 00:00:22,412
can recognize some of the characteristics of that class.

9
00:00:22,412 --> 00:00:23,870
There are certain patterns that are

10
00:00:23,870 --> 00:00:27,410
going to put an algorithm into a class like polynomial

11
00:00:27,410 --> 00:00:30,420
or quadratic, or into a class like linear,

12
00:00:30,420 --> 00:00:32,470
or into a class like logarithmic.

13
00:00:32,470 --> 00:00:33,930
And so the goal is to both let you

14
00:00:33,930 --> 00:00:38,110
see how we analyze algorithms to say what class they belong to

15
00:00:38,110 --> 00:00:40,660
and to let you see the characteristics so that when

16
00:00:40,660 --> 00:00:42,310
you're creating your own algorithm

17
00:00:42,310 --> 00:00:44,240
you have a sense of how difficult is it going

18
00:00:44,240 --> 00:00:46,350
to be to solve this problem.

19
00:00:46,350 --> 00:00:49,540
So we'll see examples of order 1,

20
00:00:49,540 --> 00:00:52,850
or constant running time complexity, order log

21
00:00:52,850 --> 00:00:58,120
n, logarithmic, order n, linear, order n log n--

22
00:00:58,120 --> 00:01:01,040
often referred to as log linear-- order

23
00:01:01,040 --> 00:01:04,819
n to the c, which is polynomial where c is a constant-- so n

24
00:01:04,819 --> 00:01:07,240
squared would be quadratic and to the third

25
00:01:07,240 --> 00:01:09,980
would be cubic-- and finally, order c to the n

26
00:01:09,980 --> 00:01:13,110
where c is a constant, which is an exponential running time

27
00:01:13,110 --> 00:01:15,480
algorithm and the most expensive of the classes

28
00:01:15,480 --> 00:01:17,220
that we are going to deal with.

29
00:01:17,220 --> 00:01:20,700
Let's start with the simple ones first.

30
00:01:20,700 --> 00:01:23,201
Constant complexity algorithms.

31
00:01:23,201 --> 00:01:25,200
There are very few interesting examples of this,

32
00:01:25,200 --> 00:01:26,279
unfortunately.

33
00:01:26,279 --> 00:01:27,820
They're the nicest ones because these

34
00:01:27,820 --> 00:01:31,200
are cases where the complexity is independent of the input.

35
00:01:31,200 --> 00:01:33,470
It's going to take the same order of time

36
00:01:33,470 --> 00:01:35,290
no matter what the input is.

37
00:01:35,290 --> 00:01:37,540
Well, there are very few interesting algorithms

38
00:01:37,540 --> 00:01:38,530
in this class.

39
00:01:38,530 --> 00:01:41,212
Often pieces of other algorithms do fit here.

40
00:01:41,212 --> 00:01:42,670
And we're going to use that to help

41
00:01:42,670 --> 00:01:46,080
us reason about the complexity of other parts of algorithms.

42
00:01:46,080 --> 00:01:50,080
Note by the way that one can have loops or recursive calls

43
00:01:50,080 --> 00:01:52,705
and still be in the constant complexity case.

44
00:01:52,705 --> 00:01:55,190
It's simply that the number of iterations or calls

45
00:01:55,190 --> 00:01:57,780
in that instance will be independent of the size

46
00:01:57,780 --> 00:01:58,806
of the input.

47
00:01:58,806 --> 00:02:00,680
We're not going to show you examples of these

48
00:02:00,680 --> 00:02:04,020
because they're mostly pretty boring.

49
00:02:04,020 --> 00:02:06,041
Logarithmic complexity, on the other hand,

50
00:02:06,041 --> 00:02:07,790
is something that's going to be very nice.

51
00:02:07,790 --> 00:02:09,490
These are very efficient algorithms.

52
00:02:09,490 --> 00:02:12,270
And here, these are algorithms where the complexity

53
00:02:12,270 --> 00:02:17,100
grows as the log or logarithm of the size of one of its inputs.

54
00:02:17,100 --> 00:02:20,190
Standard examples, bisection search,

55
00:02:20,190 --> 00:02:22,460
a binary search of a list, anything

56
00:02:22,460 --> 00:02:26,700
that divides the space of the search in half at each step

57
00:02:26,700 --> 00:02:29,350
is a nice characteristic of a logarithmic complexity

58
00:02:29,350 --> 00:02:30,430
algorithm.

59
00:02:30,430 --> 00:02:33,050
So let's look at a little example here.

60
00:02:33,050 --> 00:02:35,670
Here's a very simple example.

61
00:02:35,670 --> 00:02:39,030
It's a little program that's going to take in an integer

62
00:02:39,030 --> 00:02:40,724
and convert it to a string.

63
00:02:40,724 --> 00:02:42,390
And there are standard ways of doing it.

64
00:02:42,390 --> 00:02:44,764
But in this case, it's going to run through a little loop

65
00:02:44,764 --> 00:02:45,560
to do that.

66
00:02:45,560 --> 00:02:46,880
So what does it do?

67
00:02:46,880 --> 00:02:48,470
It creates an internal variable called

68
00:02:48,470 --> 00:02:51,580
digits, which is us which is a string of the digits from 0

69
00:02:51,580 --> 00:02:52,919
to 9.

70
00:02:52,919 --> 00:02:54,210
And then it does the following.

71
00:02:54,210 --> 00:02:57,430
Given that input, which is an integer of some size,

72
00:02:57,430 --> 00:03:01,770
if it's 0, we just returned the string 0.

73
00:03:01,770 --> 00:03:03,490
Otherwise, we set up a little loop.

74
00:03:03,490 --> 00:03:05,650
We set result to be an empty string.

75
00:03:05,650 --> 00:03:07,490
And then we run through a little while loop

76
00:03:07,490 --> 00:03:13,250
here where we take i, get its remainder base 10, which

77
00:03:13,250 --> 00:03:16,070
is basically the lowest order digit, and then

78
00:03:16,070 --> 00:03:20,070
index into digits at that point, which

79
00:03:20,070 --> 00:03:23,130
retrieves that character of the string,

80
00:03:23,130 --> 00:03:26,040
and we add it onto result. And then

81
00:03:26,040 --> 00:03:28,880
we divide i integer-wise by 10.

82
00:03:28,880 --> 00:03:30,360
We shift right.

83
00:03:30,360 --> 00:03:33,750
So we're literally going to take each digit in turn,

84
00:03:33,750 --> 00:03:36,840
figure out what the character as a string is representing that,

85
00:03:36,840 --> 00:03:39,830
and then add it into the result.

86
00:03:39,830 --> 00:03:42,310
I don't care what this does There are lots of other ways

87
00:03:42,310 --> 00:03:42,870
to do it.

88
00:03:42,870 --> 00:03:44,690
What I want to do is use it as an example

89
00:03:44,690 --> 00:03:47,640
to understand the complexity of this algorithm.

90
00:03:47,640 --> 00:03:49,690
So let's look at that.

91
00:03:49,690 --> 00:03:51,190
There's is my coat.

92
00:03:51,190 --> 00:03:52,980
And what do we know here?

93
00:03:52,980 --> 00:03:55,795
We know that we really only have to look at the loop

94
00:03:55,795 --> 00:03:57,920
because there are no recursive function calls here.

95
00:03:57,920 --> 00:04:00,430
I'm not calling it to string multiple times.

96
00:04:00,430 --> 00:04:03,020
Everything's in the body of this coat.

97
00:04:03,020 --> 00:04:04,706
What else do I know?

98
00:04:04,706 --> 00:04:06,330
I know-- and I'm going to actually jump

99
00:04:06,330 --> 00:04:07,190
ahead slightly here.

100
00:04:07,190 --> 00:04:10,636
I know that these stages here are constant.

101
00:04:10,636 --> 00:04:12,400
I only do it once.

102
00:04:12,400 --> 00:04:15,310
We've already seen an earlier analysis they don't matter.

103
00:04:15,310 --> 00:04:17,990
So all I have to do is look inside of the while loop.

104
00:04:17,990 --> 00:04:20,630
And in that while loop, the things I'm doing

105
00:04:20,630 --> 00:04:22,700
are a constant number of steps.

106
00:04:22,700 --> 00:04:26,770
So inside of the loop is constant Cos.

107
00:04:26,770 --> 00:04:28,270
Therefore, all I have to worry about

108
00:04:28,270 --> 00:04:31,570
is how many times do I go through the loop.

109
00:04:31,570 --> 00:04:34,460
And the answer there is basically how many times can

110
00:04:34,460 --> 00:04:36,500
I divide i by 10.

111
00:04:36,500 --> 00:04:38,010
Because each time through the loop

112
00:04:38,010 --> 00:04:40,840
I reduce i by a factor of 10.

113
00:04:40,840 --> 00:04:42,830
And that is just logarithmic.

114
00:04:42,830 --> 00:04:45,900
It's log base 10 of the size of i.

115
00:04:45,900 --> 00:04:51,750
This is an instance of a log complexity algorithm.

116
00:04:51,750 --> 00:04:54,520
Now, you might say for a second, wait a minute.

117
00:04:54,520 --> 00:04:56,580
Isn't it linear?

118
00:04:56,580 --> 00:04:57,940
And it is in a funny way.

119
00:04:57,940 --> 00:05:02,420
It is linear in the length or the size of n.

120
00:05:02,420 --> 00:05:05,990
But it is a log in the number of digits in n.

121
00:05:05,990 --> 00:05:07,770
And since I want to measure this in terms

122
00:05:07,770 --> 00:05:10,062
of the number of digits in n-- sorry.

123
00:05:10,062 --> 00:05:11,270
I'm going to say that better.

124
00:05:11,270 --> 00:05:13,730
It is linear in the number of digits in n,

125
00:05:13,730 --> 00:05:15,920
but log in the size of n.

126
00:05:15,920 --> 00:05:17,470
And since I decided to measure this

127
00:05:17,470 --> 00:05:19,190
in terms of the size of the input

128
00:05:19,190 --> 00:05:21,050
I would say that this is an example

129
00:05:21,050 --> 00:05:23,350
of a log-based algorithm.

130
00:05:23,350 --> 00:05:25,270
In the characteristic is I'm reducing

131
00:05:25,270 --> 00:05:30,740
the size of the problem by a constant factor at each step.

132
00:05:30,740 --> 00:05:31,950
OK.

133
00:05:31,950 --> 00:05:34,370
Linear complexity, still pretty good

134
00:05:34,370 --> 00:05:36,350
because it's pretty inefficient.

135
00:05:36,350 --> 00:05:38,120
Examples you've already seen?

136
00:05:38,120 --> 00:05:41,030
I want to search a list in order or in sequence to see

137
00:05:41,030 --> 00:05:42,550
if an element is present.

138
00:05:42,550 --> 00:05:44,300
It's linear because I'm going to walk down

139
00:05:44,300 --> 00:05:46,040
the list in turn looking at each element

140
00:05:46,040 --> 00:05:49,120
until I find whether that element is present or not,

141
00:05:49,120 --> 00:05:52,300
a nice example of a linear complexity search.

142
00:05:52,300 --> 00:05:54,595
Another nice example, I want to add up

143
00:05:54,595 --> 00:05:56,970
the characters of a string, which I assume to be composed

144
00:05:56,970 --> 00:05:58,370
of decimal digits.

145
00:05:58,370 --> 00:06:00,440
So I've passed in a string, so a string

146
00:06:00,440 --> 00:06:03,190
representing a bunch of numbers or decimal digits.

147
00:06:03,190 --> 00:06:06,130
I want to add them up to get the sum of what those digits comes

148
00:06:06,130 --> 00:06:07,230
to.

149
00:06:07,230 --> 00:06:08,770
Again, a simple example, but it's

150
00:06:08,770 --> 00:06:10,436
going to let you see the characteristics

151
00:06:10,436 --> 00:06:13,210
of a linear class algorithm.

152
00:06:13,210 --> 00:06:16,560
So there's a simple piece of code to do that.

153
00:06:16,560 --> 00:06:19,780
Passing in a string S I initialize a variable valve

154
00:06:19,780 --> 00:06:21,202
to zero, initially.

155
00:06:21,202 --> 00:06:23,160
And then I'm going to run through a loop, where

156
00:06:23,160 --> 00:06:25,940
I take each character in S, which is a string.

157
00:06:25,940 --> 00:06:29,060
And I want to convert it to an int, add it to val.

158
00:06:29,060 --> 00:06:32,060
And when I'm done, I'm just going to return val.

159
00:06:32,060 --> 00:06:34,030
Simple algorithm, but I want you to see

160
00:06:34,030 --> 00:06:37,130
is the order complexity here.

161
00:06:37,130 --> 00:06:38,390
It's pretty obvious.

162
00:06:38,390 --> 00:06:40,000
What do I have to count?

163
00:06:40,000 --> 00:06:46,120
This is a constant time evaluation.

164
00:06:46,120 --> 00:06:50,070
Similarly done here, this is going to take constant time.

165
00:06:50,070 --> 00:06:54,180
Inside the loop is also constant.

166
00:06:54,180 --> 00:06:56,360
I've basically got 'a conversion to an int,

167
00:06:56,360 --> 00:06:57,830
and add, and an assignment.

168
00:06:57,830 --> 00:06:58,810
So it's three steps.

169
00:06:58,810 --> 00:07:00,760
All I need to worry about is how many times

170
00:07:00,760 --> 00:07:02,130
do I go through this loop.

171
00:07:02,130 --> 00:07:04,460
And the answer is however many characters

172
00:07:04,460 --> 00:07:06,570
there are in s, the string.

173
00:07:06,570 --> 00:07:09,630
So it is linear in the length of the string.

174
00:07:09,630 --> 00:07:13,330
Nice example of a linear time algorithm.

175
00:07:13,330 --> 00:07:17,729
Now let's look at some examples where we actually have calls.

176
00:07:17,729 --> 00:07:20,020
And I'm going to start with an iterative algorithm, one

177
00:07:20,020 --> 00:07:22,830
that you've seen before, computing factorials iterively.

178
00:07:22,830 --> 00:07:24,820
And to remind you, factorial of n

179
00:07:24,820 --> 00:07:29,080
is n times n minus 1 times n minus 2 all the way down to 1.

180
00:07:29,080 --> 00:07:32,730
Here, I set up an internal variable to be 1.

181
00:07:32,730 --> 00:07:36,700
And then I run a loop where n ranges from 1 up to n

182
00:07:36,700 --> 00:07:39,580
of simply doing the product of what I've already had times i

183
00:07:39,580 --> 00:07:41,000
and storing it back into there.

184
00:07:41,000 --> 00:07:42,870
And then I return the product.

185
00:07:42,870 --> 00:07:46,980
And again, the question is what's the complexity of this?

186
00:07:46,980 --> 00:07:49,280
Well, it comes down to the same thing.

187
00:07:49,280 --> 00:07:50,450
The return is constant.

188
00:07:50,450 --> 00:07:52,200
The setting of a product is constant.

189
00:07:52,200 --> 00:07:54,710
What I want to measure is how much the cost

190
00:07:54,710 --> 00:07:56,290
is that are inside the loop.

191
00:07:56,290 --> 00:07:58,850
And I know that's also constant because it's just

192
00:07:58,850 --> 00:08:01,320
the same number of, in this case, two operations each

193
00:08:01,320 --> 00:08:05,390
time through, plus 1 assignment up here to set up i, so 3.

194
00:08:05,390 --> 00:08:08,490
So the real question is how many times do I go around the loop?

195
00:08:08,490 --> 00:08:11,372
N, that's the size of my problem.

196
00:08:11,372 --> 00:08:13,830
So the number of operations, as we've said, inside the loop

197
00:08:13,830 --> 00:08:14,413
is a constant.

198
00:08:14,413 --> 00:08:16,320
We go through that thing n times.

199
00:08:16,320 --> 00:08:19,260
Therefore, this is just 3n, which we've already seen,

200
00:08:19,260 --> 00:08:22,240
is the same as saying it's a big order, big O notation

201
00:08:22,240 --> 00:08:24,990
order of n or linear.

202
00:08:24,990 --> 00:08:27,360
So something that has a loop in it

203
00:08:27,360 --> 00:08:29,580
with a constant number of operations or work

204
00:08:29,580 --> 00:08:32,710
inside the loop, characteristic of a linear complexity

205
00:08:32,710 --> 00:08:34,112
algorithm.

206
00:08:34,112 --> 00:08:34,799
OK.

207
00:08:34,799 --> 00:08:37,710
We got an iterative version of factorial.

208
00:08:37,710 --> 00:08:39,730
What about the recursive one?

209
00:08:39,730 --> 00:08:41,429
Well, we've seen this as well, reminder

210
00:08:41,429 --> 00:08:44,520
that the recursive version says if n is 1 or less

211
00:08:44,520 --> 00:08:49,530
I return 1, otherwise, I return a recursive call

212
00:08:49,530 --> 00:08:51,950
to the procedure with a smaller argument.

213
00:08:51,950 --> 00:08:54,220
And then when I get the result, I multiply it by n

214
00:08:54,220 --> 00:08:56,490
and I return that as a value.

215
00:08:56,490 --> 00:08:58,720
If you were to actually time these two,

216
00:08:58,720 --> 00:09:01,710
you probably would notice that the factorial version that's

217
00:09:01,710 --> 00:09:05,460
recursive is slightly slower than the iterative one,

218
00:09:05,460 --> 00:09:08,830
mostly because of the cost of setting up the recursive call.

219
00:09:08,830 --> 00:09:11,010
But we've also said that timing isn't the only thing

220
00:09:11,010 --> 00:09:11,801
we want to do here.

221
00:09:11,801 --> 00:09:15,140
It's really what are the number of operations we have to do.

222
00:09:15,140 --> 00:09:19,640
And here, this is still linear because the number

223
00:09:19,640 --> 00:09:22,260
of things I have to do to set up the recursive call

224
00:09:22,260 --> 00:09:24,270
are just two.

225
00:09:24,270 --> 00:09:28,070
And more importantly, how many times do I call this function?

226
00:09:28,070 --> 00:09:29,490
I call it n times.

227
00:09:29,490 --> 00:09:33,460
And so, again, it's order n even though it's recursive rather

228
00:09:33,460 --> 00:09:35,680
than factorial.

229
00:09:35,680 --> 00:09:37,420
Again, the characteristic here is,

230
00:09:37,420 --> 00:09:40,640
I'm doing a recursive call once for each increment

231
00:09:40,640 --> 00:09:42,040
in the size of the problem.

232
00:09:42,040 --> 00:09:44,040
And inside of that operation I'm just

233
00:09:44,040 --> 00:09:46,310
doing a constant number of things.

234
00:09:46,310 --> 00:09:49,940
So notice in an interesting way both the iterative

235
00:09:49,940 --> 00:09:52,500
and the recursive factorial implementations

236
00:09:52,500 --> 00:09:54,290
are the same order of growth.

237
00:09:54,290 --> 00:09:56,820
It doesn't mean they'll take exactly the same amount of time

238
00:09:56,820 --> 00:09:58,330
on the same size problem.

239
00:09:58,330 --> 00:10:01,160
But since we want to measure asymptotic order of gross,

240
00:10:01,160 --> 00:10:03,650
as we let the size of the problem get really large,

241
00:10:03,650 --> 00:10:06,430
these both belong to the same class.

242
00:10:06,430 --> 00:10:09,510
They're linear.

243
00:10:09,510 --> 00:10:12,540
Now the next level is what we call log linear.

244
00:10:12,540 --> 00:10:15,430
And we're going to see that many practical algorithms fall

245
00:10:15,430 --> 00:10:16,130
into this class.

246
00:10:16,130 --> 00:10:18,370
It's another nice, efficient class.

247
00:10:18,370 --> 00:10:20,310
And it's very commonly used on things

248
00:10:20,310 --> 00:10:22,294
like an algorithm called Merge Sort.

249
00:10:22,294 --> 00:10:23,710
And I'm simply going to defer you.

250
00:10:23,710 --> 00:10:25,930
We're going to come back to that in the next lecture.

251
00:10:25,930 --> 00:10:27,780
But this will be a classic example

252
00:10:27,780 --> 00:10:29,550
of a log linear algorithm.

253
00:10:29,550 --> 00:10:31,990
And you'll see it a little while.

