0
00:00:00,000 --> 00:00:00,560
...

1
00:00:00,560 --> 00:00:02,680
Once you've discovered that your code doesn't

2
00:00:02,680 --> 00:00:05,849
do what you wanted it to, you now want to do three things.

3
00:00:05,849 --> 00:00:08,390
You want to isolate the bug or bugs, because there's probably

4
00:00:08,390 --> 00:00:09,570
more than one.

5
00:00:09,570 --> 00:00:11,090
You want to get rid of them.

6
00:00:11,090 --> 00:00:14,107
And then as I said earlier, you want to go back and retest,

7
00:00:14,107 --> 00:00:16,440
keep doing that until you're sure that the code actually

8
00:00:16,440 --> 00:00:18,280
runs correctly.

9
00:00:18,280 --> 00:00:20,640
That last point is important, because all too often,

10
00:00:20,640 --> 00:00:22,410
you spot a bug, fix it, and think,

11
00:00:22,410 --> 00:00:24,912
I'm set, and not realize that there's another bug hidden

12
00:00:24,912 --> 00:00:25,870
that you didn't get to.

13
00:00:25,870 --> 00:00:29,320
So do all three of these stages as you do that.

14
00:00:29,320 --> 00:00:33,974
Now, the word bug, odd word, where does it come from?

15
00:00:33,974 --> 00:00:35,640
Well, I want to tell you a little story.

16
00:00:35,640 --> 00:00:39,060
And I want to go back to September 9th of 1947.

17
00:00:39,060 --> 00:00:42,060
One of the earliest machines one of the earliest computers built

18
00:00:42,060 --> 00:00:44,720
was something at Harvard called the Mark II Aiken Relay

19
00:00:44,720 --> 00:00:45,597
computer.

20
00:00:45,597 --> 00:00:47,430
And I'm sure you've heard stories like this,

21
00:00:47,430 --> 00:00:49,513
but this was something that filled an entire room.

22
00:00:49,513 --> 00:00:52,360
It was built out of vacuum tubes and electronic relays

23
00:00:52,360 --> 00:00:55,730
and other very large-scale electronic components.

24
00:00:55,730 --> 00:00:58,300
It didn't do a lot, obviously, we've come a long way,

25
00:00:58,300 --> 00:01:01,090
but it was one of the earliest computers.

26
00:01:01,090 --> 00:01:03,620
One of the people, one of the key people in the design

27
00:01:03,620 --> 00:01:06,580
and programming of that computer was a woman

28
00:01:06,580 --> 00:01:10,040
named Grace Murray Hopper, a very famous computer scientist

29
00:01:10,040 --> 00:01:13,140
who eventually retired as an Admiral in the US Navy

30
00:01:13,140 --> 00:01:15,350
and shown on the left here, along with her colleagues

31
00:01:15,350 --> 00:01:17,680
doing some programming and one of the earliest computers.

32
00:01:17,680 --> 00:01:19,400
This console's actually not from the Aiken,

33
00:01:19,400 --> 00:01:21,400
it's from a different computer, but it gives you

34
00:01:21,400 --> 00:01:23,500
a sense of the kinds of things they did.

35
00:01:23,500 --> 00:01:27,440
As they were testing that system on that day,

36
00:01:27,440 --> 00:01:30,400
they started running some tests of the arithmetic

37
00:01:30,400 --> 00:01:31,280
functions in there.

38
00:01:31,280 --> 00:01:33,940
They started up an arctan test, and they were running it.

39
00:01:33,940 --> 00:01:36,480
They started up a cosine test, and they were running it.

40
00:01:36,480 --> 00:01:38,970
And they kept getting an error.

41
00:01:38,970 --> 00:01:40,990
They kept getting something that wasn't working.

42
00:01:40,990 --> 00:01:42,722
They tried a bunch of things to debug it,

43
00:01:42,722 --> 00:01:44,930
they didn't use that word at the time, I don't think,

44
00:01:44,930 --> 00:01:46,940
but they tried a bunch of things to debug it.

45
00:01:46,940 --> 00:01:48,940
And finally, one of the technicians

46
00:01:48,940 --> 00:01:53,390
went back into the computer and unscrewed one of the vacuum

47
00:01:53,390 --> 00:01:55,290
tubes that was in there, and inside it, he

48
00:01:55,290 --> 00:01:59,590
found that a moth had flown into the computer

49
00:01:59,590 --> 00:02:01,960
and had shorted out the connection.

50
00:02:01,960 --> 00:02:04,520
And as you can see, in Grace Hopper's words here,

51
00:02:04,520 --> 00:02:09,169
this is the first actual case of a bug being found.

52
00:02:09,169 --> 00:02:11,720
Whether this is the first use of the word bug or not,

53
00:02:11,720 --> 00:02:13,970
most of us in computer science love it,

54
00:02:13,970 --> 00:02:18,170
because it gives you a sense of why we use that word bug.

55
00:02:18,170 --> 00:02:20,450
So that's where the word bug comes from.

56
00:02:20,450 --> 00:02:21,950
Now, we're going to talk about where

57
00:02:21,950 --> 00:02:23,990
do bugs themselves come from.

58
00:02:23,990 --> 00:02:26,040
And here there are a couple of things that we

59
00:02:26,040 --> 00:02:28,250
want to distinguish between.

60
00:02:28,250 --> 00:02:30,890
First of all, there are overt bugs,

61
00:02:30,890 --> 00:02:32,860
and there are covert bugs.

62
00:02:32,860 --> 00:02:35,920
Overt bugs mean that there's an obvious indication

63
00:02:35,920 --> 00:02:37,200
that something's wrong.

64
00:02:37,200 --> 00:02:38,570
The code crashes.

65
00:02:38,570 --> 00:02:40,550
It stops before it gets to an answer,

66
00:02:40,550 --> 00:02:42,230
or worse yet, the code runs forever,

67
00:02:42,230 --> 00:02:44,830
it goes into an infinite loop, which you'll eventually decide,

68
00:02:44,830 --> 00:02:47,080
when you get tired of waiting for the machine to stop,

69
00:02:47,080 --> 00:02:49,230
and you stop it yourself.

70
00:02:49,230 --> 00:02:53,570
Those are obvious bugs, and you know need to fix them.

71
00:02:53,570 --> 00:02:55,390
Covert bugs are ones where there's

72
00:02:55,390 --> 00:02:57,420
no obvious manifestation.

73
00:02:57,420 --> 00:02:59,400
The code actually returns a value,

74
00:02:59,400 --> 00:03:01,670
but it may not be the correct one.

75
00:03:01,670 --> 00:03:03,560
And these are sometimes harder to determine,

76
00:03:03,560 --> 00:03:05,934
that's where the test suites going to be really important

77
00:03:05,934 --> 00:03:07,290
to try and capture.

78
00:03:07,290 --> 00:03:09,600
I've got something not behaving the way I expected.

79
00:03:09,600 --> 00:03:11,400
You don't want code to return values

80
00:03:11,400 --> 00:03:14,620
that appear to be legal values but are not in fact

81
00:03:14,620 --> 00:03:16,810
the expected values.

82
00:03:16,810 --> 00:03:20,044
Similarly bugs can be both persistent and intermittent.

83
00:03:20,044 --> 00:03:21,710
Persistent ones are the easier are ones,

84
00:03:21,710 --> 00:03:22,710
it happens every time.

85
00:03:22,710 --> 00:03:25,460
Every time I run my code, it crashes,

86
00:03:25,460 --> 00:03:28,010
or it returns a particular value.

87
00:03:28,010 --> 00:03:29,160
I know I've got a problem.

88
00:03:29,160 --> 00:03:30,420
I can find it.

89
00:03:30,420 --> 00:03:33,250
Intermittent ones are those that occur only sometimes,

90
00:03:33,250 --> 00:03:34,980
even if run on the same input.

91
00:03:34,980 --> 00:03:37,180
And they tend to depend on other factors.

92
00:03:37,180 --> 00:03:39,130
It may be dealing with something on the web,

93
00:03:39,130 --> 00:03:40,588
or it may be dealing with something

94
00:03:40,588 --> 00:03:42,770
where the time actually is an important factor.

95
00:03:42,770 --> 00:03:46,770
And as you might expect, finding overt and finding

96
00:03:46,770 --> 00:03:49,560
persistent bugs and removing them is pretty easy.

97
00:03:49,560 --> 00:03:51,850
Finding covert or finding intermittent ones

98
00:03:51,850 --> 00:03:57,380
takes more work and are often harder to spot and get rid of.

99
00:03:57,380 --> 00:04:00,260
So what are ways we might deal with this?

100
00:04:00,260 --> 00:04:03,120
Overt and persistent, they're obvious to detect,

101
00:04:03,120 --> 00:04:06,010
and good programmers typically use a defensive program

102
00:04:06,010 --> 00:04:08,580
to try and ensure that, if the error is made,

103
00:04:08,580 --> 00:04:10,579
the bug's going to fall into this category.

104
00:04:10,579 --> 00:04:12,370
In other words, steer it to this direction,

105
00:04:12,370 --> 00:04:14,300
because it's going to be easier to find.

106
00:04:14,300 --> 00:04:16,529
We'll see some examples of defensive programming

107
00:04:16,529 --> 00:04:18,269
that can help with that.

108
00:04:18,269 --> 00:04:20,790
Overt and intermittent, obviously,

109
00:04:20,790 --> 00:04:23,210
are more frustrating, they're harder to debug.

110
00:04:23,210 --> 00:04:25,170
But if the conditions that prompt the bug

111
00:04:25,170 --> 00:04:28,074
can be reproduced, they can be handled.

112
00:04:28,074 --> 00:04:29,490
And that, often, is what you'll do

113
00:04:29,490 --> 00:04:31,552
here is, you know there's an overt error here,

114
00:04:31,552 --> 00:04:33,010
you just have to try and figure out

115
00:04:33,010 --> 00:04:35,300
what were exactly the right conditions to make sure

116
00:04:35,300 --> 00:04:37,982
that the bug reappears.

117
00:04:37,982 --> 00:04:39,690
And that'll allow you to isolate in where

118
00:04:39,690 --> 00:04:42,820
you want to go to try and find the bug and remove it.

119
00:04:42,820 --> 00:04:45,090
The latter category are the toughest ones.

120
00:04:45,090 --> 00:04:47,950
They're highly dangerous, as you as a programmer,

121
00:04:47,950 --> 00:04:50,760
may not realize they're there, and more importantly, the user

122
00:04:50,760 --> 00:04:54,430
may not realize that answers are incorrect until the code has

123
00:04:54,430 --> 00:04:56,090
been run for a very long period or has

124
00:04:56,090 --> 00:04:58,210
gotten to a very different portion of the code.

125
00:04:58,210 --> 00:05:01,110
And trying to backtrack to find where that error came from

126
00:05:01,110 --> 00:05:02,720
can be really hard.

127
00:05:02,720 --> 00:05:05,170
So this is where defensive programming can be important,

128
00:05:05,170 --> 00:05:07,840
because if you can force bugs into this category,

129
00:05:07,840 --> 00:05:10,190
you're just in better shape.

