0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:03,170
Now that we've seen the basic idea of creating a class

2
00:00:03,170 --> 00:00:05,070
and creating instances of a class,

3
00:00:05,070 --> 00:00:07,200
and we've seen the idea of defining methods

4
00:00:07,200 --> 00:00:09,650
for them, including methods that are sort of the built in

5
00:00:09,650 --> 00:00:11,858
or associated methods-- like what does it print like,

6
00:00:11,858 --> 00:00:13,800
how do I create an instance-- let's look

7
00:00:13,800 --> 00:00:15,546
at how we would use this idea of a class.

8
00:00:15,546 --> 00:00:17,170
And probably the best way to do that is

9
00:00:17,170 --> 00:00:19,019
to simply take an example.

10
00:00:19,019 --> 00:00:20,810
So I'm going to create a new type of object

11
00:00:20,810 --> 00:00:23,154
to represent a number as a fraction, and literally

12
00:00:23,154 --> 00:00:24,820
as a fraction, not as the floating point

13
00:00:24,820 --> 00:00:26,190
equivalent of that.

14
00:00:26,190 --> 00:00:27,449
What do I need?

15
00:00:27,449 --> 00:00:29,490
I need to say what's the internal representation?

16
00:00:29,490 --> 00:00:31,656
What are the data attributes I want to glue together

17
00:00:31,656 --> 00:00:33,270
and how am I going to represent them?

18
00:00:33,270 --> 00:00:35,530
And then what's the interface, or if you

19
00:00:35,530 --> 00:00:37,500
like, the methods that I'm going to use

20
00:00:37,500 --> 00:00:40,740
to interact with instances of those Fraction objects?

21
00:00:40,740 --> 00:00:42,510
In my case for a fraction, I want

22
00:00:42,510 --> 00:00:46,200
a numerator and a denominator, a top part and a bottom part.

23
00:00:46,200 --> 00:00:49,410
In terms of the interaction, the interface, the methods,

24
00:00:49,410 --> 00:00:51,220
I certainly want a print representation

25
00:00:51,220 --> 00:00:53,330
so I don't get something messy coming out.

26
00:00:53,330 --> 00:00:55,040
But I'd like to think about simple things

27
00:00:55,040 --> 00:00:58,280
like how do I add fractions, how do I subtract fractions.

28
00:00:58,280 --> 00:01:00,700
And one other thing I might like is, if I wanted to,

29
00:01:00,700 --> 00:01:03,560
how do I convert a fraction into an actual floating point number

30
00:01:03,560 --> 00:01:06,190
that I could then use standard Python arithmetic

31
00:01:06,190 --> 00:01:07,800
operations on?

32
00:01:07,800 --> 00:01:09,300
Let's see how we would build that.

33
00:01:09,300 --> 00:01:10,675
And what you're going to see here

34
00:01:10,675 --> 00:01:13,380
is less the details of doing fractions, more

35
00:01:13,380 --> 00:01:16,300
the idea of how I use the methods to define behaviors

36
00:01:16,300 --> 00:01:19,080
that I want to associate with different objects,

37
00:01:19,080 --> 00:01:22,140
in this case, fractions.

38
00:01:22,140 --> 00:01:26,560
OK, so initially, I need to define the class of a Fraction.

39
00:01:26,560 --> 00:01:28,940
I use class to say it's the definition of class.

40
00:01:28,940 --> 00:01:30,000
I got the name.

41
00:01:30,000 --> 00:01:32,900
And as before, this is going to inherit from the underlying

42
00:01:32,900 --> 00:01:34,450
object class.

43
00:01:34,450 --> 00:01:36,329
I also need, as always, to define

44
00:01:36,329 --> 00:01:38,370
what does it mean to create one of these objects.

45
00:01:38,370 --> 00:01:40,040
So I've got an init method.

46
00:01:40,040 --> 00:01:42,600
It takes in two arguments besides self.

47
00:01:42,600 --> 00:01:44,380
That is a numerator and a denominator.

48
00:01:44,380 --> 00:01:46,600
And I'm just going to bind those locally

49
00:01:46,600 --> 00:01:50,150
within the frame associated with every instance of a class.

50
00:01:50,150 --> 00:01:52,870
I also want to define what I want to have printed out

51
00:01:52,870 --> 00:01:53,600
when I do this.

52
00:01:53,600 --> 00:01:56,680
And here I'm simply going to have it print out

53
00:01:56,680 --> 00:01:58,930
a string representation of the numerator

54
00:01:58,930 --> 00:02:01,850
and the denominator separated by a slash,

55
00:02:01,850 --> 00:02:04,620
sort of like you'd expect to see inside of a fraction.

56
00:02:04,620 --> 00:02:09,130
There is my definition initially of what a fraction looks like.

57
00:02:09,130 --> 00:02:11,080
Let's see what happens if I use that.

58
00:02:11,080 --> 00:02:14,490
So I'm going to go over to my machine and load this up.

59
00:02:14,490 --> 00:02:16,150
And let's do the two definitions.

60
00:02:16,150 --> 00:02:25,860
Let's give the name one_half to the fraction of 1 and 2.

61
00:02:25,860 --> 00:02:30,640
Let's give the name two_thirds to the fraction, obviously,

62
00:02:30,640 --> 00:02:33,315
of 2 and 3.

63
00:02:33,315 --> 00:02:35,190
And let's see if it prints out appropriately.

64
00:02:35,190 --> 00:02:38,442
So I print out one_half.

65
00:02:38,442 --> 00:02:39,980
Yep, does what I'd like.

66
00:02:39,980 --> 00:02:41,940
And obviously you would expect two_thirds

67
00:02:41,940 --> 00:02:44,670
ought to do the same thing, but let's just check it.

68
00:02:44,670 --> 00:02:46,107
There we go.

69
00:02:46,107 --> 00:02:47,690
All right, so we can create fractions.

70
00:02:47,690 --> 00:02:49,860
We're can create a bunch of them, a little boring.

71
00:02:49,860 --> 00:02:51,860
What could we do with fractions?

72
00:02:51,860 --> 00:02:54,360
Well as I said, I want to do some operations on it.

73
00:02:54,360 --> 00:02:56,500
But before I do that, I want to introduce one more

74
00:02:56,500 --> 00:02:58,264
important idea.

75
00:02:58,264 --> 00:02:59,680
And that goes back to something we

76
00:02:59,680 --> 00:03:02,221
talked about earlier, which I'm going to pull in in a second.

77
00:03:02,221 --> 00:03:04,100
And the new idea is to create something that

78
00:03:04,100 --> 00:03:06,620
lets me access data attributes.

79
00:03:06,620 --> 00:03:08,500
These are often called getters.

80
00:03:08,500 --> 00:03:11,060
I'm going to get out the elements of that.

81
00:03:11,060 --> 00:03:13,510
And here I'm going to define a getter for numerator

82
00:03:13,510 --> 00:03:15,189
and a getter for denominator.

83
00:03:15,189 --> 00:03:16,730
I'm going to give them obvious names.

84
00:03:16,730 --> 00:03:17,855
I could give them anything.

85
00:03:17,855 --> 00:03:20,160
But I'm going to say get_numer should give me back

86
00:03:20,160 --> 00:03:21,810
the numerator of a fraction.

87
00:03:21,810 --> 00:03:23,790
And get_denom should give me back the value

88
00:03:23,790 --> 00:03:26,930
of the denominator of an instance of a fraction.

89
00:03:26,930 --> 00:03:29,161
Why am I creating those?

90
00:03:29,161 --> 00:03:30,660
Well those are going to be important

91
00:03:30,660 --> 00:03:32,770
because it's going to separate out

92
00:03:32,770 --> 00:03:35,080
accessing the internal representation

93
00:03:35,080 --> 00:03:37,300
from the actual use of the representation.

94
00:03:37,300 --> 00:03:39,870
But let's check to make sure it does the right thing.

95
00:03:39,870 --> 00:03:41,620
You can see what I can expect it to do.

96
00:03:41,620 --> 00:03:44,400
And if I say get half-- sorry, one_half,

97
00:03:44,400 --> 00:03:48,320
and I use get_numer, that's great.

98
00:03:48,320 --> 00:03:51,840
It gives me back the numerator of one_half.

99
00:03:51,840 --> 00:03:53,710
Notice the call.

100
00:03:53,710 --> 00:03:54,530
There's the dot.

101
00:03:54,530 --> 00:03:57,330
And I'm going to step through this carefully. one_half points

102
00:03:57,330 --> 00:03:57,980
to an instance.

103
00:03:57,980 --> 00:03:59,710
It's a frame somewhere.

104
00:03:59,710 --> 00:04:04,490
The dot says, get the binding for get_numer in that frame.

105
00:04:04,490 --> 00:04:09,040
Oh yeah, that was the definition that I did right back here

106
00:04:09,040 --> 00:04:12,250
of a method inside-- actually the frame of coordinate--

107
00:04:12,250 --> 00:04:13,300
sorry, frame of fraction.

108
00:04:13,300 --> 00:04:15,180
But I inherit it because one_half

109
00:04:15,180 --> 00:04:17,010
is an instance of Fraction.

110
00:04:17,010 --> 00:04:18,850
But the last piece is that simply gives you

111
00:04:18,850 --> 00:04:20,120
back the procedure.

112
00:04:20,120 --> 00:04:22,970
To make it run, I have to invoke it.

113
00:04:22,970 --> 00:04:25,270
And while it takes no arguments other than self, which

114
00:04:25,270 --> 00:04:28,380
is automatically provided, I need to say open, close paren

115
00:04:28,380 --> 00:04:30,035
to actually invoke it.

116
00:04:30,035 --> 00:04:31,660
Do the same thing with get denominator.

117
00:04:31,660 --> 00:04:35,090
I can get out the pieces of them.

118
00:04:35,090 --> 00:04:36,580
As we said, this is a procedure.

119
00:04:36,580 --> 00:04:37,640
I've got to invoke it.

120
00:04:37,640 --> 00:04:42,400
And remember again, self is provided separately for me.

121
00:04:42,400 --> 00:04:44,700
I can now use that to define things

122
00:04:44,700 --> 00:04:48,280
like how do I add fractions or how do I subtract fractions.

123
00:04:48,280 --> 00:04:50,530
And notice that while it looks a little messy at code,

124
00:04:50,530 --> 00:04:52,870
it actually is going to have an important property.

125
00:04:52,870 --> 00:04:55,090
So here is the definition of add.

126
00:04:55,090 --> 00:04:57,880
It takes two arguments, the instance itself,

127
00:04:57,880 --> 00:04:59,494
and some other fraction.

128
00:04:59,494 --> 00:05:00,910
And inside of there I'm just going

129
00:05:00,910 --> 00:05:03,880
to do the work to actually define what it means

130
00:05:03,880 --> 00:05:05,720
to add together two fractions.

131
00:05:05,720 --> 00:05:08,150
I take the numerator of one, the denominator of the other,

132
00:05:08,150 --> 00:05:09,317
multiply them together.

133
00:05:09,317 --> 00:05:11,650
Take the denominator of one, the numerator of the other,

134
00:05:11,650 --> 00:05:13,890
multiply them together, add those up.

135
00:05:13,890 --> 00:05:15,210
That's the new numerator.

136
00:05:15,210 --> 00:05:18,476
The denominator is just the product of those two products.

137
00:05:18,476 --> 00:05:20,100
And if you look at the slide carefully,

138
00:05:20,100 --> 00:05:21,620
I notice I have some typos here.

139
00:05:21,620 --> 00:05:22,300
Ignore them.

140
00:05:22,300 --> 00:05:24,341
My method is actually going to do them correctly.

141
00:05:24,341 --> 00:05:26,750
That snuck in somehow into my slide.

142
00:05:26,750 --> 00:05:29,390
Last piece of this is, having computed that numerator

143
00:05:29,390 --> 00:05:32,470
and denominator, I need to return an instance.

144
00:05:32,470 --> 00:05:35,040
And I create one by calling Fraction

145
00:05:35,040 --> 00:05:38,630
with new values for the numerator and the denominator.

146
00:05:38,630 --> 00:05:41,270
Subtraction does the same kind of thing.

147
00:05:41,270 --> 00:05:43,660
Let's see what happens if I actually use that.

148
00:05:43,660 --> 00:05:45,290
So I've got those two versions there.

149
00:05:45,290 --> 00:05:52,650
Let's call new what I get by taking one_half and two_thirds

150
00:05:52,650 --> 00:05:54,640
and adding them together.

151
00:05:54,640 --> 00:05:58,810
And what does new look like-- perfect.

152
00:05:58,810 --> 00:06:01,470
Let's do one more example.

153
00:06:01,470 --> 00:06:04,340
Let's call three_quarters the obvious thing,

154
00:06:04,340 --> 00:06:07,157
the fraction of 3 and 4.

155
00:06:07,157 --> 00:06:09,740
Let's just make sure it works in other kinds of versions here.

156
00:06:09,740 --> 00:06:13,247
So I'm going to call second new.

157
00:06:13,247 --> 00:06:15,330
Well actually let's just print out three_quarters.

158
00:06:15,330 --> 00:06:16,030
I can print it.

159
00:06:16,030 --> 00:06:19,580


160
00:06:19,580 --> 00:06:20,290
And there it is.

161
00:06:20,290 --> 00:06:25,380
And if I let second_new be, let's

162
00:06:25,380 --> 00:06:28,380
do two_thirds minus three_quarters,

163
00:06:28,380 --> 00:06:30,075
because I defined sub as well.

164
00:06:30,075 --> 00:06:36,400


165
00:06:36,400 --> 00:06:37,700
Needs to type it properly.

166
00:06:37,700 --> 00:06:40,440
My apologies, let's do it one more time.

167
00:06:40,440 --> 00:06:47,103
This is two_thirds minus three_quarters.

168
00:06:47,103 --> 00:06:51,610


169
00:06:51,610 --> 00:06:52,883
I can print that out.

170
00:06:52,883 --> 00:06:56,060


171
00:06:56,060 --> 00:06:59,074
Oh great, exactly what I'd expect.

172
00:06:59,074 --> 00:07:00,490
I've now got the ability to create

173
00:07:00,490 --> 00:07:02,490
new instances of Fractions by doing

174
00:07:02,490 --> 00:07:04,280
arithmetic operations on them.

175
00:07:04,280 --> 00:07:07,160
And notice how plus and minus are overriding,

176
00:07:07,160 --> 00:07:09,470
if you like, the built in versions of those.

177
00:07:09,470 --> 00:07:10,970
And I'm using that in order to be

178
00:07:10,970 --> 00:07:13,530
able to do this in a manner that lets me type things that

179
00:07:13,530 --> 00:07:16,762
make sense, but have things come out the right way.

180
00:07:16,762 --> 00:07:18,220
Last thing I said I wanted to do is

181
00:07:18,220 --> 00:07:22,330
to be able to convert fractions into floats.

182
00:07:22,330 --> 00:07:23,660
And that's easy.

183
00:07:23,660 --> 00:07:26,110
convert would simply take the numerator,

184
00:07:26,110 --> 00:07:28,940
by using the getter for that, take the denominator

185
00:07:28,940 --> 00:07:32,000
by using the getter for that, and just do division.

186
00:07:32,000 --> 00:07:40,460
And so if I ask, for example, to convert second_new-- ah,

187
00:07:40,460 --> 00:07:41,260
I did that wrong.

188
00:07:41,260 --> 00:07:41,980
My apologies.

189
00:07:41,980 --> 00:07:43,521
I'm going to do second_new.convert().

190
00:07:43,521 --> 00:07:47,140


191
00:07:47,140 --> 00:07:50,930
It prints out the floating point representation of those pieces.

192
00:07:50,930 --> 00:07:54,520
Great, it's exactly what I'd like to have.

193
00:07:54,520 --> 00:07:56,925
There are some examples of that, just like we did.

194
00:07:56,925 --> 00:07:59,300
And this is something that's going to give us the ability

195
00:07:59,300 --> 00:08:03,860
now to think about elements of this class and simply use them.

196
00:08:03,860 --> 00:08:05,259
I'm going to do one more example.

197
00:08:05,259 --> 00:08:07,050
But before I do, I want to say another word

198
00:08:07,050 --> 00:08:08,850
about those getters and setters.

199
00:08:08,850 --> 00:08:11,520
Why do I want to create separate getters and setters?

200
00:08:11,520 --> 00:08:14,820
Remember, we said we don't want to directly manipulate

201
00:08:14,820 --> 00:08:16,770
the internal representation of an object.

202
00:08:16,770 --> 00:08:19,310
We'd like to separate the use of the object

203
00:08:19,310 --> 00:08:20,770
from what's inside of it.

204
00:08:20,770 --> 00:08:22,680
And those getters and setters nicely do that.

205
00:08:22,680 --> 00:08:24,990
It says any time I want to access something

206
00:08:24,990 --> 00:08:27,720
inside an object, let me use the method that gets

207
00:08:27,720 --> 00:08:29,422
that part of the object out.

208
00:08:29,422 --> 00:08:30,880
I'm going to come back to that idea

209
00:08:30,880 --> 00:08:32,820
when we do our second example.

210
00:08:32,820 --> 00:08:35,720
And the second example is, suppose we wanted to build

211
00:08:35,720 --> 00:08:38,090
a little collection, a set of integers.

212
00:08:38,090 --> 00:08:39,929
Initially the set's empty.

213
00:08:39,929 --> 00:08:41,600
And I want to have the property of that

214
00:08:41,600 --> 00:08:45,990
set be that an integer appears only once inside the set.

215
00:08:45,990 --> 00:08:49,220
That's what we would call a representational invariant

216
00:08:49,220 --> 00:08:52,340
of this particular object.

217
00:08:52,340 --> 00:08:55,489
And I'm going to enforce that by the way I write the code.

218
00:08:55,489 --> 00:08:57,030
I don't want to have to go and check,

219
00:08:57,030 --> 00:08:59,300
do I have more than one instance inside the object?

220
00:08:59,300 --> 00:09:02,350
I want it to be the case that as I add elements to this set,

221
00:09:02,350 --> 00:09:04,070
I'm always making sure that there's never

222
00:09:04,070 --> 00:09:06,440
more than one particular version of that integer

223
00:09:06,440 --> 00:09:08,530
inside of that set.

224
00:09:08,530 --> 00:09:10,070
I need two pieces.

225
00:09:10,070 --> 00:09:11,850
Data representation, I'm just going

226
00:09:11,850 --> 00:09:14,490
to use a list to store the elements of the set.

227
00:09:14,490 --> 00:09:15,490
And I need an interface.

228
00:09:15,490 --> 00:09:16,900
How do I interact with this?

229
00:09:16,900 --> 00:09:18,650
And for that I'm going to have the ability

230
00:09:18,650 --> 00:09:20,340
to insert an element, the ability

231
00:09:20,340 --> 00:09:22,800
to check if an element is there, and the ability

232
00:09:22,800 --> 00:09:24,390
to remove an element.

233
00:09:24,390 --> 00:09:26,850
And the description is exactly what you'd expect.

234
00:09:26,850 --> 00:09:29,270
insert's going to put that element into the set

235
00:09:29,270 --> 00:09:30,700
if it's not already there.

236
00:09:30,700 --> 00:09:33,390
member will tell me true if in fact an element's

237
00:09:33,390 --> 00:09:34,420
inside the set.

238
00:09:34,420 --> 00:09:36,630
And remove will take the element out of the set

239
00:09:36,630 --> 00:09:39,750
and complain if I try to take something out that wasn't

240
00:09:39,750 --> 00:09:41,860
already inside of the set.

241
00:09:41,860 --> 00:09:43,070
Again, a bunch of words.

242
00:09:43,070 --> 00:09:44,760
Let's do an example.

243
00:09:44,760 --> 00:09:48,954
Here's the definition of the IntegerSet class.

244
00:09:48,954 --> 00:09:51,370
And I'm going to do this a little more quickly because you

245
00:09:51,370 --> 00:09:52,994
should be getting used to these pieces.

246
00:09:52,994 --> 00:09:56,180
I have something that creates instances.

247
00:09:56,180 --> 00:09:59,030
In this case, there is no argument to it other than self

248
00:09:59,030 --> 00:10:01,110
because it starts out as empty, and it's simply

249
00:10:01,110 --> 00:10:04,570
creating an internal binding for the variable vals, which

250
00:10:04,570 --> 00:10:07,180
is going to be in my internal name for the set,

251
00:10:07,180 --> 00:10:09,240
to the empty list.

252
00:10:09,240 --> 00:10:11,650
I can insert things into the set.

253
00:10:11,650 --> 00:10:13,210
And here's where I'm going to enforce

254
00:10:13,210 --> 00:10:15,310
the representational invariant.

255
00:10:15,310 --> 00:10:17,900
I'm going to take advantage of the property of lists.

256
00:10:17,900 --> 00:10:20,070
So when I want to insert a particular element

257
00:10:20,070 --> 00:10:22,270
into an instance of an IntegerSet,

258
00:10:22,270 --> 00:10:26,530
I'm going to first say, is that element inside the list?

259
00:10:26,530 --> 00:10:31,910
And I'm just using that iterable operation on this to use that.

260
00:10:31,910 --> 00:10:35,170
If it isn't, I'm going to append it into the list.

261
00:10:35,170 --> 00:10:37,540
If it is, I'm simply going to skip by because there's

262
00:10:37,540 --> 00:10:39,340
nothing to do.

263
00:10:39,340 --> 00:10:42,910
I want to check if something's inside the list.

264
00:10:42,910 --> 00:10:45,130
Again, I can use the property of a list.

265
00:10:45,130 --> 00:10:50,270
I can simply say, return e in self.vals.

266
00:10:50,270 --> 00:10:52,970
That simply says if e is in that set, that list,

267
00:10:52,970 --> 00:10:55,950
it's going to be true, otherwise false.

268
00:10:55,950 --> 00:10:57,000
What else did I need?

269
00:10:57,000 --> 00:10:59,960
I need to be able to remove an element from a set.

270
00:10:59,960 --> 00:11:03,480
And here I'm going to use that nice property of exceptions.

271
00:11:03,480 --> 00:11:07,350
I'm going to try to simply remove, directly,

272
00:11:07,350 --> 00:11:08,640
something from a list.

273
00:11:08,640 --> 00:11:11,940
I'm using the property of list here, because vals is a list.

274
00:11:11,940 --> 00:11:14,430
Remove is a method associated with list.

275
00:11:14,430 --> 00:11:17,210
And it's going to try to remove the first instance-- should

276
00:11:17,210 --> 00:11:19,880
be the only instance-- the first instance of that variable

277
00:11:19,880 --> 00:11:22,320
e from that list.

278
00:11:22,320 --> 00:11:24,850
If in fact e was not in the list,

279
00:11:24,850 --> 00:11:26,572
it's going to raise an error.

280
00:11:26,572 --> 00:11:28,780
And the exception then is going to come down to here,

281
00:11:28,780 --> 00:11:31,920
and I'm going to raise my own particular error to say,

282
00:11:31,920 --> 00:11:34,630
that particular element was not found.

283
00:11:34,630 --> 00:11:37,760
I'm going to override the underlying ValueError exception

284
00:11:37,760 --> 00:11:38,720
method.

285
00:11:38,720 --> 00:11:42,080
And finally, I'm going to use string

286
00:11:42,080 --> 00:11:45,390
to define how I want to print out the elements of a set.

287
00:11:45,390 --> 00:11:47,920
This is a little funky, but what I'm simply going to do

288
00:11:47,920 --> 00:11:50,820
is take vals, which is a list, and I'm

289
00:11:50,820 --> 00:11:53,850
going to sort it by using the sort method and call it.

290
00:11:53,850 --> 00:11:55,825
And notice I've got three dots here.

291
00:11:55,825 --> 00:11:57,170
It actually makes sense.

292
00:11:57,170 --> 00:11:59,520
It says self gives me the instance.

293
00:11:59,520 --> 00:12:03,520
Dot says look up vals inside of that instance, which

294
00:12:03,520 --> 00:12:05,110
is simply a binding.

295
00:12:05,110 --> 00:12:08,350
And then because vals is a list, the next dot, this one,

296
00:12:08,350 --> 00:12:12,030
says find the method sort associated with lists,

297
00:12:12,030 --> 00:12:15,240
and then apply it by calling it right there.

298
00:12:15,240 --> 00:12:16,850
Once I've sorted it, I'm going to run

299
00:12:16,850 --> 00:12:18,580
through a little loop, where I set result

300
00:12:18,580 --> 00:12:20,240
to be the empty string.

301
00:12:20,240 --> 00:12:23,880
And then for each element in the now sorted version of vals,

302
00:12:23,880 --> 00:12:29,449
I'm going to simply add it in together with a comma.

303
00:12:29,449 --> 00:12:30,990
And then when I'm ready to return it,

304
00:12:30,990 --> 00:12:32,570
I'm going to return a string that has

305
00:12:32,570 --> 00:12:35,170
a curly bracket on each end.

306
00:12:35,170 --> 00:12:37,240
And I got one extra comma hanging around

307
00:12:37,240 --> 00:12:38,770
at the end of the last element.

308
00:12:38,770 --> 00:12:40,960
So I'm going to take result and return everything

309
00:12:40,960 --> 00:12:44,920
but that last element to get rid of that last piece.

310
00:12:44,920 --> 00:12:46,846
And now let's try it out.

311
00:12:46,846 --> 00:12:48,220
I'll show you some examples here,

312
00:12:48,220 --> 00:12:51,050
but I actually want to go over and type them on the machine

313
00:12:51,050 --> 00:12:53,710
so you can see that it does what we would expect.

314
00:12:53,710 --> 00:13:03,120
So I'm going to define s to be an integer set.

315
00:13:03,120 --> 00:13:04,870
And I could print out what s it is,

316
00:13:04,870 --> 00:13:06,900
and it just gives me the two curly braces.

317
00:13:06,900 --> 00:13:08,450
There's nothing there.

318
00:13:08,450 --> 00:13:10,650
Now let's put some pieces inside of s.

319
00:13:10,650 --> 00:13:13,292
I'm going to insert 3 into s.

320
00:13:13,292 --> 00:13:17,680
I'm going to insert 4 into that set.

321
00:13:17,680 --> 00:13:20,380
I'm going to insert 3 again, because I have a short memory

322
00:13:20,380 --> 00:13:22,710
and I've forgotten I've already done that.

323
00:13:22,710 --> 00:13:26,540
And I want to say oh, wait a minute, what does s look like?

324
00:13:26,540 --> 00:13:27,850
Oh, that's nice.

325
00:13:27,850 --> 00:13:30,770
It's just got one version of 3 plus 4.

326
00:13:30,770 --> 00:13:32,180
I go back to what I said earlier.

327
00:13:32,180 --> 00:13:34,760
I'm going to enforce in my implementation

328
00:13:34,760 --> 00:13:37,800
that representational invariant, that an element appears

329
00:13:37,800 --> 00:13:38,325
only once.

330
00:13:38,325 --> 00:13:39,700
And if you look back at the code,

331
00:13:39,700 --> 00:13:42,410
you realize that second insert of 3

332
00:13:42,410 --> 00:13:44,240
would have checked to see is 3 already

333
00:13:44,240 --> 00:13:45,860
in the internal representation?

334
00:13:45,860 --> 00:13:48,240
It is, so I don't add it.

335
00:13:48,240 --> 00:13:50,330
What else could I do?

336
00:13:50,330 --> 00:13:54,020
Well, I could check to see if something's in the list.

337
00:13:54,020 --> 00:14:00,650
So I could say is 3 in the set?

338
00:14:00,650 --> 00:14:02,530
Yes, yes it is.

339
00:14:02,530 --> 00:14:04,980
Is 6 in the set?

340
00:14:04,980 --> 00:14:07,490
Yes, no it isn't.

341
00:14:07,490 --> 00:14:08,830
And that's great.

342
00:14:08,830 --> 00:14:10,310
Notice by the way, on my machine,

343
00:14:10,310 --> 00:14:11,900
whenever I type one of those methods,

344
00:14:11,900 --> 00:14:14,120
it nicely brings up something that tells me

345
00:14:14,120 --> 00:14:16,270
what the docstring associated with it

346
00:14:16,270 --> 00:14:19,117
is, what it expects to do, what are the inputs it's expecting

347
00:14:19,117 --> 00:14:21,450
there, things that are going to help us think about what

348
00:14:21,450 --> 00:14:23,790
do these different methods do.

349
00:14:23,790 --> 00:14:25,552
What else could I do?

350
00:14:25,552 --> 00:14:26,510
I can remove something.

351
00:14:26,510 --> 00:14:29,698
So I can go back to s and say, let's remove 3.

352
00:14:29,698 --> 00:14:32,220


353
00:14:32,220 --> 00:14:33,560
And that did that fine.

354
00:14:33,560 --> 00:14:38,912
And let's get rid of-- sorry, let's add in 6 to that.

355
00:14:38,912 --> 00:14:42,660
And if I look at what s now consists of,

356
00:14:42,660 --> 00:14:45,200
not surprisingly, I've taken out the 3.

357
00:14:45,200 --> 00:14:47,280
I've added in the 6.

358
00:14:47,280 --> 00:14:52,287
I'm simply using those built in methods to manipulate that set.

359
00:14:52,287 --> 00:14:53,620
I could do one other thing here.

360
00:14:53,620 --> 00:14:54,860
And I'm not going to do it on my machine

361
00:14:54,860 --> 00:14:56,860
but simply point out what will happen here.

362
00:14:56,860 --> 00:15:00,980
If I try to remove an element that's not currently

363
00:15:00,980 --> 00:15:04,580
in that instance of the set, it's going to throw an error.

364
00:15:04,580 --> 00:15:07,420
And it's going to print out what I asked it to print out,

365
00:15:07,420 --> 00:15:10,190
which is different from this, the generic exception

366
00:15:10,190 --> 00:15:11,820
that I would raise, because I raised

367
00:15:11,820 --> 00:15:15,560
a specific version of ValueError that said, please print out

368
00:15:15,560 --> 00:15:17,830
that the specific element in the string

369
00:15:17,830 --> 00:15:20,570
not found, telling me what it was that went wrong

370
00:15:20,570 --> 00:15:22,710
when I tried to do all of this.

371
00:15:22,710 --> 00:15:24,510
So there are two examples.

372
00:15:24,510 --> 00:15:27,850
Notice how we define an init method for each of them.

373
00:15:27,850 --> 00:15:29,610
We define a string method for each of them

374
00:15:29,610 --> 00:15:31,568
to tell us how we're going to print things out.

375
00:15:31,568 --> 00:15:34,340
And then I create methods specific to this kind of class

376
00:15:34,340 --> 00:15:38,350
that will let me manipulate instances of that class.

