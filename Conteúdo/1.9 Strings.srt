0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:04,190
So far, we've just been playing with numbers-- names

2
00:00:04,190 --> 00:00:07,250
for numbers but basically just with numbers.

3
00:00:07,250 --> 00:00:10,010
Now we want to add in one more type of object.

4
00:00:10,010 --> 00:00:11,747
We've seen ints, we've seen floats,

5
00:00:11,747 --> 00:00:13,830
we've seen bools, which are ways of getting values

6
00:00:13,830 --> 00:00:16,140
back out of tests.

7
00:00:16,140 --> 00:00:18,830
The next thing we're going to add in is a string.

8
00:00:18,830 --> 00:00:20,529
We'll see a few others as we go along,

9
00:00:20,529 --> 00:00:22,320
but strings are going to be valuable to us.

10
00:00:22,320 --> 00:00:24,060
And what's a string?

11
00:00:24,060 --> 00:00:27,630
A string is simply a sequence of characters-- letters,

12
00:00:27,630 --> 00:00:28,660
special characters.

13
00:00:28,660 --> 00:00:30,730
Could be spaces, could actually be sequences

14
00:00:30,730 --> 00:00:32,509
of characters put together into words,

15
00:00:32,509 --> 00:00:34,430
put together into sentences.

16
00:00:34,430 --> 00:00:38,080
And those are all contained within either double quotation

17
00:00:38,080 --> 00:00:40,550
marks or single quotes.

18
00:00:40,550 --> 00:00:42,470
Let me show you some examples.

19
00:00:42,470 --> 00:00:43,940
I've got some on my slide, but let

20
00:00:43,940 --> 00:00:45,648
me show you some examples with my screen.

21
00:00:45,648 --> 00:00:52,680
I can give the name hi to the string H-E-L-L-O space

22
00:00:52,680 --> 00:00:56,080
T-H-E-R-E double quote.

23
00:00:56,080 --> 00:00:59,310
Those quotes on either end say treat this entire sequence

24
00:00:59,310 --> 00:01:02,100
as literally a sequence of characters.

25
00:01:02,100 --> 00:01:05,319
And if I ask for the value of hi,

26
00:01:05,319 --> 00:01:07,220
it prints it back out, in this case,

27
00:01:07,220 --> 00:01:09,280
with a single quote around it.

28
00:01:09,280 --> 00:01:12,660
As we said, we can either use double quotes or single quotes.

29
00:01:12,660 --> 00:01:13,810
Why?

30
00:01:13,810 --> 00:01:14,830
Partly historical.

31
00:01:14,830 --> 00:01:16,420
One would really work, but a place

32
00:01:16,420 --> 00:01:18,520
where double quotes are handy is if I actually

33
00:01:18,520 --> 00:01:21,760
want to use an apostrophe somewhere in a string.

34
00:01:21,760 --> 00:01:23,590
Because from Python's perspective,

35
00:01:23,590 --> 00:01:25,930
the apostrophe looks like an end of a quote.

36
00:01:25,930 --> 00:01:35,850
And so for example, if I want to say foo is this isn't right,

37
00:01:35,850 --> 00:01:38,500
notice that the single quote does not get interpreted

38
00:01:38,500 --> 00:01:40,160
as the end of a quote.

39
00:01:40,160 --> 00:01:43,670
And I can put out the value of foo.

40
00:01:43,670 --> 00:01:46,610
Once I've got strings, I can put them together.

41
00:01:46,610 --> 00:01:48,600
So for example, I could say I'm going

42
00:01:48,600 --> 00:01:53,940
to give name the value Eric.

43
00:01:53,940 --> 00:01:55,620
I could certainly print out name.

44
00:01:55,620 --> 00:01:57,140
What's its value?

45
00:01:57,140 --> 00:01:58,290
There it is.

46
00:01:58,290 --> 00:02:00,250
But I could also put things together.

47
00:02:00,250 --> 00:02:03,380
And the next expression looks a little unusual.

48
00:02:03,380 --> 00:02:08,800
Greet is hi plus name.

49
00:02:08,800 --> 00:02:15,560
And when I print out greet-- sorry, if I type properly,

50
00:02:15,560 --> 00:02:16,250
it would help.

51
00:02:16,250 --> 00:02:17,250
Print out greet.

52
00:02:17,250 --> 00:02:20,340


53
00:02:20,340 --> 00:02:27,970
It puts the two things together-- hi there and Eric.

54
00:02:27,970 --> 00:02:29,030
Two things going on here.

55
00:02:29,030 --> 00:02:31,440
The first one is-- whoa, little funky

56
00:02:31,440 --> 00:02:33,990
to think about adding strings together.

57
00:02:33,990 --> 00:02:35,720
But just as we can add numbers together,

58
00:02:35,720 --> 00:02:37,840
strings have a natural way of getting combined.

59
00:02:37,840 --> 00:02:40,590
And in this case, it's to concatenate them together,

60
00:02:40,590 --> 00:02:43,560
to literally take the first string, glue the second string

61
00:02:43,560 --> 00:02:47,300
onto the end, that creates a new string, and I can print it out.

62
00:02:47,300 --> 00:02:48,930
But if you look at my computer monitor,

63
00:02:48,930 --> 00:02:50,304
it didn't quite do what I wanted.

64
00:02:50,304 --> 00:02:51,990
It said hello Theric.

65
00:02:51,990 --> 00:02:54,340
I have no idea who Theric is.

66
00:02:54,340 --> 00:02:58,230
I'd really like to have it say hello there, Eric.

67
00:02:58,230 --> 00:03:03,290
And so I can get that by adding in a little blank space.

68
00:03:03,290 --> 00:03:15,900
And so if I type in greeting as hi plus a space plus name,

69
00:03:15,900 --> 00:03:19,620
then the value of greeting is what I wanted-- hello there,

70
00:03:19,620 --> 00:03:20,320
Eric.

71
00:03:20,320 --> 00:03:22,680
Really nice.

72
00:03:22,680 --> 00:03:25,310
Notice concatenation, just as with numbers,

73
00:03:25,310 --> 00:03:26,830
could have multiple things in a row.

74
00:03:26,830 --> 00:03:30,460
So I can concatenate multiple things together as I did here.

75
00:03:30,460 --> 00:03:32,820
What we say when we talk about using addition this way,

76
00:03:32,820 --> 00:03:36,680
by the way, is we say we have overloaded it.

77
00:03:36,680 --> 00:03:41,200
We have had addition apply not only to numbers but now

78
00:03:41,200 --> 00:03:42,680
to strings.

79
00:03:42,680 --> 00:03:43,857
Oh, yeah.

80
00:03:43,857 --> 00:03:45,190
We talked about that earlier on.

81
00:03:45,190 --> 00:03:46,898
Remember when I said in the first lecture

82
00:03:46,898 --> 00:03:50,590
that the type of an argument, the type of an object,

83
00:03:50,590 --> 00:03:54,300
would tell an operation some important information?

84
00:03:54,300 --> 00:03:56,950
Here it does that because it's telling addition,

85
00:03:56,950 --> 00:04:00,290
if the two things are strings, concatenate them.

86
00:04:00,290 --> 00:04:02,670
It's also telling addition, if I give you two numbers,

87
00:04:02,670 --> 00:04:05,450
just add them together using straightforward arithmetic.

88
00:04:05,450 --> 00:04:08,070
So I can use addition in multiple places

89
00:04:08,070 --> 00:04:13,670
to let the type of the object define what's going to happen.

90
00:04:13,670 --> 00:04:15,957
Once I have strings, I need operations on them.

91
00:04:15,957 --> 00:04:17,290
I've already seen the first one.

92
00:04:17,290 --> 00:04:20,100
We can do concatenation, but we can do some other things

93
00:04:20,100 --> 00:04:21,220
with strings.

94
00:04:21,220 --> 00:04:25,130
In particular, we can do successive concatenation.

95
00:04:25,130 --> 00:04:34,750
So if I type three times the string Eric, I get an echo.

96
00:04:34,750 --> 00:04:37,800
Three versions of Eric are stitched together.

97
00:04:37,800 --> 00:04:40,490
So I can successively concatenate things together.

98
00:04:40,490 --> 00:04:41,590
It's kind of nice.

99
00:04:41,590 --> 00:04:43,770
And, again, notice I'm overloading multiplication

100
00:04:43,770 --> 00:04:44,270
here.

101
00:04:44,270 --> 00:04:48,820
I'm saying multiplication of a number times a string is simply

102
00:04:48,820 --> 00:04:50,730
saying give me three versions or n versions,

103
00:04:50,730 --> 00:04:53,800
however many versions of that string put together.

104
00:04:53,800 --> 00:05:00,470
I can ask for the length of a string, and that makes sense.

105
00:05:00,470 --> 00:05:03,340
It tells me how many characters there are in that string.

106
00:05:03,340 --> 00:05:10,090
And that will include, by the way, counting spaces.

107
00:05:10,090 --> 00:05:12,756
So the length of hi there includes the space, not just

108
00:05:12,756 --> 00:05:13,380
the characters.

109
00:05:13,380 --> 00:05:15,171
It tells me how many literal elements there

110
00:05:15,171 --> 00:05:16,960
are inside of it.

111
00:05:16,960 --> 00:05:19,780
Strings have things inside of them.

112
00:05:19,780 --> 00:05:23,140
They're the first version of a non-scalar object,

113
00:05:23,140 --> 00:05:25,480
in that I can get out pieces.

114
00:05:25,480 --> 00:05:28,450
And one of the ways I can do it is say I can index into it.

115
00:05:28,450 --> 00:05:30,970
So if I take the string, Eric, and I

116
00:05:30,970 --> 00:05:36,180
want to get out the first element in square brackets,

117
00:05:36,180 --> 00:05:40,550
I can say give me the first element, and it gives me r.

118
00:05:40,550 --> 00:05:41,642
Wait a minute.

119
00:05:41,642 --> 00:05:42,850
That's not the first element.

120
00:05:42,850 --> 00:05:44,770
The First element's e.

121
00:05:44,770 --> 00:05:49,470
Eh, in Python we have chosen to decide to start

122
00:05:49,470 --> 00:05:51,610
counting starting at 0.

123
00:05:51,610 --> 00:05:54,850
So if I want to get the zeroth element of Eric,

124
00:05:54,850 --> 00:06:00,080
I would say give me the zeroth element, and there it is.

125
00:06:00,080 --> 00:06:04,750
I've already bound name to be Eric so notice, by the way,

126
00:06:04,750 --> 00:06:08,080
I could ask for the zeroth element of name,

127
00:06:08,080 --> 00:06:11,410
and it gives me the zeroth element of the value associated

128
00:06:11,410 --> 00:06:15,410
with name, which pulls back out the e, exactly what I wanted.

129
00:06:15,410 --> 00:06:20,910
If I try and index beyond the length minus 1 of a string,

130
00:06:20,910 --> 00:06:22,380
I'm going to get an error.

131
00:06:22,380 --> 00:06:23,970
And that's because I start at 0.

132
00:06:23,970 --> 00:06:27,740
So even though this is of length 4, if I take the string Eric

133
00:06:27,740 --> 00:06:30,990
and I ask what's the fourth element?

134
00:06:30,990 --> 00:06:33,400
It gives me an error, something called an index error

135
00:06:33,400 --> 00:06:36,640
that says you tried to go too far outside of it.

136
00:06:36,640 --> 00:06:38,000
One last thing about strings.

137
00:06:38,000 --> 00:06:39,708
I can certainly get a single element out.

138
00:06:39,708 --> 00:06:41,590
I might want to get a chunk out of it.

139
00:06:41,590 --> 00:06:45,580
And so I can slice a string apart by giving it a somewhat

140
00:06:45,580 --> 00:06:46,840
funky looking expression.

141
00:06:46,840 --> 00:06:50,020
I take Eric and, again, in those square braces

142
00:06:50,020 --> 00:06:54,770
I give it a starting point, which is 1, and a colon,

143
00:06:54,770 --> 00:06:57,520
and then an ending point, in this case 3,

144
00:06:57,520 --> 00:07:00,870
and it gives me the first and second elements

145
00:07:00,870 --> 00:07:04,056
of the string, r and i.

146
00:07:04,056 --> 00:07:06,430
I can choose to say everything starting at the beginning,

147
00:07:06,430 --> 00:07:08,200
I could use that as a 0, but I can also

148
00:07:08,200 --> 00:07:12,500
do that by saying give Eric with nothing

149
00:07:12,500 --> 00:07:16,540
before the colon and just 3, and it gives me all the elements

150
00:07:16,540 --> 00:07:20,450
up to but not including the element number 3.

151
00:07:20,450 --> 00:07:26,640
And similarly, I could do it by saying take Eric,

152
00:07:26,640 --> 00:07:29,800
give it 1, but nothing after the colon,

153
00:07:29,800 --> 00:07:33,790
and it gives me all the elements starting at element number 1.

154
00:07:33,790 --> 00:07:36,590
And if I just want to make a copy of the whole thing,

155
00:07:36,590 --> 00:07:41,830
I can say open square brace colon close square brace,

156
00:07:41,830 --> 00:07:44,850
and it gives me literally a copy-- not the original--

157
00:07:44,850 --> 00:07:48,110
but a copy of this entire string.

