0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:04,380
So we've seen some quadratic complexity sorting

2
00:00:04,380 --> 00:00:07,230
algorithms-- OK, but not great.

3
00:00:07,230 --> 00:00:10,650
And clearly we'd like to get the sort as efficient as possible.

4
00:00:10,650 --> 00:00:12,480
And fortunately, we already know an idea

5
00:00:12,480 --> 00:00:14,510
that we can use to do that, and that's

6
00:00:14,510 --> 00:00:16,239
to use divide and conquer.

7
00:00:16,239 --> 00:00:18,500
If I could somehow break the problem down

8
00:00:18,500 --> 00:00:21,545
into half size chunks and do work on that,

9
00:00:21,545 --> 00:00:23,510
that would be really great.

10
00:00:23,510 --> 00:00:26,440
And that leads to a great technique called merge sort,

11
00:00:26,440 --> 00:00:28,690
a very common sorting algorithm.

12
00:00:28,690 --> 00:00:31,020
And here is the basic idea of merge sort.

13
00:00:31,020 --> 00:00:34,980
If I got a list of length 0, or length 1, it's already sorted.

14
00:00:34,980 --> 00:00:36,500
I'm done.

15
00:00:36,500 --> 00:00:38,800
If I have a list longer than that,

16
00:00:38,800 --> 00:00:43,040
let's just split the list into 2 parts of roughly equal size,

17
00:00:43,040 --> 00:00:44,850
and sort each of them.

18
00:00:44,850 --> 00:00:47,774
Once I've got them sorted, I'm going to merge them together.

19
00:00:47,774 --> 00:00:49,190
And I'm going to do that, as we'll

20
00:00:49,190 --> 00:00:52,530
see in an example in a second, by taking advantage of the fact

21
00:00:52,530 --> 00:00:54,570
that if I have 2 sorted lists, I can just

22
00:00:54,570 --> 00:00:57,720
look at the first element of each, ask which one is smaller,

23
00:00:57,720 --> 00:00:59,470
and put it into the result, and then

24
00:00:59,470 --> 00:01:01,180
look at the next portion of it.

25
00:01:01,180 --> 00:01:04,129
That's going to be a nice linear time solution.

26
00:01:04,129 --> 00:01:06,790
And so when I do that, once I've got to an empty one of those 2

27
00:01:06,790 --> 00:01:10,050
lists, I just copy the rest of the list, and I'm done.

28
00:01:10,050 --> 00:01:11,370
You can see the idea.

29
00:01:11,370 --> 00:01:13,470
Break it down into smaller and smaller and smaller

30
00:01:13,470 --> 00:01:15,136
sized problems, until I get to something

31
00:01:15,136 --> 00:01:16,560
that's trivially sorted.

32
00:01:16,560 --> 00:01:18,770
And then I'm going to merge those results,

33
00:01:18,770 --> 00:01:21,750
and keep merging those results out, taking advantage

34
00:01:21,750 --> 00:01:25,320
of the fact I'm splitting the problem in half at each stage.

35
00:01:25,320 --> 00:01:28,940
Let's look at a visualization of that to get a sense of that.

36
00:01:28,940 --> 00:01:30,790
Again, it's a nice divide and conquer idea.

37
00:01:30,790 --> 00:01:32,900
So if I've got a big list that's unsorted,

38
00:01:32,900 --> 00:01:34,810
I'm going to split it into half.

39
00:01:34,810 --> 00:01:37,030
If those are still too big and they're unsorted,

40
00:01:37,030 --> 00:01:39,830
I'll keep splitting until I get down to something

41
00:01:39,830 --> 00:01:42,370
where I've just got lists of one element.

42
00:01:42,370 --> 00:01:44,950
Once I'm down at that level, merging

43
00:01:44,950 --> 00:01:46,480
is actually really easy.

44
00:01:46,480 --> 00:01:48,690
I just look at the 2 and decide which one is smaller.

45
00:01:48,690 --> 00:01:52,200
And that gives me lists of size 2 that are sorted.

46
00:01:52,200 --> 00:01:54,490
But now merging those is also pretty easy,

47
00:01:54,490 --> 00:01:56,370
as we'll see in a second, because I'd simply

48
00:01:56,370 --> 00:01:59,470
look at each of the elements in the 2 lists,

49
00:01:59,470 --> 00:02:01,150
putting the smallest one in.

50
00:02:01,150 --> 00:02:02,700
And I merge those.

51
00:02:02,700 --> 00:02:04,130
And then I merge those.

52
00:02:04,130 --> 00:02:06,460
And then I merge those, until I get back to something

53
00:02:06,460 --> 00:02:08,120
that is overall sorted.

54
00:02:08,120 --> 00:02:10,310
Nice divide and conquer algorithm.

55
00:02:10,310 --> 00:02:11,840
Should have a nice complexity.

56
00:02:11,840 --> 00:02:14,090
We're going to look at that in a second.

57
00:02:14,090 --> 00:02:16,450
Before we do, let's again get Professor Guttag

58
00:02:16,450 --> 00:02:18,340
and a set of MIT students to give you

59
00:02:18,340 --> 00:02:21,446
a little visual demonstration of doing merge sort.

60
00:02:21,446 --> 00:02:22,820
And then we'll come back and look

61
00:02:22,820 --> 00:02:26,214
at what's the actual complexity of the algorithm.

62
00:02:26,214 --> 00:02:26,880
[VIDEO PLAYBACK]

63
00:02:26,880 --> 00:02:30,060
So we're about to demonstrate a merge sort.

64
00:02:30,060 --> 00:02:33,290
And we're going to sort this rather Motley collection of MIT

65
00:02:33,290 --> 00:02:36,450
students by height.

66
00:02:36,450 --> 00:02:39,320
So the first thing we need to do is

67
00:02:39,320 --> 00:02:43,120
we're going to ask everyone to split into a group of two.

68
00:02:43,120 --> 00:02:45,540
So you split a little bit.

69
00:02:45,540 --> 00:02:47,250
You two are together.

70
00:02:47,250 --> 00:02:49,030
You two are together.

71
00:02:49,030 --> 00:02:50,930
You two are together.

72
00:02:50,930 --> 00:02:53,870
You two are together, and you are all by yourself.

73
00:02:53,870 --> 00:02:56,030
I'm sorry.

74
00:02:56,030 --> 00:03:00,760
All right, so now let's take the first group.

75
00:03:00,760 --> 00:03:02,500
Take a step down.

76
00:03:02,500 --> 00:03:05,530
And what we do is we sort this group by height,

77
00:03:05,530 --> 00:03:08,250
with the shortest on the left.

78
00:03:08,250 --> 00:03:10,640
And look at this, we don't have to do anything.

79
00:03:10,640 --> 00:03:11,300
Thank you.

80
00:03:11,300 --> 00:03:14,120
Feel free to go back up.

81
00:03:14,120 --> 00:03:17,650
We then sort the next pair, please.

82
00:03:17,650 --> 00:03:20,850
And it looks to me like we need to switch.

83
00:03:20,850 --> 00:03:22,570
All right, take a step back.

84
00:03:22,570 --> 00:03:25,190


85
00:03:25,190 --> 00:03:33,650
Ladies, OK.

86
00:03:33,650 --> 00:03:37,983
Ladies, gentleman, also OK.

87
00:03:37,983 --> 00:03:41,590


88
00:03:41,590 --> 00:03:45,450
And again, OK.

89
00:03:45,450 --> 00:03:49,150
And I think you're in the correct order.

90
00:03:49,150 --> 00:03:54,620
Now what we do is we take these groups and merge the groups.

91
00:03:54,620 --> 00:03:58,260
So let's have these two-- going to sort these groups,

92
00:03:58,260 --> 00:04:01,600
have them step forward.

93
00:04:01,600 --> 00:04:03,490
And now what we're doing is we're

94
00:04:03,490 --> 00:04:07,270
doing a merge of the two sorted groups.

95
00:04:07,270 --> 00:04:10,600
So we start by merging them.

96
00:04:10,600 --> 00:04:13,520
We'll take the leftmost person in this group

97
00:04:13,520 --> 00:04:16,250
and compare her to the first person in this group,

98
00:04:16,250 --> 00:04:18,720
and decide she's still the shortest.

99
00:04:18,720 --> 00:04:19,723
Take a step back.

100
00:04:19,723 --> 00:04:23,440


101
00:04:23,440 --> 00:04:27,290
Now we're going to look at you and say,

102
00:04:27,290 --> 00:04:30,290
you're actually taller than this fellow.

103
00:04:30,290 --> 00:04:32,610
So you now step up there.

104
00:04:32,610 --> 00:04:36,010


105
00:04:36,010 --> 00:04:38,280
And we're good here.

106
00:04:38,280 --> 00:04:39,756
Both of you take a step back.

107
00:04:39,756 --> 00:04:43,040


108
00:04:43,040 --> 00:04:47,270
Now we'll take these two groups and follow the same procedure.

109
00:04:47,270 --> 00:04:49,000
We'll merge them.

110
00:04:49,000 --> 00:04:52,950
Let's see, we'll compare you, the first person in this group,

111
00:04:52,950 --> 00:04:55,280
to the first person in this group.

112
00:04:55,280 --> 00:04:56,490
Now it's a little tricky.

113
00:04:56,490 --> 00:04:58,870
So let's see, the two of you compare.

114
00:04:58,870 --> 00:05:01,910
Let's see, back to back.

115
00:05:01,910 --> 00:05:03,810
We have a winner.

116
00:05:03,810 --> 00:05:05,080
Step back.

117
00:05:05,080 --> 00:05:08,790
And now we need to compare the shortest person in this group

118
00:05:08,790 --> 00:05:11,150
to the shortest person in this group.

119
00:05:11,150 --> 00:05:11,910
We have a winner.

120
00:05:11,910 --> 00:05:14,530
It's you.

121
00:05:14,530 --> 00:05:16,270
I'm sorry.

122
00:05:16,270 --> 00:05:19,840
And now we're OK.

123
00:05:19,840 --> 00:05:20,760
Please step back.

124
00:05:20,760 --> 00:05:24,060


125
00:05:24,060 --> 00:05:28,140
Now we'll have these two groups come forward.

126
00:05:28,140 --> 00:05:30,140
We'll compare the shortest person in this group

127
00:05:30,140 --> 00:05:32,450
to the shortest person in that group.

128
00:05:32,450 --> 00:05:34,827
I actually need you guys to get back to back here.

129
00:05:34,827 --> 00:05:37,350


130
00:05:37,350 --> 00:05:39,880
You are the winner.

131
00:05:39,880 --> 00:05:42,530
And it's pretty clear that the shortest person in this group

132
00:05:42,530 --> 00:05:45,480
is shorter than the shortest person in that group.

133
00:05:45,480 --> 00:05:49,170
So you go there and you step back.

134
00:05:49,170 --> 00:05:51,225
And now we repeat the same process.

135
00:05:51,225 --> 00:06:11,100


136
00:06:11,100 --> 00:06:13,800
And you can see that we have a group of students

137
00:06:13,800 --> 00:06:17,970
sorted in order by height.

138
00:06:17,970 --> 00:06:20,420
[CLAPPING]

139
00:06:20,420 --> 00:06:22,870
[END VIDEO PLAYBACK]

140
00:06:22,870 --> 00:06:25,580
So again, that visualization is, as we just

141
00:06:25,580 --> 00:06:28,110
saw with the students, pretty straightforward.

142
00:06:28,110 --> 00:06:31,930
I'm going to do sub pieces and sort them and then merge them.

143
00:06:31,930 --> 00:06:34,390
And as you see with the visualization

144
00:06:34,390 --> 00:06:37,010
of this algorithm, it starts with smaller pieces,

145
00:06:37,010 --> 00:06:39,140
does a merge sort on those smaller pieces,

146
00:06:39,140 --> 00:06:41,960
and keeps doing that until it can do a merge sort

147
00:06:41,960 --> 00:06:43,740
on the entire element.

148
00:06:43,740 --> 00:06:47,200
And you can also see, even if I get to 2 sublists of 1/2

149
00:06:47,200 --> 00:06:48,980
the size of the problem, the merge

150
00:06:48,980 --> 00:06:50,530
is pretty straightforward to do.

151
00:06:50,530 --> 00:06:51,946
And that's what's going to give us

152
00:06:51,946 --> 00:06:55,650
the power of having a nice complexity to this algorithm.

153
00:06:55,650 --> 00:06:58,490
So let's look at the merging part.

154
00:06:58,490 --> 00:07:01,720
And then we'll look at the subdivision part.

155
00:07:01,720 --> 00:07:05,210
The idea here is if I've got two lists that are sorted,

156
00:07:05,210 --> 00:07:10,140
I want to simply say, look at the first element in each,

157
00:07:10,140 --> 00:07:13,870
that comparison, and put it into the result.

158
00:07:13,870 --> 00:07:15,400
The smallest one goes in.

159
00:07:15,400 --> 00:07:17,874
Having done that, one of the lists is now smaller.

160
00:07:17,874 --> 00:07:20,290
And again, I'm going to look at the first element of each.

161
00:07:20,290 --> 00:07:22,940
In this case, the 2 is going to go into the result,

162
00:07:22,940 --> 00:07:24,760
and the second list has gotten smaller.

163
00:07:24,760 --> 00:07:27,390
And I'll simply keep doing that simple comparison

164
00:07:27,390 --> 00:07:30,070
of the first element of each list, putting the smaller

165
00:07:30,070 --> 00:07:34,360
one into my result, until I get to a stage

166
00:07:34,360 --> 00:07:37,100
where one of the lists is empty, at which case

167
00:07:37,100 --> 00:07:39,610
I simply copy the remainder of the list that's not

168
00:07:39,610 --> 00:07:41,330
empty to the end of the list.

169
00:07:41,330 --> 00:07:42,800
And I'm done.

170
00:07:42,800 --> 00:07:45,910
You can see I might have to take a linear number of steps

171
00:07:45,910 --> 00:07:49,250
in the size of the lists to be able to get to that stage.

172
00:07:49,250 --> 00:07:50,534
But that's still not bad.

173
00:07:50,534 --> 00:07:52,700
And that's going to be nice, because, in many cases,

174
00:07:52,700 --> 00:07:54,670
it will actually be faster if I actually

175
00:07:54,670 --> 00:07:58,610
don't have to look at all the remaining elements of a list.

176
00:07:58,610 --> 00:08:01,520
So merging is going to be pretty straightforward.

177
00:08:01,520 --> 00:08:04,340
So here's the code that would do it.

178
00:08:04,340 --> 00:08:08,920
Merging simply says, given a left and right sublist

179
00:08:08,920 --> 00:08:11,879
that we know are sorted, what am I going to do?

180
00:08:11,879 --> 00:08:13,670
I'm going to set up a result into which I'm

181
00:08:13,670 --> 00:08:15,150
going to store the values.

182
00:08:15,150 --> 00:08:17,962
And I'm going to set up a couple of indices, i and j.

183
00:08:17,962 --> 00:08:21,120
And basically, I'm going to let them walk down the list.

184
00:08:21,120 --> 00:08:23,140
So again, I'm not making copies of the list.

185
00:08:23,140 --> 00:08:25,102
I'm simply looking at the elements.

186
00:08:25,102 --> 00:08:28,450
As long as i is not to the end of the length

187
00:08:28,450 --> 00:08:31,110
of the left sublist, and j is not

188
00:08:31,110 --> 00:08:33,700
to the end of the length of the right sublist,

189
00:08:33,700 --> 00:08:35,929
I'm going to do the comparison.

190
00:08:35,929 --> 00:08:37,659
And if the left one is smaller, I'm

191
00:08:37,659 --> 00:08:39,900
going to add that element into the result.

192
00:08:39,900 --> 00:08:42,120
Again, I know append is constant.

193
00:08:42,120 --> 00:08:44,250
So that's nice.

194
00:08:44,250 --> 00:08:47,010
And I change i, just as I did in my example.

195
00:08:47,010 --> 00:08:50,590
I now move my index in the left list up by 1.

196
00:08:50,590 --> 00:08:53,570
On the other hand, if the right element is smaller,

197
00:08:53,570 --> 00:08:56,690
I add it in, and I change j.

198
00:08:56,690 --> 00:09:00,360
And I'll keep doing that until one of the lists is exhausted.

199
00:09:00,360 --> 00:09:02,100
And then these two cases simply tell

200
00:09:02,100 --> 00:09:04,530
me, in either of those cases, just add

201
00:09:04,530 --> 00:09:06,660
in the remainder of that list.

202
00:09:06,660 --> 00:09:08,720
Great.

203
00:09:08,720 --> 00:09:09,559
What do I know here?

204
00:09:09,559 --> 00:09:11,600
I've got left to right sublists that are ordered.

205
00:09:11,600 --> 00:09:13,980
So I'm just moving the indices for the sublists.

206
00:09:13,980 --> 00:09:15,920
It's avoiding that copy of the list.

207
00:09:15,920 --> 00:09:17,650
And so that cost is basically going

208
00:09:17,650 --> 00:09:20,030
to be linear in the size of the list.

209
00:09:20,030 --> 00:09:21,600
When the right sublist is empty, I

210
00:09:21,600 --> 00:09:23,700
copy the rest of the left sublist.

211
00:09:23,700 --> 00:09:25,350
When the left sublist is empty, I

212
00:09:25,350 --> 00:09:27,930
copy the remaining elements in the right sublist.

213
00:09:27,930 --> 00:09:30,270
And then I just return the result.

214
00:09:30,270 --> 00:09:32,180
What's the complexity here?

215
00:09:32,180 --> 00:09:35,230
I go through two lists, but only one pass.

216
00:09:35,230 --> 00:09:37,280
And I'm only comparing the smallest elements

217
00:09:37,280 --> 00:09:38,410
in each sublist.

218
00:09:38,410 --> 00:09:42,220
So the complexity is basically order of the length of the left

219
00:09:42,220 --> 00:09:44,730
and the length of the right sublist.

220
00:09:44,730 --> 00:09:50,080
Overall, I've got order length of the longer list comparisons,

221
00:09:50,080 --> 00:09:52,260
and so this is always going to be linear

222
00:09:52,260 --> 00:09:54,220
in the length of the lists.

223
00:09:54,220 --> 00:09:56,420
So the merge stage is linear, depending

224
00:09:56,420 --> 00:09:59,210
on how long those lists are.

225
00:09:59,210 --> 00:10:01,840
OK, now how do I put it together?

226
00:10:01,840 --> 00:10:04,190
Knowing I know how to merge, I do

227
00:10:04,190 --> 00:10:06,080
the following for merge sort.

228
00:10:06,080 --> 00:10:10,150
Given a list, I say, if there's only 0 or 1 elements there,

229
00:10:10,150 --> 00:10:11,010
I'm done.

230
00:10:11,010 --> 00:10:15,210
Just return a copy of the list and I'm all set.

231
00:10:15,210 --> 00:10:17,300
Otherwise, there is that nice pattern.

232
00:10:17,300 --> 00:10:18,400
Find the midpoint.

233
00:10:18,400 --> 00:10:19,490
Break this in half.

234
00:10:19,490 --> 00:10:22,010
Find the midpoint by taking the length of the list,

235
00:10:22,010 --> 00:10:24,270
doing an integer divide by 2.

236
00:10:24,270 --> 00:10:30,620
And then simply do a merge sort on half of the list-- that's

237
00:10:30,620 --> 00:10:33,780
the smaller half of the list-- do a merge sort

238
00:10:33,780 --> 00:10:36,390
on the left side of the list, then

239
00:10:36,390 --> 00:10:37,830
the right side of the list.

240
00:10:37,830 --> 00:10:41,670
Once I get those back, simply merge them together,

241
00:10:41,670 --> 00:10:43,120
and I'm done.

242
00:10:43,120 --> 00:10:46,400
So what I'm doing here is treating base case,

243
00:10:46,400 --> 00:10:50,540
dividing the problem in half, solving two sub problems,

244
00:10:50,540 --> 00:10:52,730
and then conquering it with the merge step

245
00:10:52,730 --> 00:10:57,700
to bring it back down-- nice, crisp, elegant solution.

246
00:10:57,700 --> 00:10:59,350
What else do we want to know here?

247
00:10:59,350 --> 00:11:01,486
Well, let's just look at an example

248
00:11:01,486 --> 00:11:02,860
of how we would do this, and then

249
00:11:02,860 --> 00:11:04,770
look at the overall complexity.

250
00:11:04,770 --> 00:11:09,060
So imagine I have a list of 8 elements, as you see up here.

251
00:11:09,060 --> 00:11:11,060
I'm initially going to break them in half,

252
00:11:11,060 --> 00:11:13,930
and I need to go off and do a merge sort of the left half.

253
00:11:13,930 --> 00:11:15,230
Again, I break it in half.

254
00:11:15,230 --> 00:11:17,210
I need to do a merge sort to the left half.

255
00:11:17,210 --> 00:11:20,330
And eventually I get down to actually 2 base cases.

256
00:11:20,330 --> 00:11:23,150
The first base case, the solution I can just pass back,

257
00:11:23,150 --> 00:11:24,360
simply list of one element.

258
00:11:24,360 --> 00:11:25,810
Same thing with the second one.

259
00:11:25,810 --> 00:11:29,150
And I just am doing that merge.

260
00:11:29,150 --> 00:11:32,700
And that gets passed up to the place I wanted to do it.

261
00:11:32,700 --> 00:11:36,400
I do the same thing with the right 1/2, same kind of merge.

262
00:11:36,400 --> 00:11:37,560
That gets passed.

263
00:11:37,560 --> 00:11:40,310
And now I can merge 4 and 8, and 1 and 6

264
00:11:40,310 --> 00:11:42,360
with that simple little linear search

265
00:11:42,360 --> 00:11:44,800
to get out the solution I would like.

266
00:11:44,800 --> 00:11:45,730
Halfway there.

267
00:11:45,730 --> 00:11:47,410
Same thing on the other 1/2.

268
00:11:47,410 --> 00:11:49,580
Having passed that back, I can go to the other half

269
00:11:49,580 --> 00:11:52,590
and very quickly get it down to a base case.

270
00:11:52,590 --> 00:11:54,460
Merge those results.

271
00:11:54,460 --> 00:11:56,090
Get it down to another base case.

272
00:11:56,090 --> 00:11:57,620
Merge those results.

273
00:11:57,620 --> 00:12:01,110
Those 2 get back up and get merged into an unordered list.

274
00:12:01,110 --> 00:12:04,130
And now I can simply merge those 2 sublists

275
00:12:04,130 --> 00:12:07,560
to get out the overall sorted list I wanted.

276
00:12:07,560 --> 00:12:09,110
I show you this diagram because you

277
00:12:09,110 --> 00:12:10,830
can see that a nice pattern.

278
00:12:10,830 --> 00:12:13,410
This is breaking it down in a nice way

279
00:12:13,410 --> 00:12:14,770
into smaller pieces of things.

280
00:12:14,770 --> 00:12:16,620
And you already ought to have a good sense

281
00:12:16,620 --> 00:12:18,760
of what's the complexity here.

282
00:12:18,760 --> 00:12:23,360
The complexity of the overall breaking down into sub pieces

283
00:12:23,360 --> 00:12:25,530
is going to be probably-- and we'll

284
00:12:25,530 --> 00:12:27,920
see in a second-- logarithmic, because I'm

285
00:12:27,920 --> 00:12:31,110
reducing the size of the problem in 1/2 at each point.

286
00:12:31,110 --> 00:12:33,270
The wrinkle here is that the merge we saw

287
00:12:33,270 --> 00:12:35,800
was linear in the size of the problem.

288
00:12:35,800 --> 00:12:38,740
So let's put those two pieces together.

289
00:12:38,740 --> 00:12:41,070
At the first level of recursion, I've

290
00:12:41,070 --> 00:12:43,200
got n over 2 elements in each list.

291
00:12:43,200 --> 00:12:46,220
And so I've got order n plus order n, which

292
00:12:46,220 --> 00:12:49,060
by that additive law of complexity is still order n,

293
00:12:49,060 --> 00:12:50,660
in terms of solving that problem.

294
00:12:50,660 --> 00:12:53,010
Meaning, once I've got the solution,

295
00:12:53,010 --> 00:12:57,300
I've got to do basically linear amount of work to do the merge.

296
00:12:57,300 --> 00:13:01,290
At the second level, I've got n over 4 elements in each list.

297
00:13:01,290 --> 00:13:02,680
And there are 2 merges there.

298
00:13:02,680 --> 00:13:04,460
We saw that in that diagram.

299
00:13:04,460 --> 00:13:07,010
So while the size of the problem is smaller,

300
00:13:07,010 --> 00:13:08,420
I've got twice as many searches.

301
00:13:08,420 --> 00:13:10,320
And if you think about it, I'm still

302
00:13:10,320 --> 00:13:13,960
at that entire second level looking at each of the elements

303
00:13:13,960 --> 00:13:15,100
probably once.

304
00:13:15,100 --> 00:13:17,000
So it's also order n.

305
00:13:17,000 --> 00:13:21,280
At each recursion level, the merge step is order n.

306
00:13:21,280 --> 00:13:24,300
The size of the list is smaller, but I got more of them.

307
00:13:24,300 --> 00:13:27,690
And that basically cancels out I've got a linear search.

308
00:13:27,690 --> 00:13:30,890
The good news is, how many times do I do it?

309
00:13:30,890 --> 00:13:32,210
I've already hinted at it.

310
00:13:32,210 --> 00:13:33,400
You know the answer.

311
00:13:33,400 --> 00:13:36,090
I'm doing a logarithmic number of steps.

312
00:13:36,090 --> 00:13:40,236
Because I'm basically saying, given a problem of size n,

313
00:13:40,236 --> 00:13:42,630
a 1 recursive call is n over 2.

314
00:13:42,630 --> 00:13:45,280
2 recursive calls is n over 4.

315
00:13:45,280 --> 00:13:47,980
At k recursive calls is order n to the k.

316
00:13:47,980 --> 00:13:50,810
I'm done when end n to the k is of size 1.

317
00:13:50,810 --> 00:13:52,640
That's when k is log in.

318
00:13:52,640 --> 00:13:54,390
And this is an example of something

319
00:13:54,390 --> 00:13:58,150
I promised to you earlier, it's order n log n.

320
00:13:58,150 --> 00:13:59,830
Its log linear.

321
00:13:59,830 --> 00:14:02,110
So it's not quite as nice as logarithmic.

322
00:14:02,110 --> 00:14:03,730
It's not quite as nice as linear.

323
00:14:03,730 --> 00:14:06,510
But it's a lot better than quadratic, or certainly

324
00:14:06,510 --> 00:14:07,800
than exponential.

325
00:14:07,800 --> 00:14:11,650
And this is a characteristic of a wide class of problems

326
00:14:11,650 --> 00:14:13,080
that are really nice.

327
00:14:13,080 --> 00:14:17,310
n log n, log linear, great solution.

328
00:14:17,310 --> 00:14:20,070
So what do I have for sorting?

329
00:14:20,070 --> 00:14:22,880
I can be dumb about it and use bogosearch.

330
00:14:22,880 --> 00:14:24,030
Good luck.

331
00:14:24,030 --> 00:14:25,390
I could use bubble sort.

332
00:14:25,390 --> 00:14:27,190
I could the use selection sort.

333
00:14:27,190 --> 00:14:29,440
They both have a similar property

334
00:14:29,440 --> 00:14:31,790
that they are a quadratic in size.

335
00:14:31,790 --> 00:14:35,560
Timing wise, selection sort is probably a little bit faster.

336
00:14:35,560 --> 00:14:37,670
One of the advantages of selection sort

337
00:14:37,670 --> 00:14:41,620
is that I can guarantee that the first i elements are sorted.

338
00:14:41,620 --> 00:14:44,400
So in fact, if I want to stop the computation after I

339
00:14:44,400 --> 00:14:46,680
get some number of the best elements out,

340
00:14:46,680 --> 00:14:49,290
I could do that without having to sort the rest of the list.

341
00:14:49,290 --> 00:14:51,370
And that's better than doing bubble sort.

342
00:14:51,370 --> 00:14:53,910
But my best option is merge sort.

343
00:14:53,910 --> 00:14:55,720
And in fact, while we won't do it here,

344
00:14:55,720 --> 00:15:00,520
one can show that n log n is the fastest time in which one

345
00:15:00,520 --> 00:15:02,340
can actually do a sort.

346
00:15:02,340 --> 00:15:04,280
But having an n end log n sort time

347
00:15:04,280 --> 00:15:08,300
is nice, because if I amortize that cost over searching,

348
00:15:08,300 --> 00:15:11,460
I actually have something that's going to work out quite nicely.

349
00:15:11,460 --> 00:15:13,330
And so now you've seen search.

350
00:15:13,330 --> 00:15:14,440
You've seen sort.

351
00:15:14,440 --> 00:15:16,160
And you've seen a wonderful example

352
00:15:16,160 --> 00:15:18,890
of an elegant class of complexity, which are

353
00:15:18,890 --> 00:15:21,400
those log linear algorithms.

