0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:04,890
Last lecture we introduced classes into our language.

2
00:00:04,890 --> 00:00:06,580
And they're an incredibly powerful tool

3
00:00:06,580 --> 00:00:08,830
to add to what we've been doing.

4
00:00:08,830 --> 00:00:11,160
By analogy, definitions gave us a way

5
00:00:11,160 --> 00:00:14,260
to add our own methods or procedures to our Python

6
00:00:14,260 --> 00:00:15,170
system.

7
00:00:15,170 --> 00:00:18,410
Classes give us our way to add our own data

8
00:00:18,410 --> 00:00:20,100
objects to the system.

9
00:00:20,100 --> 00:00:21,690
And that's really useful.

10
00:00:21,690 --> 00:00:24,290
And whether this is in Python or in any programming language,

11
00:00:24,290 --> 00:00:27,200
that idea of being able to boundary together pieces

12
00:00:27,200 --> 00:00:31,240
of data that naturally co-exist and methods or procedures

13
00:00:31,240 --> 00:00:33,770
or functions specifically designed

14
00:00:33,770 --> 00:00:38,100
to manipulate that data, that idea is really valuable.

15
00:00:38,100 --> 00:00:40,870
As a consequence, even though we've looked at some examples,

16
00:00:40,870 --> 00:00:43,972
today we're going to do an extended example,

17
00:00:43,972 --> 00:00:45,680
looking at the different ways in which we

18
00:00:45,680 --> 00:00:49,580
can use classes to build a hierarchy of a system that

19
00:00:49,580 --> 00:00:53,750
lets us manipulate objects in a variety of ways.

20
00:00:53,750 --> 00:00:55,530
Example we're going to use is to build

21
00:00:55,530 --> 00:00:59,079
a little system that organizes information about people.

22
00:00:59,079 --> 00:01:00,620
And if that's what we're going to do,

23
00:01:00,620 --> 00:01:04,310
an obvious place to start is with a Person object.

24
00:01:04,310 --> 00:01:07,310
Of course I could add lots of different data attributes

25
00:01:07,310 --> 00:01:08,652
to a Person object.

26
00:01:08,652 --> 00:01:10,360
For the sake of just building the system,

27
00:01:10,360 --> 00:01:12,234
we're going to start with some simple things.

28
00:01:12,234 --> 00:01:14,190
So a person is going to have a name.

29
00:01:14,190 --> 00:01:15,710
They're going to have a birthday.

30
00:01:15,710 --> 00:01:18,830
And we want to see things like how can we get out the name,

31
00:01:18,830 --> 00:01:20,540
how can we get out the last name.

32
00:01:20,540 --> 00:01:22,784
Can we sort groups of people?

33
00:01:22,784 --> 00:01:24,200
How do we get the age, things that

34
00:01:24,200 --> 00:01:26,210
let us access the data associated

35
00:01:26,210 --> 00:01:28,850
with instances of this class?

36
00:01:28,850 --> 00:01:31,470
So let's build the class.

37
00:01:31,470 --> 00:01:32,770
Here's the start for it.

38
00:01:32,770 --> 00:01:34,220
As before, we're building a class.

39
00:01:34,220 --> 00:01:35,220
We're calling it Person.

40
00:01:35,220 --> 00:01:39,360
It's going to inherit from the underlying object class,

41
00:01:39,360 --> 00:01:41,740
exactly as we did earlier on when we start building

42
00:01:41,740 --> 00:01:44,660
a system, because object is that underlying basic Python

43
00:01:44,660 --> 00:01:47,780
class that has associated with it standard methods we

44
00:01:47,780 --> 00:01:49,600
want to be able to use.

45
00:01:49,600 --> 00:01:53,000
As before, we need to be able to create instances of this class.

46
00:01:53,000 --> 00:01:56,090
So there's our init method right there.

47
00:01:56,090 --> 00:01:59,542
And it's just going to create a person with a name.

48
00:01:59,542 --> 00:02:01,250
I want to be able to get out information,

49
00:02:01,250 --> 00:02:03,833
so I'm going to be able to get out the last name, for example,

50
00:02:03,833 --> 00:02:05,000
of the person.

51
00:02:05,000 --> 00:02:07,030
And I want to be able to have something

52
00:02:07,030 --> 00:02:08,039
print out appropriately.

53
00:02:08,039 --> 00:02:10,289
And so I'll have a string method, again, one of those

54
00:02:10,289 --> 00:02:11,380
built in methods.

55
00:02:11,380 --> 00:02:15,650
We're now overriding underscore underscore str, followed by two

56
00:02:15,650 --> 00:02:16,210
underscores.

57
00:02:16,210 --> 00:02:19,200
And in this case, when we print out information about a person,

58
00:02:19,200 --> 00:02:21,390
it's just going to print out its name.

59
00:02:21,390 --> 00:02:23,680
The only unusual thing I'm doing here

60
00:02:23,680 --> 00:02:25,430
is I want to get out not only the name,

61
00:02:25,430 --> 00:02:27,660
but the last name of a person.

62
00:02:27,660 --> 00:02:29,350
And I'm going to make the assumption

63
00:02:29,350 --> 00:02:34,350
that the last element in a name is the person's last name.

64
00:02:34,350 --> 00:02:36,590
I can get out that by taking advantage of the fact

65
00:02:36,590 --> 00:02:38,850
that I know a name will be a string.

66
00:02:38,850 --> 00:02:40,670
And using the built in method split

67
00:02:40,670 --> 00:02:43,830
on it, split around spaces will return for me

68
00:02:43,830 --> 00:02:46,640
a list of strings, each one a different portion

69
00:02:46,640 --> 00:02:47,931
of the person's name.

70
00:02:47,931 --> 00:02:50,180
And finally I'm just going to extract the last element

71
00:02:50,180 --> 00:02:53,430
of that, as I said, assuming that the last portion

72
00:02:53,430 --> 00:02:57,540
of that string is the person's last name.

73
00:02:57,540 --> 00:02:58,950
I can build instances of People.

74
00:02:58,950 --> 00:03:00,600
I've got a couple of methods here.

75
00:03:00,600 --> 00:03:04,880
Let me add in a few more methods I'd like to be able to use.

76
00:03:04,880 --> 00:03:07,429
I said I want to give this person a birthday.

77
00:03:07,429 --> 00:03:08,970
Lots of ways I could do that, but I'm

78
00:03:08,970 --> 00:03:13,080
going to do this by importing a library, a module that exists

79
00:03:13,080 --> 00:03:15,200
in Python, called datetime.

80
00:03:15,200 --> 00:03:17,100
And in particular, I'm going to be

81
00:03:17,100 --> 00:03:21,210
able to then say when I give a date of birth to a person

82
00:03:21,210 --> 00:03:25,110
by month, day, and year, datetime will automatically

83
00:03:25,110 --> 00:03:27,290
convert that into an internal representation

84
00:03:27,290 --> 00:03:28,830
that I could use.

85
00:03:28,830 --> 00:03:31,990
Now I didn't tell you what the representation is.

86
00:03:31,990 --> 00:03:34,510
I'm not going to, because you shouldn't care.

87
00:03:34,510 --> 00:03:36,410
All I want to be able to do is to use it.

88
00:03:36,410 --> 00:03:39,460
And in particular, if I want to get the age of a person,

89
00:03:39,460 --> 00:03:41,640
as you can see in the bottom line of the slide,

90
00:03:41,640 --> 00:03:45,810
I will simply take datetime.date.today()

91
00:03:45,810 --> 00:03:46,490
as a method.

92
00:03:46,490 --> 00:03:48,210
It gives me back a representation

93
00:03:48,210 --> 00:03:49,500
for today's date.

94
00:03:49,500 --> 00:03:52,080
I subtract from that the birth date.

95
00:03:52,080 --> 00:03:53,800
And then I can convert that into days.

96
00:03:53,800 --> 00:03:56,020
And it will give me the number of days

97
00:03:56,020 --> 00:03:57,570
since the person was born.

98
00:03:57,570 --> 00:03:59,070
And clearly then I can convert that

99
00:03:59,070 --> 00:04:02,590
into years or other kinds of representations of age.

100
00:04:02,590 --> 00:04:06,020
Key point here, I'm not telling you how it represents things

101
00:04:06,020 --> 00:04:06,890
internally.

102
00:04:06,890 --> 00:04:07,730
You shouldn't care.

103
00:04:07,730 --> 00:04:09,270
You should be able to just use this

104
00:04:09,270 --> 00:04:13,350
using the appropriate interfaces, which I'll do here.

105
00:04:13,350 --> 00:04:18,720
One last method-- I'd like to be able to sort lists of people.

106
00:04:18,720 --> 00:04:20,320
And here I get to make a choice.

107
00:04:20,320 --> 00:04:23,990
Again, I'm defining my version of a built in method called

108
00:04:23,990 --> 00:04:26,900
less than or lt. And I'm going to make the choice

109
00:04:26,900 --> 00:04:28,630
that in general, I'm going to sort people

110
00:04:28,630 --> 00:04:31,960
by their last name, which I've already stored away,

111
00:04:31,960 --> 00:04:34,831
unless they have the same last name, in which case

112
00:04:34,831 --> 00:04:36,830
I'm going to sort them by the entire name, which

113
00:04:36,830 --> 00:04:38,538
in essence will come down to sorting them

114
00:04:38,538 --> 00:04:40,740
by their first name.

115
00:04:40,740 --> 00:04:42,892
There is a definition of a class.

116
00:04:42,892 --> 00:04:44,600
You've seen some of these methods before.

117
00:04:44,600 --> 00:04:47,140
I'm building in something for init to create instances.

118
00:04:47,140 --> 00:04:48,810
I'm building something in for string

119
00:04:48,810 --> 00:04:50,440
to say how I'm going to print them out.

120
00:04:50,440 --> 00:04:52,190
I'm building something in for less than so

121
00:04:52,190 --> 00:04:53,360
I can compare them.

122
00:04:53,360 --> 00:04:56,630
And then I've got some internal data attributes, a name

123
00:04:56,630 --> 00:04:57,680
and a birthday.

124
00:04:57,680 --> 00:04:59,790
And I'm able to access those souls using getters

125
00:04:59,790 --> 00:05:01,830
like get_last_name.

126
00:05:01,830 --> 00:05:04,200
Let's see what happens if we were to use this.

127
00:05:04,200 --> 00:05:07,350
So I'm going to create a little simple database of some people.

128
00:05:07,350 --> 00:05:09,590
Perhaps you recognize some of these names.

129
00:05:09,590 --> 00:05:11,960
And some of them I've given birthdays to, some of them I

130
00:05:11,960 --> 00:05:12,700
haven't.

131
00:05:12,700 --> 00:05:14,650
And I can create a list of those.

132
00:05:14,650 --> 00:05:16,480
So I have on my computer a version

133
00:05:16,480 --> 00:05:18,590
of this file ready to go.

134
00:05:18,590 --> 00:05:19,940
And I load it up.

135
00:05:19,940 --> 00:05:23,220
And I could look, for example, at people in this list.

136
00:05:23,220 --> 00:05:28,690
So I could say printout p1, and it says Mark Zuckerberg.

137
00:05:28,690 --> 00:05:31,340
And that's great, because that was how I defined string

138
00:05:31,340 --> 00:05:33,810
to return things-- good.

139
00:05:33,810 --> 00:05:35,430
So what else might I do with this?

140
00:05:35,430 --> 00:05:39,450
Well, I said I want to be able to sort people in this list.

141
00:05:39,450 --> 00:05:43,080
So we can look at a simple little example of that.

142
00:05:43,080 --> 00:05:47,150
In particular, I could say for every person in the person

143
00:05:47,150 --> 00:05:49,932
list, just print them out, and see what I get out.

144
00:05:49,932 --> 00:05:50,890
And I've shown it here.

145
00:05:50,890 --> 00:05:53,352
Let's check it on my computer to make

146
00:05:53,352 --> 00:05:54,560
sure it does the right thing.

147
00:05:54,560 --> 00:05:57,210
Again, I have loaded in a version of that.

148
00:05:57,210 --> 00:06:02,720
And so I'm going to clear it and reload it.

149
00:06:02,720 --> 00:06:06,110
And when I do that, sure enough it prints it out

150
00:06:06,110 --> 00:06:09,600
in the order in which I created them, which is great.

151
00:06:09,600 --> 00:06:11,490
Now what I'd like to do is say let's sort

152
00:06:11,490 --> 00:06:13,770
them to see if the sorting mechanism works well.

153
00:06:13,770 --> 00:06:15,040
And notice what I do here.

154
00:06:15,040 --> 00:06:18,360
I use the built in list method sort.

155
00:06:18,360 --> 00:06:20,170
So person list is a list.

156
00:06:20,170 --> 00:06:22,410
The dot says from that data type,

157
00:06:22,410 --> 00:06:26,140
get out the thing that's bound to the name sort, which

158
00:06:26,140 --> 00:06:27,440
is a procedure.

159
00:06:27,440 --> 00:06:30,070
And then the open close parens says call or invoke

160
00:06:30,070 --> 00:06:33,551
that procedure, which will sort the list in place, mutating it.

161
00:06:33,551 --> 00:06:35,050
And now I should be able to print it

162
00:06:35,050 --> 00:06:36,770
out and see what it looks like.

163
00:06:36,770 --> 00:06:39,700
And again, I'm going to load that up on my computer.

164
00:06:39,700 --> 00:06:41,850
And I'm going to run it.

165
00:06:41,850 --> 00:06:44,570
And in fact now it has sorted it.

166
00:06:44,570 --> 00:06:49,050
And notice in the case of two people with the same last name,

167
00:06:49,050 --> 00:06:50,690
it has sorted it by the full name,

168
00:06:50,690 --> 00:06:54,160
whereas everywhere else it's simply sorted by last name.

169
00:06:54,160 --> 00:06:55,890
Simple little example that shows that I

170
00:06:55,890 --> 00:07:00,120
can start manipulating elements of this data structure.

171
00:07:00,120 --> 00:07:03,580
Let's see what we do if we build on top of it.

