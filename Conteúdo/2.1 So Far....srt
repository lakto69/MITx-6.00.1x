0
00:00:00,000 --> 00:00:00,680
...

1
00:00:00,680 --> 00:00:03,870
In the last lecture, we added looping variants.

2
00:00:03,870 --> 00:00:05,840
We had for loops, we had while loops,

3
00:00:05,840 --> 00:00:07,550
we had the notion of iteration.

4
00:00:07,550 --> 00:00:10,190
We used that to start generating some examples of guess

5
00:00:10,190 --> 00:00:11,900
and check algorithms.

6
00:00:11,900 --> 00:00:14,290
In this lecture, we're going to go back to that idea

7
00:00:14,290 --> 00:00:15,540
but extend it.

8
00:00:15,540 --> 00:00:17,580
And we're going to add in another kind

9
00:00:17,580 --> 00:00:18,869
of data type, a string.

10
00:00:18,869 --> 00:00:20,660
We talked about it a little bit earlier on,

11
00:00:20,660 --> 00:00:22,201
but we're going to use it to actually

12
00:00:22,201 --> 00:00:24,120
look at ways to generate algorithms

13
00:00:24,120 --> 00:00:27,810
that can start to do some more interesting kinds of things.

14
00:00:27,810 --> 00:00:29,660
Just to review, I want to remind you

15
00:00:29,660 --> 00:00:31,559
what we did inside of loops.

16
00:00:31,559 --> 00:00:33,100
Here's an example of some code that's

17
00:00:33,100 --> 00:00:35,570
going to compute a square root of something.

18
00:00:35,570 --> 00:00:38,400
And it does it by running through a loop.

19
00:00:38,400 --> 00:00:40,570
As we've done before, it's going to set up

20
00:00:40,570 --> 00:00:43,630
an initial value, which it gets here by inputting something

21
00:00:43,630 --> 00:00:45,260
that enters an integer.

22
00:00:45,260 --> 00:00:48,390
And then it's going to run through a little while loop

23
00:00:48,390 --> 00:00:50,240
where it does guess and check.

24
00:00:50,240 --> 00:00:52,250
It keeps trying different versions of answers,

25
00:00:52,250 --> 00:00:55,070
starting at 0, then 1, then 2, going on

26
00:00:55,070 --> 00:00:58,400
until it sees whether that answer squared

27
00:00:58,400 --> 00:01:00,510
is bigger than or equal to x.

28
00:01:00,510 --> 00:01:02,150
Once it gets to that point, it checks

29
00:01:02,150 --> 00:01:04,810
to see if the square is equal to x, in which case

30
00:01:04,810 --> 00:01:07,100
it prints out that it's found the cube root.

31
00:01:07,100 --> 00:01:09,912
And if not, it tells me that it's not a perfect cube.

32
00:01:09,912 --> 00:01:12,370
And just depending on whether it was a positive or negative

33
00:01:12,370 --> 00:01:15,271
thing, it gives me a little bit of additional information.

34
00:01:15,271 --> 00:01:16,520
You can look through the code.

35
00:01:16,520 --> 00:01:17,640
I'm not going to run it.

36
00:01:17,640 --> 00:01:20,530
What I want you to see is that idea of guess and check.

37
00:01:20,530 --> 00:01:24,780
I generate values for answer until I get to a point

38
00:01:24,780 --> 00:01:27,020
where either I'm done and I have the answer

39
00:01:27,020 --> 00:01:28,850
or I've gone too far.

40
00:01:28,850 --> 00:01:30,680
And again, as before, I've got something

41
00:01:30,680 --> 00:01:33,640
where I'm setting up the variable outside,

42
00:01:33,640 --> 00:01:35,230
and I'm changing the variable inside

43
00:01:35,230 --> 00:01:37,594
with a test that depends on it.

44
00:01:37,594 --> 00:01:39,510
We're going to use that idea as we generalize,

45
00:01:39,510 --> 00:01:43,440
but I want to remind you of what loops do.

46
00:01:43,440 --> 00:01:45,910
And as before, I don't need to do that actual version

47
00:01:45,910 --> 00:01:48,490
of answer equal answer plus 1, I could use plus equal

48
00:01:48,490 --> 00:01:50,929
as a variation of it.

49
00:01:50,929 --> 00:01:52,470
We also talked about strings earlier,

50
00:01:52,470 --> 00:01:54,094
and I just want to remind you of those,

51
00:01:54,094 --> 00:01:56,510
because we're going to use them in this lecture as well.

52
00:01:56,510 --> 00:01:59,970
Think of strings as a sequence of characters, in fact,

53
00:01:59,970 --> 00:02:02,940
case-sensitive characters for letters.

54
00:02:02,940 --> 00:02:05,490
It could be lower case or upper case.

55
00:02:05,490 --> 00:02:07,244
As with numbers, I can compare them.

56
00:02:07,244 --> 00:02:09,160
I can say if two strings are equal while using

57
00:02:09,160 --> 00:02:11,850
the double equal sign, I can use greater than or less

58
00:02:11,850 --> 00:02:14,450
than using lexicographic order to decide

59
00:02:14,450 --> 00:02:18,300
if two strings are greater than or less than each other.

60
00:02:18,300 --> 00:02:22,020
Length can give me the number of things in the string

61
00:02:22,020 --> 00:02:24,285
and, as we saw before, we can use square brackets

62
00:02:24,285 --> 00:02:26,190
to do indexing into a string.

63
00:02:26,190 --> 00:02:27,660
We can get the zeroth element.

64
00:02:27,660 --> 00:02:30,110
Remember, it starts at 0, the first element,

65
00:02:30,110 --> 00:02:31,090
the second element.

66
00:02:31,090 --> 00:02:32,600
And if I have a string three long,

67
00:02:32,600 --> 00:02:34,444
and I try and get something three or bigger,

68
00:02:34,444 --> 00:02:35,860
it's going to complain, telling me

69
00:02:35,860 --> 00:02:40,250
that I've tried to access beyond the end of the string.

70
00:02:40,250 --> 00:02:42,640
We also saw slicing in strings.

71
00:02:42,640 --> 00:02:46,150
This lets us go into a string of pull out pieces of the string.

72
00:02:46,150 --> 00:02:50,090
And here we saw we can specify a start point, a stop

73
00:02:50,090 --> 00:02:54,070
point, and how many steps to take as we do the accessing.

74
00:02:54,070 --> 00:02:56,070
And that lets us pull out different elements

75
00:02:56,070 --> 00:02:57,400
out of a string.

76
00:02:57,400 --> 00:02:59,030
One unusual thing we haven't seen

77
00:02:59,030 --> 00:03:01,625
before is if the step is negative 1,

78
00:03:01,625 --> 00:03:05,120
we actually access the string in reverse order.

79
00:03:05,120 --> 00:03:07,070
There it is right there.

80
00:03:07,070 --> 00:03:09,790
Otherwise, if we say for example start with the element 3,

81
00:03:09,790 --> 00:03:11,060
it says 0.

82
00:03:11,060 --> 00:03:12,800
0, 1, 2, 3.

83
00:03:12,800 --> 00:03:16,240
So I start here, and I stop just before the sixth one.

84
00:03:16,240 --> 00:03:18,100
So 3, 4, 5.

85
00:03:18,100 --> 00:03:19,990
I'm going to pull that out, which gives me

86
00:03:19,990 --> 00:03:22,530
the piece that I wanted there.

87
00:03:22,530 --> 00:03:24,720
One last thing about strings is that they are

88
00:03:24,720 --> 00:03:27,210
what we call an immutable type.

89
00:03:27,210 --> 00:03:28,420
You can't change them.

90
00:03:28,420 --> 00:03:30,290
They can't be modified.

91
00:03:30,290 --> 00:03:32,222
And to see that, let me do a little example.

92
00:03:32,222 --> 00:03:34,180
I've shown it on the slide, but let me actually

93
00:03:34,180 --> 00:03:35,295
type it in over here.

94
00:03:35,295 --> 00:03:38,510


95
00:03:38,510 --> 00:03:42,470
I'm going to define the name as to be the string hello.

96
00:03:42,470 --> 00:03:44,940
If I print out s, it gives me back.

97
00:03:44,940 --> 00:03:48,090
If I say what's the type of s, it

98
00:03:48,090 --> 00:03:50,920
tells me that it's a string, which is great.

99
00:03:50,920 --> 00:03:54,750
I can certainly index it by saying

100
00:03:54,750 --> 00:03:57,120
give me the zeroth element of s.

101
00:03:57,120 --> 00:04:01,660
But if I wanted to change the zeroth element of s,

102
00:04:01,660 --> 00:04:05,590
for example, saying I want to have the zeroth element of s

103
00:04:05,590 --> 00:04:09,010
be the character y.

104
00:04:09,010 --> 00:04:10,510
It's going to complain.

105
00:04:10,510 --> 00:04:13,386
I can't go in and change a piece of s.

106
00:04:13,386 --> 00:04:15,510
We're going to see other structures where we can do

107
00:04:15,510 --> 00:04:16,718
that that are called mutable.

108
00:04:16,718 --> 00:04:17,480
Strings are not.

109
00:04:17,480 --> 00:04:22,150
I can't say I want the zeroth element of s to be y.

110
00:04:22,150 --> 00:04:24,420
I can change it, but I have to redefine it.

111
00:04:24,420 --> 00:04:29,970
So I could say let s be the character y plus the rest of s

112
00:04:29,970 --> 00:04:33,376
starting at 1.

113
00:04:33,376 --> 00:04:35,750
And I could, in fact, say until I get to the length of s,

114
00:04:35,750 --> 00:04:38,750
or I can just say 1 all the way onto the end.

115
00:04:38,750 --> 00:04:44,670
And now if I look at s, it's yellow, misspelled for yellow.

116
00:04:44,670 --> 00:04:47,920
Point is, I've now changed the definition for s.

117
00:04:47,920 --> 00:04:49,870
So I can't change it individually,

118
00:04:49,870 --> 00:04:51,200
I have to redefine s.

119
00:04:51,200 --> 00:04:54,584
And that's why I say strings are immutable.

120
00:04:54,584 --> 00:04:56,250
One of the things I would suggest to you

121
00:04:56,250 --> 00:04:59,760
is if you're not sure what a command does, look it up or try

122
00:04:59,760 --> 00:05:00,499
it out yourself.

123
00:05:00,499 --> 00:05:03,040
That will give you a sense of the different things you can do

124
00:05:03,040 --> 00:05:06,200
with strings as you move along.

125
00:05:06,200 --> 00:05:10,240
And here, just to remind you, s was initially bound to hello.

126
00:05:10,240 --> 00:05:13,460
When I do the last call, I'm changing that binding

127
00:05:13,460 --> 00:05:16,040
and redefining it to be a changed

128
00:05:16,040 --> 00:05:17,500
new version of a string.

129
00:05:17,500 --> 00:05:19,737
The original string is still stuck in memory.

130
00:05:19,737 --> 00:05:20,820
It's just floating around.

131
00:05:20,820 --> 00:05:24,290
I can't access it anymore.

132
00:05:24,290 --> 00:05:27,010
Finally, remember for loops, the quick recap.

133
00:05:27,010 --> 00:05:29,010
We have that idea of having a loop variable that

134
00:05:29,010 --> 00:05:31,100
iterates over a set of values.

135
00:05:31,100 --> 00:05:34,300
And we can either do that with simple things

136
00:05:34,300 --> 00:05:37,840
like the range shown here, which is going to go from 0 up to 4,

137
00:05:37,840 --> 00:05:42,239
but I could also do it starting at 4, going up to 8.

138
00:05:42,239 --> 00:05:43,780
Expressions inside the loop are going

139
00:05:43,780 --> 00:05:47,070
to be executed for each value of the variable that I use.

140
00:05:47,070 --> 00:05:50,270
And so range is a nice way to iterate over numbers,

141
00:05:50,270 --> 00:05:53,180
but a loop, a for loop variable, can iterate over any set

142
00:05:53,180 --> 00:05:55,730
of values, not just numbers.

143
00:05:55,730 --> 00:06:00,550
And so for example, I could loop over strings.

144
00:06:00,550 --> 00:06:02,100
That sounds kind of neat.

145
00:06:02,100 --> 00:06:03,770
So here's a simple little piece of code.

146
00:06:03,770 --> 00:06:06,850
I've defined s to be a string, the first set of letters

147
00:06:06,850 --> 00:06:08,090
in the alphabet.

148
00:06:08,090 --> 00:06:09,650
And I can now write a for loop that

149
00:06:09,650 --> 00:06:15,685
says loop for the index over the range of the length of s.

150
00:06:15,685 --> 00:06:16,810
Boy, that's a lot of words.

151
00:06:16,810 --> 00:06:18,260
Let's say it a little bit better.

152
00:06:18,260 --> 00:06:21,110
It says, I'm going to see how long is s,

153
00:06:21,110 --> 00:06:24,305
and then I'm going to use range to generate the integers from 0

154
00:06:24,305 --> 00:06:26,920
up to the length of s minus 1.

155
00:06:26,920 --> 00:06:28,600
I'm going to call that index, and then

156
00:06:28,600 --> 00:06:30,100
I could run through a loop that says

157
00:06:30,100 --> 00:06:34,340
if the element of s at that point is either an i or a u,

158
00:06:34,340 --> 00:06:36,730
I'm going to print out a little piece of information.

159
00:06:36,730 --> 00:06:38,120
No big deal.

160
00:06:38,120 --> 00:06:41,310
That just looks like a normal loop over integers.

161
00:06:41,310 --> 00:06:43,870
But I could also write it this way.

162
00:06:43,870 --> 00:06:48,266
I could say loop for character in s.

163
00:06:48,266 --> 00:06:52,180
And that's kind of cool. s is something we call an iterable.

164
00:06:52,180 --> 00:06:54,290
It says I can actually write a loop that

165
00:06:54,290 --> 00:06:57,350
lets characters start with the first element of s,

166
00:06:57,350 --> 00:06:58,810
and then the second element of s,

167
00:06:58,810 --> 00:07:02,620
and then the third element of s, doing the same kind of test

168
00:07:02,620 --> 00:07:04,009
as I move along.

169
00:07:04,009 --> 00:07:05,550
And it will do this until it runs out

170
00:07:05,550 --> 00:07:09,920
of characters in s, in which case it will exit from the loop

171
00:07:09,920 --> 00:07:12,580
and move on to other kinds of things.

172
00:07:12,580 --> 00:07:14,820
That second piece of code is much cleaner.

173
00:07:14,820 --> 00:07:16,270
It's easier to see what I'm doing.

174
00:07:16,270 --> 00:07:17,920
I'm looping for all the characters

175
00:07:17,920 --> 00:07:20,010
in a string as opposed to saying I'm

176
00:07:20,010 --> 00:07:24,020
looping for an index over all the indices into the string.

177
00:07:24,020 --> 00:07:27,450
And that's one of the nice things about both strings

178
00:07:27,450 --> 00:07:29,000
and especially about loops.

179
00:07:29,000 --> 00:07:30,920
I can iterate over anything where

180
00:07:30,920 --> 00:07:33,170
I can successively enumerate each

181
00:07:33,170 --> 00:07:35,360
of the elements of that piece.

182
00:07:35,360 --> 00:07:37,100
So now I've got strings as something

183
00:07:37,100 --> 00:07:41,940
which I can use as parts of loops, and that's really nice.

184
00:07:41,940 --> 00:07:45,630
Let me give you one last example, sort of a fun example.

185
00:07:45,630 --> 00:07:50,460
I'm going to set up a little loop that is going to run over

186
00:07:50,460 --> 00:07:53,340
basically a set of words.

187
00:07:53,340 --> 00:07:55,090
And what is it going to do inside of here?

188
00:07:55,090 --> 00:07:57,030
I've got a little while loop here

189
00:07:57,030 --> 00:08:00,835
that says as long as-- sorry, rephrase that.

190
00:08:00,835 --> 00:08:04,136
I'm going to input a word based on some input I give there.

191
00:08:04,136 --> 00:08:05,510
And what it's going to do is it's

192
00:08:05,510 --> 00:08:08,610
going to loop over all of the things inside of the word,

193
00:08:08,610 --> 00:08:12,130
basically saying if the character in the word

194
00:08:12,130 --> 00:08:15,810
is in a special set of characters,

195
00:08:15,810 --> 00:08:17,930
I'm going to print out something based on that.

196
00:08:17,930 --> 00:08:20,280
If it's not, I'm going to print out something different

197
00:08:20,280 --> 00:08:21,505
based on that.

198
00:08:21,505 --> 00:08:24,130
And then I'm going to increment i, and I'm going to keep going.

199
00:08:24,130 --> 00:08:26,540
So, again, it's a while loop, but I'm using the character

200
00:08:26,540 --> 00:08:28,830
inside there to loop over particular elements

201
00:08:28,830 --> 00:08:30,330
of a string.

202
00:08:30,330 --> 00:08:32,340
Let's see what this does.

203
00:08:32,340 --> 00:08:34,012
So here's the code.

204
00:08:34,012 --> 00:08:36,447
And if I load it into my environment,

205
00:08:36,447 --> 00:08:37,780
says I'm going to cheer for you.

206
00:08:37,780 --> 00:08:38,539
Give me a word.

207
00:08:38,539 --> 00:08:42,190
So we'll give it the best word I know,

208
00:08:42,190 --> 00:08:47,740
which is-- let me just get it over here-- which is MIT.

209
00:08:47,740 --> 00:08:50,430
And it says how enthusiastic are you about MIT?

210
00:08:50,430 --> 00:08:52,800
Well, I like MIT a lot, so I'm going to give it a 10

211
00:08:52,800 --> 00:08:54,060
out of 10.

212
00:08:54,060 --> 00:08:56,460
And it says-- I'm not going to repeat it all,

213
00:08:56,460 --> 00:08:58,920
but give me an M, M. Give me an I,

214
00:08:58,920 --> 00:09:02,010
I. Give me a T, T What does that spell?

215
00:09:02,010 --> 00:09:03,950
And it prints it all out.

216
00:09:03,950 --> 00:09:04,660
All right.

217
00:09:04,660 --> 00:09:06,630
It's a lame example, but you know what?

218
00:09:06,630 --> 00:09:07,450
I'm from MIT.

219
00:09:07,450 --> 00:09:08,380
I like it.

220
00:09:08,380 --> 00:09:10,860
What I want you to see is how I'm

221
00:09:10,860 --> 00:09:15,970
looping over, especially here, in this place right in here.

222
00:09:15,970 --> 00:09:19,190
I'm using the loop over a set of strings

223
00:09:19,190 --> 00:09:22,300
in order to be able to decide what I'm going to do.

224
00:09:22,300 --> 00:09:23,590
And why am I doing that?

225
00:09:23,590 --> 00:09:25,850
Because if it's something that is a vowel,

226
00:09:25,850 --> 00:09:28,260
I don't want to say give me a A. I want to say give me

227
00:09:28,260 --> 00:09:31,090
an A. If it's something like an M that we pronounce that way,

228
00:09:31,090 --> 00:09:34,010
I want to say give me an M, whereas in the other cases,

229
00:09:34,010 --> 00:09:38,580
I want to say just give me a C, give me a D. OK.

230
00:09:38,580 --> 00:09:39,740
Cute example.

231
00:09:39,740 --> 00:09:43,230
Key point, I've now got two different loops going on here.

232
00:09:43,230 --> 00:09:44,880
The outer one is walking through each

233
00:09:44,880 --> 00:09:46,210
of the elements of the word.

234
00:09:46,210 --> 00:09:47,924
That's this one right here.

235
00:09:47,924 --> 00:09:49,590
And that's just doing the standard thing

236
00:09:49,590 --> 00:09:54,350
where I've set an iteration variable outside right there.

237
00:09:54,350 --> 00:09:57,090
I'm changing it inside the loop, but in the loop

238
00:09:57,090 --> 00:09:59,180
I've got another one, which is right here where

239
00:09:59,180 --> 00:10:02,580
I'm looping over all of the elements of a string.

240
00:10:02,580 --> 00:10:05,830
I can do it either way, and that works out really well.

241
00:10:05,830 --> 00:10:09,505
On that cheery note, we're going to move on to another topic.

242
00:10:09,505 --> 00:10:10,004


