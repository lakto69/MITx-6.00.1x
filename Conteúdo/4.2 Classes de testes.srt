0
00:00:00,000 --> 00:00:00,500
...

1
00:00:00,500 --> 00:00:02,110
Once you've written your code, you're

2
00:00:02,110 --> 00:00:04,570
ready to start testing and debugging.

3
00:00:04,570 --> 00:00:06,290
And one of the things you want to do

4
00:00:06,290 --> 00:00:09,660
is to set yourself up so that that testing and debugging is

5
00:00:09,660 --> 00:00:11,470
going to be easy to do.

6
00:00:11,470 --> 00:00:13,490
And there's a set of very general guidelines

7
00:00:13,490 --> 00:00:15,400
that you could think about here.

8
00:00:15,400 --> 00:00:18,040
First of all, design your code so that it easily

9
00:00:18,040 --> 00:00:20,140
supports testing and debugging.

10
00:00:20,140 --> 00:00:22,770
And that means doing things like breaking the program up

11
00:00:22,770 --> 00:00:25,710
into simple modules, self-contained modules, that

12
00:00:25,710 --> 00:00:29,420
can be easily tested and debugged individually.

13
00:00:29,420 --> 00:00:31,120
Second thing you want to do, is make

14
00:00:31,120 --> 00:00:33,810
sure you write those document constraints, those doc strings

15
00:00:33,810 --> 00:00:34,880
on the modules.

16
00:00:34,880 --> 00:00:36,840
What did you expect the input to be?

17
00:00:36,840 --> 00:00:38,800
What did you expect the output to be?

18
00:00:38,800 --> 00:00:40,720
That's going to give you information that's

19
00:00:40,720 --> 00:00:43,426
going to help you design both testing

20
00:00:43,426 --> 00:00:45,300
and debugging, because you know what you want

21
00:00:45,300 --> 00:00:47,110
to look at in terms of test cases

22
00:00:47,110 --> 00:00:49,790
that make sure the module's behaving the way you expected

23
00:00:49,790 --> 00:00:51,120
it to.

24
00:00:51,120 --> 00:00:55,644
Third, document the assumptions you made about code design.

25
00:00:55,644 --> 00:00:58,060
What was your thinking process when you created this code?

26
00:00:58,060 --> 00:00:59,476
What were the assumptions that you

27
00:00:59,476 --> 00:01:01,050
were making that let this code be

28
00:01:01,050 --> 00:01:02,670
built in this particular way?

29
00:01:02,670 --> 00:01:04,340
Because that's also going to guide

30
00:01:04,340 --> 00:01:06,450
the creation of a particular test cases

31
00:01:06,450 --> 00:01:08,826
to make sure that your assumptions are in fact valid,

32
00:01:08,826 --> 00:01:10,700
or that the code is being entered in a manner

33
00:01:10,700 --> 00:01:13,780
that supports those assumptions.

34
00:01:13,780 --> 00:01:15,010
These are obvious statements.

35
00:01:15,010 --> 00:01:16,720
These are things that you can sort of say, of course,

36
00:01:16,720 --> 00:01:17,470
I want to do them.

37
00:01:17,470 --> 00:01:19,120
And in some sense, they are examples

38
00:01:19,120 --> 00:01:21,260
of a motherhood and apple pie approach

39
00:01:21,260 --> 00:01:22,990
to testing and debugging.

40
00:01:22,990 --> 00:01:24,590
I use that phrase because it refers

41
00:01:24,590 --> 00:01:28,440
to something that is so clear cut, obvious to do,

42
00:01:28,440 --> 00:01:30,130
that you would never question it.

43
00:01:30,130 --> 00:01:32,520
And I raise it because unfortunately many programmers

44
00:01:32,520 --> 00:01:33,330
don't do this.

45
00:01:33,330 --> 00:01:34,830
They think it's so obvious that they

46
00:01:34,830 --> 00:01:36,900
don't bother to write the document constraints.

47
00:01:36,900 --> 00:01:38,810
They don't bother to document the assumptions

48
00:01:38,810 --> 00:01:40,130
that they want to use in here.

49
00:01:40,130 --> 00:01:43,227
And I encourage you to get into the habit of doing that now,

50
00:01:43,227 --> 00:01:45,810
because it's going to make it so much easier for you to write,

51
00:01:45,810 --> 00:01:49,870
and test, and debug code as you go forward.

52
00:01:49,870 --> 00:01:52,960
So once you've actually written your code,

53
00:01:52,960 --> 00:01:54,530
when are you ready to test?

54
00:01:54,530 --> 00:01:56,030
Well, the first thing you want to do

55
00:01:56,030 --> 00:01:57,962
is ensure that the code actually runs,

56
00:01:57,962 --> 00:01:59,170
kind of an obvious statement.

57
00:01:59,170 --> 00:02:00,670
But that, especially in Python, will

58
00:02:00,670 --> 00:02:02,410
let you remove syntax errors.

59
00:02:02,410 --> 00:02:04,450
It will catch them before you can go.

60
00:02:04,450 --> 00:02:06,510
And it will typically allow you to remove

61
00:02:06,510 --> 00:02:09,440
most of the static semantic errors, things

62
00:02:09,440 --> 00:02:12,322
that simply don't form a well-formed expression.

63
00:02:12,322 --> 00:02:13,780
Again, Python interpreter is pretty

64
00:02:13,780 --> 00:02:15,770
good at finding most of those for you.

65
00:02:15,770 --> 00:02:18,510
Once you know your code runs, the second thing to do

66
00:02:18,510 --> 00:02:21,040
is to write a list of expected results.

67
00:02:21,040 --> 00:02:23,240
Create a set of inputs, and for each one,

68
00:02:23,240 --> 00:02:24,990
what you expect the result to be,

69
00:02:24,990 --> 00:02:26,774
so that when you run the code, you

70
00:02:26,774 --> 00:02:28,190
can spot the places where it isn't

71
00:02:28,190 --> 00:02:31,400
doing the right kind of thing.

72
00:02:31,400 --> 00:02:34,020
Having put that together, there's a set of tests

73
00:02:34,020 --> 00:02:35,950
that you want to run, and those fall

74
00:02:35,950 --> 00:02:38,270
into two different categories.

75
00:02:38,270 --> 00:02:40,730
The first one is what we call unit testing.

76
00:02:40,730 --> 00:02:43,150
The idea is take each module, each function

77
00:02:43,150 --> 00:02:45,640
in your collection, and test it.

78
00:02:45,640 --> 00:02:48,500
Validate it to make sure that it's doing the right thing,

79
00:02:48,500 --> 00:02:49,830
doing it properly.

80
00:02:49,830 --> 00:02:52,520
Test each function separately.

81
00:02:52,520 --> 00:02:54,533
Once you've done that, what you're

82
00:02:54,533 --> 00:02:57,180
going to want to do as well, is go back and retest.

83
00:02:57,180 --> 00:02:59,430
And what I mean by that is the following.

84
00:02:59,430 --> 00:03:02,710
If you're testing a function, you may find a bug.

85
00:03:02,710 --> 00:03:06,290
Having found it you correct it, and you think, OK, I'm set.

86
00:03:06,290 --> 00:03:07,650
Let me move on.

87
00:03:07,650 --> 00:03:09,270
But in fact, in the correction, you

88
00:03:09,270 --> 00:03:11,070
may have introduced something else.

89
00:03:11,070 --> 00:03:13,580
Or even if you corrected a first bug in a second bug,

90
00:03:13,580 --> 00:03:15,500
the correction to the second bug may

91
00:03:15,500 --> 00:03:17,850
have re-introduced a problem with the thing that

92
00:03:17,850 --> 00:03:19,440
was causing the first bug.

93
00:03:19,440 --> 00:03:22,790
So do what is called regression testing, in which you go back

94
00:03:22,790 --> 00:03:25,400
around and catch re-introduced errors

95
00:03:25,400 --> 00:03:29,930
that were fixed previously, by after each fix, testing again

96
00:03:29,930 --> 00:03:31,570
the same unit.

97
00:03:31,570 --> 00:03:34,450
And then finally, do what we call integration testing, which

98
00:03:34,450 --> 00:03:36,250
is having debugged each of the pieces,

99
00:03:36,250 --> 00:03:39,070
now you need to make sure that they hand off information

100
00:03:39,070 --> 00:03:40,380
correctly to each other.

101
00:03:40,380 --> 00:03:43,900
And so test the entire overall program.

102
00:03:43,900 --> 00:03:47,790
Many people, unfortunately, do this last point.

103
00:03:47,790 --> 00:03:50,490
They're in a hurry, so they just run all of the code

104
00:03:50,490 --> 00:03:51,920
and they get a bug.

105
00:03:51,920 --> 00:03:53,970
And then they go, oh my goodness, where is it?

106
00:03:53,970 --> 00:03:56,110
So don't rush to do the integration testing.

107
00:03:56,110 --> 00:03:58,840
Make sure that you've done the unit testing, and especially

108
00:03:58,840 --> 00:04:01,440
the regression testing, so that you know all of the units

109
00:04:01,440 --> 00:04:04,560
work well before you do the integration testing.

110
00:04:04,560 --> 00:04:06,310
And finally, what you're going to discover

111
00:04:06,310 --> 00:04:08,540
is, after you've done regression testing,

112
00:04:08,540 --> 00:04:10,880
you're going to want to go back and do unit testing.

113
00:04:10,880 --> 00:04:12,630
And after you've done integration testing,

114
00:04:12,630 --> 00:04:14,450
you'll discover that something wasn't working,

115
00:04:14,450 --> 00:04:16,930
and you're going to have to go back again and redo the unit

116
00:04:16,930 --> 00:04:17,594
testing.

117
00:04:17,594 --> 00:04:19,010
But eventually you're going to get

118
00:04:19,010 --> 00:04:22,980
code that does what you wanted.

119
00:04:22,980 --> 00:04:24,654
How do you do the testing?

120
00:04:24,654 --> 00:04:26,070
Well, there are a couple of things

121
00:04:26,070 --> 00:04:27,400
that we want to suggest here.

122
00:04:27,400 --> 00:04:29,270
The first one is to use your intuition

123
00:04:29,270 --> 00:04:32,440
about natural boundaries in the problem.

124
00:04:32,440 --> 00:04:35,660
For example, I've got a little function here which is testing,

125
00:04:35,660 --> 00:04:37,130
is x bigger than y?

126
00:04:37,130 --> 00:04:39,680
And I've simply said, I'm going to assume x and y are ints.

127
00:04:39,680 --> 00:04:43,470
I'm going to retune true if y is less than x, otherwise false.

128
00:04:43,470 --> 00:04:45,880
I want to think about, where are some natural places

129
00:04:45,880 --> 00:04:46,730
to test that?

130
00:04:46,730 --> 00:04:48,450
Where are places in the numbers that

131
00:04:48,450 --> 00:04:50,950
are going to be natural things to look at?

132
00:04:50,950 --> 00:04:52,670
If there is no natural partition,

133
00:04:52,670 --> 00:04:54,160
I'll come back to that in a second,

134
00:04:54,160 --> 00:04:55,590
you might just do random testing,

135
00:04:55,590 --> 00:04:57,670
just pick things at random.

136
00:04:57,670 --> 00:04:59,600
And the probability that the code is correct

137
00:04:59,600 --> 00:05:03,170
increases with the more tests you can run.

138
00:05:03,170 --> 00:05:06,160
Those are certainly possible ways of dealing with it.

139
00:05:06,160 --> 00:05:07,670
But sometimes, a better way to do it

140
00:05:07,670 --> 00:05:11,960
is to do what we call black box testing and glass box testing.

141
00:05:11,960 --> 00:05:17,320
Black box testing explores all the paths

142
00:05:17,320 --> 00:05:19,880
through the specification of the code.

143
00:05:19,880 --> 00:05:23,530
And glass box testing explorers actually all of the paths

144
00:05:23,530 --> 00:05:25,510
through the code itself.

145
00:05:25,510 --> 00:05:28,300
So let's look at both of those.

146
00:05:28,300 --> 00:05:29,890
Black box testing.

147
00:05:29,890 --> 00:05:34,650
I've got a docs string for a procedure here, square root.

148
00:05:34,650 --> 00:05:36,680
It assumes x and epsilon are floats.

149
00:05:36,680 --> 00:05:39,290
x is greater than or equal to 0, epsilon's greater than 0,

150
00:05:39,290 --> 00:05:41,130
and it's going to return the results such

151
00:05:41,130 --> 00:05:46,310
that, the result squared is between x and x minus epsilon

152
00:05:46,310 --> 00:05:47,805
and x plus epsilon.

153
00:05:47,805 --> 00:05:50,790
In black box testing I never look at the code.

154
00:05:50,790 --> 00:05:52,380
I just look at the spec.

155
00:05:52,380 --> 00:05:54,300
And in fact it could be done by somebody other

156
00:05:54,300 --> 00:05:56,674
than the implementer, which is sometimes nice because you

157
00:05:56,674 --> 00:05:59,600
avoid implicit biases that you might have had in doing

158
00:05:59,600 --> 00:06:02,020
the creation of the code.

159
00:06:02,020 --> 00:06:05,730
The testing can be re-used, if the implementation changes it.

160
00:06:05,730 --> 00:06:07,966
And what I want to do is think about all--

161
00:06:07,966 --> 00:06:09,590
what are the test cases that would deal

162
00:06:09,590 --> 00:06:11,423
with all the different ways in which I might

163
00:06:11,423 --> 00:06:13,300
go through this specification?

164
00:06:13,300 --> 00:06:15,500
Are there natural places to it?

165
00:06:15,500 --> 00:06:17,400
For example, if I've got a procedure that's

166
00:06:17,400 --> 00:06:20,390
operating on lists, I'd like to do it on an empty list,

167
00:06:20,390 --> 00:06:23,002
on a list of 1, on a list of many.

168
00:06:23,002 --> 00:06:24,960
If I'm doing something that deals with numbers,

169
00:06:24,960 --> 00:06:27,852
I might want to do it on small numbers and large numbers.

170
00:06:27,852 --> 00:06:29,310
And I'm going to ask, as I've said,

171
00:06:29,310 --> 00:06:31,351
and I'm going to show you an example in a second,

172
00:06:31,351 --> 00:06:33,710
are there natural places, natural boundaries,

173
00:06:33,710 --> 00:06:37,826
in the inputs that I'd like to look at?

174
00:06:37,826 --> 00:06:39,200
So for example, with square root.

175
00:06:39,200 --> 00:06:42,397
Here are some examples of cases I'd like to deal with.

176
00:06:42,397 --> 00:06:43,980
First of all, I certainly want to look

177
00:06:43,980 --> 00:06:47,220
at x equals 0, because that's one of the boundary conditions

178
00:06:47,220 --> 00:06:47,720
here.

179
00:06:47,720 --> 00:06:52,330
So I'll do that with x equals 0 and a small epsilon.

180
00:06:52,330 --> 00:06:55,220
I might also want to look at a perfect square,

181
00:06:55,220 --> 00:06:57,085
because as I know, squares that are-- sorry,

182
00:06:57,085 --> 00:06:58,460
numbers that are perfect squares,

183
00:06:58,460 --> 00:07:00,980
my code might do something different on them than it will

184
00:07:00,980 --> 00:07:02,790
do on other kinds of things.

185
00:07:02,790 --> 00:07:05,410
I might want to pick a number less than 1.

186
00:07:05,410 --> 00:07:07,970
I know with squares, square root behaves differently

187
00:07:07,970 --> 00:07:11,674
when it's a fraction than it does when it's a larger number.

188
00:07:11,674 --> 00:07:13,090
And I might want to take something

189
00:07:13,090 --> 00:07:16,360
where I know that the answer is not a perfect square.

190
00:07:16,360 --> 00:07:19,020
There's an irrational square root in it.

191
00:07:19,020 --> 00:07:21,960
I've just picked four boundary conditions that are nice.

192
00:07:21,960 --> 00:07:25,090
Another set of things I might do is just look at extremes.

193
00:07:25,090 --> 00:07:28,880
What happens when I have a reasonable number, and a really

194
00:07:28,880 --> 00:07:30,860
large epsilon?

195
00:07:30,860 --> 00:07:32,930
What happens when I have a really large number?

196
00:07:32,930 --> 00:07:36,020
Sorry, a really small number, or a really large number,

197
00:07:36,020 --> 00:07:37,850
and a really large epsilon?

198
00:07:37,850 --> 00:07:39,560
And same thing the other direction,

199
00:07:39,560 --> 00:07:41,697
with a really small-- sorry I did that wrong.

200
00:07:41,697 --> 00:07:43,030
These are really small epsilons.

201
00:07:43,030 --> 00:07:44,010
I apologize.

202
00:07:44,010 --> 00:07:46,280
Those are really large epsilons.

203
00:07:46,280 --> 00:07:49,000
These are all examples of extreme versions of cases

204
00:07:49,000 --> 00:07:51,330
that I could use as I'm doing black box testing.

205
00:07:51,330 --> 00:07:54,100


206
00:07:54,100 --> 00:07:58,550
Glass box testing is looking at inside this black box.

207
00:07:58,550 --> 00:08:00,440
It's looking at the code itself.

208
00:08:00,440 --> 00:08:04,880
And it uses the code directly to guide the design of test cases.

209
00:08:04,880 --> 00:08:07,350
Ideally, I would want to have a different test

210
00:08:07,350 --> 00:08:11,040
case for each different path through the code.

211
00:08:11,040 --> 00:08:12,710
And when I say different path, if this

212
00:08:12,710 --> 00:08:13,970
is something that has branches, I

213
00:08:13,970 --> 00:08:15,595
want to make sure that I have something

214
00:08:15,595 --> 00:08:18,550
that tests each possible branch of the code.

215
00:08:18,550 --> 00:08:21,820
We'll say that a glass box test suite is path complete

216
00:08:21,820 --> 00:08:23,920
if every potential path through the code

217
00:08:23,920 --> 00:08:26,449
is tested at least once.

218
00:08:26,449 --> 00:08:27,990
Part of the problem here is sometimes

219
00:08:27,990 --> 00:08:29,240
I can't always guarantee that.

220
00:08:29,240 --> 00:08:30,750
If this is a recursive function that

221
00:08:30,750 --> 00:08:34,309
can have arbitrary arguments to it, I can't guarantee it.

222
00:08:34,309 --> 00:08:37,659
And so I have to be willing to settle for testing most

223
00:08:37,659 --> 00:08:39,960
but maybe not all of the paths.

224
00:08:39,960 --> 00:08:43,610
So that's one drawback to this, and I might miss some paths.

225
00:08:43,610 --> 00:08:46,177
Again guidelines here are to look for branches,

226
00:08:46,177 --> 00:08:47,760
and make sure that I take each branch,

227
00:08:47,760 --> 00:08:50,080
if there's an explicit branch inside of it.

228
00:08:50,080 --> 00:08:51,500
If I've got a four loop in there,

229
00:08:51,500 --> 00:08:53,360
I want to have a test case where I don't actually

230
00:08:53,360 --> 00:08:54,170
go into the loop.

231
00:08:54,170 --> 00:08:57,410
Or where I go through the body of the loop exactly once,

232
00:08:57,410 --> 00:08:58,840
or more than once.

233
00:08:58,840 --> 00:09:00,590
Same thing for a while loops.

234
00:09:00,590 --> 00:09:03,050
Look for cases that catch all the different ways

235
00:09:03,050 --> 00:09:04,594
to execute out of the loop.

236
00:09:04,594 --> 00:09:06,010
And this is going to give me a way

237
00:09:06,010 --> 00:09:08,350
to try and figure out different ways to test as many

238
00:09:08,350 --> 00:09:10,140
of the paths through the loop-- sorry,

239
00:09:10,140 --> 00:09:13,980
through the code as I possibly can.

240
00:09:13,980 --> 00:09:16,030
So here's an example of glass box testing.

241
00:09:16,030 --> 00:09:17,530
I've got a little thing that's going

242
00:09:17,530 --> 00:09:19,500
to compute absolute value, and it basically

243
00:09:19,500 --> 00:09:24,160
is going to return minus x of s if x is less than minus 1

244
00:09:24,160 --> 00:09:26,810
and return x otherwise.

245
00:09:26,810 --> 00:09:28,410
One of the problems with path complete

246
00:09:28,410 --> 00:09:30,200
is I could actually miss a bug.

247
00:09:30,200 --> 00:09:32,440
And I'll show you an example.

248
00:09:32,440 --> 00:09:33,790
Here are two cases.

249
00:09:33,790 --> 00:09:35,540
2n minus 2.

250
00:09:35,540 --> 00:09:38,060
It's path complete, in that one of them

251
00:09:38,060 --> 00:09:40,670
is going to take this path, and one of them's

252
00:09:40,670 --> 00:09:42,400
going to take that path.

253
00:09:42,400 --> 00:09:45,410
But it's going to miss a bug, because abs of minus 1

254
00:09:45,410 --> 00:09:48,330
incorrectly returns minus 1 in this case.

255
00:09:48,330 --> 00:09:51,660
And so I should still look for boundary conditions, which

256
00:09:51,660 --> 00:09:54,470
I would have gotten by thinking about what is happening right

257
00:09:54,470 --> 00:09:57,210
there, in order to make sure I test all of the possible ways

258
00:09:57,210 --> 00:09:59,350
through the code.

