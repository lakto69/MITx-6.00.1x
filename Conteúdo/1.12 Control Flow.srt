0
00:00:00,000 --> 00:00:00,510
...

1
00:00:00,510 --> 00:00:02,220
With these new data types in mind,

2
00:00:02,220 --> 00:00:05,630
strings, with some of the other pieces we've added in,

3
00:00:05,630 --> 00:00:07,660
let's go back and just remind ourselves

4
00:00:07,660 --> 00:00:10,640
about branching programs so that we can build on that to start

5
00:00:10,640 --> 00:00:12,690
creating iterative programs.

6
00:00:12,690 --> 00:00:15,310
So just to remind you, what's a branching program?

7
00:00:15,310 --> 00:00:18,960
It's something where I have a conditional that I test.

8
00:00:18,960 --> 00:00:21,756
If that test returns the Boolean value true,

9
00:00:21,756 --> 00:00:23,630
then I have a block of code I'm going to run.

10
00:00:23,630 --> 00:00:25,494
If it returns the Boolean value false,

11
00:00:25,494 --> 00:00:27,410
I've got something different I'm going to run.

12
00:00:27,410 --> 00:00:30,290
And I'm going to simply take either this branch

13
00:00:30,290 --> 00:00:34,390
or that branch and pick up the remainder of the code.

14
00:00:34,390 --> 00:00:37,550
We've already seen a simple version of that with an IF.

15
00:00:37,550 --> 00:00:39,800
To do the testing, we had comparisons,

16
00:00:39,800 --> 00:00:41,960
things like comparisons on ints and floats.

17
00:00:41,960 --> 00:00:43,830
These are simple numerical things.

18
00:00:43,830 --> 00:00:47,040
I will simply remind you again the double equal checks

19
00:00:47,040 --> 00:00:50,300
equality, equal sign does not.

20
00:00:50,300 --> 00:00:53,860
And we had logical operations to put things together.

21
00:00:53,860 --> 00:00:55,950
With that in mind, we could start then

22
00:00:55,950 --> 00:00:58,830
building the simplest of the branching code, which

23
00:00:58,830 --> 00:01:02,700
were either IF statements, which says if this condition is true,

24
00:01:02,700 --> 00:01:04,519
execute a set of code.

25
00:01:04,519 --> 00:01:08,290
And IF ELSE, which said if this condition is true do this,

26
00:01:08,290 --> 00:01:09,700
otherwise do that.

27
00:01:09,700 --> 00:01:12,920
Or the more general, IF ELIF ELSE,

28
00:01:12,920 --> 00:01:16,510
which says if this condition is true, do this.

29
00:01:16,510 --> 00:01:19,420
If it's false, check to see if this condition is true,

30
00:01:19,420 --> 00:01:20,790
in which case do this.

31
00:01:20,790 --> 00:01:23,180
And keep doing that until I get through all of the ELIF

32
00:01:23,180 --> 00:01:25,720
clauses, and if all of the conditions are false,

33
00:01:25,720 --> 00:01:29,027
pick up the ELSE clause and do the rest of that.

34
00:01:29,027 --> 00:01:31,110
It's just repeating what we've done before, things

35
00:01:31,110 --> 00:01:32,970
that you've already seen.

36
00:01:32,970 --> 00:01:35,090
With that though, I'm still stuck

37
00:01:35,090 --> 00:01:38,899
with things that can only flow through code once.

38
00:01:38,899 --> 00:01:40,690
I can take different branches to get there,

39
00:01:40,690 --> 00:01:43,330
but I can't go back and do something again.

40
00:01:43,330 --> 00:01:46,140
And let's think about where that might actually not

41
00:01:46,140 --> 00:01:48,110
help the way I'd like.

42
00:01:48,110 --> 00:01:52,020
As I said, simple branching programs just make choices.

43
00:01:52,020 --> 00:01:53,930
Sometimes though I might want to do something

44
00:01:53,930 --> 00:01:55,720
over and over and over again.

45
00:01:55,720 --> 00:01:58,160
How would I do that?

46
00:01:58,160 --> 00:02:01,240
Well, imagine you're writing a simple little video game.

47
00:02:01,240 --> 00:02:02,980
And part of that game has a character

48
00:02:02,980 --> 00:02:04,870
that gets lost in some woods.

49
00:02:04,870 --> 00:02:06,790
And I agree the graphics here aren't great,

50
00:02:06,790 --> 00:02:07,800
but you get the idea.

51
00:02:07,800 --> 00:02:09,875
I'm stuck in a set of woods.

52
00:02:09,875 --> 00:02:13,129
What I'd like to do is to say to the character, if you go right,

53
00:02:13,129 --> 00:02:14,920
you're going to get back to the same place.

54
00:02:14,920 --> 00:02:17,320
You're going to be stuck in the same piece of the woods.

55
00:02:17,320 --> 00:02:19,530
How would I write that as code?

56
00:02:19,530 --> 00:02:22,560
Well, you could say, gee, I could have an IF statement that

57
00:02:22,560 --> 00:02:27,220
says if I'm told to go right, here's

58
00:02:27,220 --> 00:02:31,150
a set of things I want to do, otherwise if I go left,

59
00:02:31,150 --> 00:02:32,950
I'll get out of there.

60
00:02:32,950 --> 00:02:34,212
OK?

61
00:02:34,212 --> 00:02:36,670
But I want this to be something that if I keep going right,

62
00:02:36,670 --> 00:02:38,820
I keep getting stuck in the same spot.

63
00:02:38,820 --> 00:02:39,320
All right.

64
00:02:39,320 --> 00:02:40,746
You say, gee, that's easy.

65
00:02:40,746 --> 00:02:42,120
I could have another IF statement

66
00:02:42,120 --> 00:02:46,420
that says if the command is still exit right, do something.

67
00:02:46,420 --> 00:02:47,940
On the other hand, if I exit left,

68
00:02:47,940 --> 00:02:50,022
I'll get out of the woods.

69
00:02:50,022 --> 00:02:51,480
But I didn't want to do that again.

70
00:02:51,480 --> 00:02:55,280
If I'm going right, I want to keep doing it.

71
00:02:55,280 --> 00:02:57,110
You can see the problem.

72
00:02:57,110 --> 00:02:59,580
I want to be in literally an infinite loop

73
00:02:59,580 --> 00:03:02,950
in this little video game that says if I'm going right,

74
00:03:02,950 --> 00:03:05,780
I'm always coming back to the same spot.

75
00:03:05,780 --> 00:03:08,420
How would I write code to do that?

76
00:03:08,420 --> 00:03:11,190
Well, I could say I'm going to assume that a character doesn't

77
00:03:11,190 --> 00:03:13,320
push go right more than 100 times,

78
00:03:13,320 --> 00:03:17,230
and I could write literally a big loop here-- not a loop,

79
00:03:17,230 --> 00:03:20,550
sorry-- a big sequence of IFs that was 100 deep.

80
00:03:20,550 --> 00:03:22,450
But maybe somebody is really persistent,

81
00:03:22,450 --> 00:03:24,299
and they want to do it 1,000 times.

82
00:03:24,299 --> 00:03:25,340
You could see my problem.

83
00:03:25,340 --> 00:03:28,450
I don't want to write code when I have an indeterminate number

84
00:03:28,450 --> 00:03:30,989
of things that I want to do.

85
00:03:30,989 --> 00:03:32,780
I need a different way of controlling this,

86
00:03:32,780 --> 00:03:34,710
and I have that.

87
00:03:34,710 --> 00:03:36,921
It's called a while loop.

88
00:03:36,921 --> 00:03:38,420
We're going to look at it in detail,

89
00:03:38,420 --> 00:03:42,940
but the idea is that I'm going to say here's

90
00:03:42,940 --> 00:03:45,080
a check, a condition.

91
00:03:45,080 --> 00:03:48,060
If it's true, I'm going to do this,

92
00:03:48,060 --> 00:03:51,900
and I'm going to go back around and do it again.

93
00:03:51,900 --> 00:03:55,050
And I'll keep looping around and around on this while

94
00:03:55,050 --> 00:03:58,940
until this condition is false, in which case

95
00:03:58,940 --> 00:04:02,280
I'll jump out and do the next kind of thing.

96
00:04:02,280 --> 00:04:04,570
And that says, no matter how many times I go right,

97
00:04:04,570 --> 00:04:07,550
I'll always be in that loop until I finally go left

98
00:04:07,550 --> 00:04:09,700
and break out of it.

99
00:04:09,700 --> 00:04:13,530
So I can control the flow.

100
00:04:13,530 --> 00:04:15,560
Now, for the first time, not just

101
00:04:15,560 --> 00:04:21,810
in a linear way with something that lets me check conditions.

102
00:04:21,810 --> 00:04:24,520
And so the format of a while loop is very simple.

103
00:04:24,520 --> 00:04:26,660
There's the while expression.

104
00:04:26,660 --> 00:04:30,050
There's a test that's going to return a Boolean value,

105
00:04:30,050 --> 00:04:33,900
either true or false, and then with indentation

106
00:04:33,900 --> 00:04:36,670
a set of expressions I'm going to evaluate.

107
00:04:36,670 --> 00:04:39,440
And the performance of this is exactly what I just described.

108
00:04:39,440 --> 00:04:41,260
If the condition is true, I'm going

109
00:04:41,260 --> 00:04:43,730
to do all the steps inside that code block.

110
00:04:43,730 --> 00:04:45,750
I'm going to go back up and check the condition.

111
00:04:45,750 --> 00:04:47,370
And I'll keep going through that loop

112
00:04:47,370 --> 00:04:51,870
until the condition finally comes out as false.

113
00:04:51,870 --> 00:04:52,370
All right.

114
00:04:52,370 --> 00:04:54,453
How might I use that to do something a little more

115
00:04:54,453 --> 00:04:57,120
interesting than trying to get out of the woods?

116
00:04:57,120 --> 00:04:59,330
Well, first of all, let's fix the woods.

117
00:04:59,330 --> 00:05:02,910
Here's a nice little piece of code that will do that for me.

118
00:05:02,910 --> 00:05:07,690
The first one says input based on this prompt,

119
00:05:07,690 --> 00:05:08,980
an instruction, left or right.

120
00:05:08,980 --> 00:05:12,700
So n's going to be either the word left or the word right.

121
00:05:12,700 --> 00:05:14,150
Notice what the while loop says.

122
00:05:14,150 --> 00:05:18,010
It says, if n is equal to the string right,

123
00:05:18,010 --> 00:05:20,460
then I'm going to execute this block of code,

124
00:05:20,460 --> 00:05:22,990
which simply again says you're in the lost forest.

125
00:05:22,990 --> 00:05:24,810
Go left to right.

126
00:05:24,810 --> 00:05:27,070
And notice what that while loop will now do.

127
00:05:27,070 --> 00:05:29,680
As long as n is equal to right, it

128
00:05:29,680 --> 00:05:32,320
will keep prompting me, asking for an input, until I

129
00:05:32,320 --> 00:05:36,440
finally type in left, at which case, this will be false,

130
00:05:36,440 --> 00:05:40,249
and I'll jump down and pick up the print statement.

131
00:05:40,249 --> 00:05:42,290
I can have an indeterminate number of times here.

132
00:05:42,290 --> 00:05:44,570
It's still always going to do the same thing.

133
00:05:44,570 --> 00:05:46,230
A little brain damaged, but it's still

134
00:05:46,230 --> 00:05:47,396
going to do the right thing.

135
00:05:47,396 --> 00:05:50,190
And that's kind of nice.

136
00:05:50,190 --> 00:05:52,440
Now, let's see how we might use this then

137
00:05:52,440 --> 00:05:53,760
in other kinds of things.

138
00:05:53,760 --> 00:05:56,640
So here's a while loop.

139
00:05:56,640 --> 00:05:58,940
And notice what I need to do inside a while loop.

140
00:05:58,940 --> 00:06:04,060
I need to set up a variable outside so that I can test it

141
00:06:04,060 --> 00:06:05,510
and then do some pieces.

142
00:06:05,510 --> 00:06:08,300
And I need inside to have something that actually changes

143
00:06:08,300 --> 00:06:10,100
that variable, otherwise I'm never

144
00:06:10,100 --> 00:06:11,569
going to get out of the loop.

145
00:06:11,569 --> 00:06:12,860
Now, we can see what this does.

146
00:06:12,860 --> 00:06:16,080
If I type this into my Python shell,

147
00:06:16,080 --> 00:06:19,530
I can set n equal to 0, which is done.

148
00:06:19,530 --> 00:06:27,390
And then I can say while n is less than 5 colon,

149
00:06:27,390 --> 00:06:33,780
I'm going to print out n, and I'm going to set n to n plus 1.

150
00:06:33,780 --> 00:06:38,360


151
00:06:38,360 --> 00:06:39,300
Cool.

152
00:06:39,300 --> 00:06:41,040
It just did what I'd expected.

153
00:06:41,040 --> 00:06:42,630
It starts out with n equal to 0.

154
00:06:42,630 --> 00:06:44,150
Is 0 less than 5?

155
00:06:44,150 --> 00:06:44,730
You bet.

156
00:06:44,730 --> 00:06:48,460
So it prints out n, changes n by 1, goes back around

157
00:06:48,460 --> 00:06:49,670
and checks again.

158
00:06:49,670 --> 00:06:50,790
Is 1 less than 5?

159
00:06:50,790 --> 00:06:51,470
You bet.

160
00:06:51,470 --> 00:06:53,440
And you get the idea.

161
00:06:53,440 --> 00:06:56,592
That pattern is something that we would use pretty regularly.

162
00:06:56,592 --> 00:06:59,730
That pattern is also slightly annoying,

163
00:06:59,730 --> 00:07:04,030
because what if I forget to set n equal to 0 before I start?

164
00:07:04,030 --> 00:07:06,460
I'm either going to get an error, because n isn't bound

165
00:07:06,460 --> 00:07:09,320
to anything, or I'm going to get a performance I don't expect,

166
00:07:09,320 --> 00:07:12,290
because n has got some value I didn't expect.

167
00:07:12,290 --> 00:07:15,880
Similarly, what if I forget to increment?

168
00:07:15,880 --> 00:07:19,190
I set n equal to 0, and I say while n is less than 5,

169
00:07:19,190 --> 00:07:20,430
print n.

170
00:07:20,430 --> 00:07:23,070
Well, I'm going to print out 0 a billion times

171
00:07:23,070 --> 00:07:24,960
until I finally stop the machine,

172
00:07:24,960 --> 00:07:26,840
because I haven't incremented.

173
00:07:26,840 --> 00:07:29,620
So it turns out there's another form that we're

174
00:07:29,620 --> 00:07:32,220
going to use that is much more convenient,

175
00:07:32,220 --> 00:07:34,930
and that's called a for loop.

176
00:07:34,930 --> 00:07:37,720
And the for loop has a particular syntax.

177
00:07:37,720 --> 00:07:40,260
It has a variable.

178
00:07:40,260 --> 00:07:43,082
It has the key word in in this case,

179
00:07:43,082 --> 00:07:45,290
and then it has something we're going to come back to

180
00:07:45,290 --> 00:07:47,670
in a second, but an expression.

181
00:07:47,670 --> 00:07:49,970
And what for does in this case is

182
00:07:49,970 --> 00:07:52,570
it is going to work through all of the values

183
00:07:52,570 --> 00:07:55,310
returned by that expression one at a time,

184
00:07:55,310 --> 00:07:58,350
executing the body of the code.

185
00:07:58,350 --> 00:08:00,300
Now, range is something that returns

186
00:08:00,300 --> 00:08:03,890
basically a sequence of integers starting at 0

187
00:08:03,890 --> 00:08:05,720
and ending before 5.

188
00:08:05,720 --> 00:08:07,496
0, 1, 2 3, 4.

189
00:08:07,496 --> 00:08:09,370
It actually does something a little different

190
00:08:09,370 --> 00:08:10,510
we're going to talk about later in the course,

191
00:08:10,510 --> 00:08:12,880
but think of it for now as giving us the collection

192
00:08:12,880 --> 00:08:15,160
of integers 0 up through 4.

193
00:08:15,160 --> 00:08:16,710
And so if I go over here and type it,

194
00:08:16,710 --> 00:08:25,460
I say for n in range of 0 to 5, print out n.

195
00:08:25,460 --> 00:08:29,040
I get the same behavior, but this code is easier to see.

196
00:08:29,040 --> 00:08:34,330
It says for n in this sequence, do something.

197
00:08:34,330 --> 00:08:37,270
As we said, range gives us back, in essence, the integers

198
00:08:37,270 --> 00:08:38,274
0 up through 4.

199
00:08:38,274 --> 00:08:39,940
We'll see some other variations on range

200
00:08:39,940 --> 00:08:42,530
shortly in terms of other ways in which we control it.

201
00:08:42,530 --> 00:08:45,090
But the for loop gives us a nice way

202
00:08:45,090 --> 00:08:49,420
to capture easily an iteration, a repeating of code

203
00:08:49,420 --> 00:08:52,340
some number of times based on, in this case,

204
00:08:52,340 --> 00:08:55,500
a specific number, although I could also base it on a test.

205
00:08:55,500 --> 00:08:58,960


206
00:08:58,960 --> 00:09:01,840
Just to recapture this then, the overall general

207
00:09:01,840 --> 00:09:03,600
format for a for.

208
00:09:03,600 --> 00:09:06,380
The special character in, in this case using

209
00:09:06,380 --> 00:09:09,620
range to get me out a set of numbers and a body of code

210
00:09:09,620 --> 00:09:11,370
that I'm going to execute.

211
00:09:11,370 --> 00:09:13,130
And just to remind you again it says,

212
00:09:13,130 --> 00:09:14,630
each time through the loop, variable

213
00:09:14,630 --> 00:09:15,750
is going to take a value.

214
00:09:15,750 --> 00:09:18,980
The first time it starts at the smallest value in range.

215
00:09:18,980 --> 00:09:21,760
The next time it gets the next value, in this case, for range

216
00:09:21,760 --> 00:09:25,420
added by 1 and so on.

217
00:09:25,420 --> 00:09:28,872
Now, I can actually be a little more clever about range,

218
00:09:28,872 --> 00:09:31,330
because maybe I don't want to do every value in that range.

219
00:09:31,330 --> 00:09:32,970
Maybe I want to skip some of them.

220
00:09:32,970 --> 00:09:35,420
So, in fact, I have something that

221
00:09:35,420 --> 00:09:39,236
says I can start at a different point than 0

222
00:09:39,236 --> 00:09:40,360
if I give it two arguments.

223
00:09:40,360 --> 00:09:43,300
In this case, it will give me the range of numbers from 7

224
00:09:43,300 --> 00:09:48,590
up to but not including 10, or I can give it three arguments.

225
00:09:48,590 --> 00:09:53,755
Start at 5, end when I get up to or past 11, but do it by 2.

226
00:09:53,755 --> 00:09:56,539
And in each case, I'm going to get a different range out.

227
00:09:56,539 --> 00:09:57,830
So let's look at what those do.

228
00:09:57,830 --> 00:10:02,960
If I go over here and say my sum is 0,

229
00:10:02,960 --> 00:10:08,800
and then I'm going to say for i in the range 7 to 10,

230
00:10:08,800 --> 00:10:15,260
I'm going to increment my sum by i.

231
00:10:15,260 --> 00:10:21,360
And then if I print out my sum, I

232
00:10:21,360 --> 00:10:24,470
get 7, 8, and 9 added together, which

233
00:10:24,470 --> 00:10:27,870
gives me out the thing I would expect to see.

234
00:10:27,870 --> 00:10:31,910
If I do the second one, my sum again

235
00:10:31,910 --> 00:10:38,890
starts out as 0, and for i in the range 5 to 11 by 2,

236
00:10:38,890 --> 00:10:43,480
this should be 5, 7, 9, but not 11.

237
00:10:43,480 --> 00:10:45,310
And, again, I'm going to say my sum I'm

238
00:10:45,310 --> 00:10:49,100
going to increment by i, and remember plus equal says

239
00:10:49,100 --> 00:10:52,120
add to my sum the value of i.

240
00:10:52,120 --> 00:10:55,540
And I print out my sum.

241
00:10:55,540 --> 00:10:58,470
I get 21 in this case-- 5 plus 7 plus 9.

242
00:10:58,470 --> 00:11:00,190
Sounds right.

243
00:11:00,190 --> 00:11:03,880
So I can use range to actually give me a set of values,

244
00:11:03,880 --> 00:11:07,420
but the nice part about all of this is the for loop

245
00:11:07,420 --> 00:11:09,910
always will just run through all of those values

246
00:11:09,910 --> 00:11:16,280
and executing the body of the loop each time through.

247
00:11:16,280 --> 00:11:19,367
Now, as I'm doing these loops, it

248
00:11:19,367 --> 00:11:21,700
might be the case that I want to get out of one of them.

249
00:11:21,700 --> 00:11:24,400
I might want to stop if something is actually,

250
00:11:24,400 --> 00:11:26,630
for example, a condition is true.

251
00:11:26,630 --> 00:11:31,030
And for that, I have another special thing called a break

252
00:11:31,030 --> 00:11:33,430
and does exactly what you would expect.

253
00:11:33,430 --> 00:11:35,130
If I'm running through some code,

254
00:11:35,130 --> 00:11:38,760
and I execute or see rather that special key word break,

255
00:11:38,760 --> 00:11:42,990
it stops the execution of that loop at that point or that code

256
00:11:42,990 --> 00:11:45,800
block at that point and breaks out of it.

257
00:11:45,800 --> 00:11:47,950
So in this case, if I'm inside this while

258
00:11:47,950 --> 00:11:51,380
loop, when I hit break, it will never execute that expression.

259
00:11:51,380 --> 00:11:55,890
It will pop out of all of this and pick up at that point.

260
00:11:55,890 --> 00:11:59,470
That lets me control how I want to deal with loops.

261
00:11:59,470 --> 00:12:01,910
For example, I might see a particular condition is true

262
00:12:01,910 --> 00:12:04,630
and, based on that, say I don't want to do the rest of this

263
00:12:04,630 --> 00:12:05,830
and jump out of it.

264
00:12:05,830 --> 00:12:07,680
I could write it as an if, but the break

265
00:12:07,680 --> 00:12:09,980
gives me a natural way to control

266
00:12:09,980 --> 00:12:13,360
where I am inside of that loop.

267
00:12:13,360 --> 00:12:15,590
And so there's an example.

268
00:12:15,590 --> 00:12:17,250
I could set my sum equal to 0.

269
00:12:17,250 --> 00:12:20,520
I could run over that range, but I'd say in this case

270
00:12:20,520 --> 00:12:24,856
if it's actually equal to 5, I can just break out.

271
00:12:24,856 --> 00:12:27,230
While I'm typing that in, think about what this might do.

272
00:12:27,230 --> 00:12:35,090
So I'm going to set my sum to 0, for i in range 5 to 11 by 2.

273
00:12:35,090 --> 00:12:40,640
I'm going to increment my sum by i,

274
00:12:40,640 --> 00:12:45,050
and then I'm going to say if my sum is equal to 5, break out.

275
00:12:45,050 --> 00:12:48,644


276
00:12:48,644 --> 00:12:49,560
And what do you think?

277
00:12:49,560 --> 00:12:53,830
If I look at the value of my sum, it's just 5,

278
00:12:53,830 --> 00:12:55,230
which is exactly what I'd expect,

279
00:12:55,230 --> 00:12:58,750
because the first time around i is going to have the value 5.

280
00:12:58,750 --> 00:13:01,560
I'm going to increment my sum by 1, but then this test is true,

281
00:13:01,560 --> 00:13:05,570
and this break pulls me out of that entire loop

282
00:13:05,570 --> 00:13:07,960
and stops the computation.

283
00:13:07,960 --> 00:13:10,160
Silly example, I agree, but it lets

284
00:13:10,160 --> 00:13:14,000
you see how break controls the actual processing, breaking

285
00:13:14,000 --> 00:13:17,377
myself out of a loop when I decide I'm ready to do that.

286
00:13:17,377 --> 00:13:19,710
And there's the body of code it's going to break out of,

287
00:13:19,710 --> 00:13:23,821
which is why it stops after only the first stage.

288
00:13:23,821 --> 00:13:25,320
To put all of these together, here's

289
00:13:25,320 --> 00:13:28,260
a little summary of for and while loops.

290
00:13:28,260 --> 00:13:30,290
In a for loop, we know the number

291
00:13:30,290 --> 00:13:32,290
of times it's going to run through an iteration,

292
00:13:32,290 --> 00:13:34,185
although I can end it early with a break.

293
00:13:34,185 --> 00:13:36,310
Because I've defined the range of things over which

294
00:13:36,310 --> 00:13:37,770
I'm going to do the work.

295
00:13:37,770 --> 00:13:39,560
It uses a counter that's captured

296
00:13:39,560 --> 00:13:42,200
inside the for loop itself.

297
00:13:42,200 --> 00:13:45,690
I can always rewrite a for loop as a while loop

298
00:13:45,690 --> 00:13:49,010
by taking that variable that I'm using, that counter I'm using,

299
00:13:49,010 --> 00:13:52,430
pulling it outside, initializing it, and explicitly doing

300
00:13:52,430 --> 00:13:55,050
the increment to the counter inside of the loop.

301
00:13:55,050 --> 00:13:57,990
A while loop can have an unbounded or unknown number

302
00:13:57,990 --> 00:13:58,860
of iterations.

303
00:13:58,860 --> 00:14:01,680
Again, I can always end it early with a break statement,

304
00:14:01,680 --> 00:14:04,090
but I here have to set up the counter ahead

305
00:14:04,090 --> 00:14:05,410
of time outside of the loop.

306
00:14:05,410 --> 00:14:08,420
And I have to make sure I increment it inside the loop.

307
00:14:08,420 --> 00:14:09,920
And unfortunately, I can't always

308
00:14:09,920 --> 00:14:13,210
rewrite a while loop using a for loop.

309
00:14:13,210 --> 00:14:16,010
You'll see in most code, we tend to use for loops

310
00:14:16,010 --> 00:14:18,430
when we know what we're going to do as a computation.

311
00:14:18,430 --> 00:14:20,000
We'll use the while loop when there's

312
00:14:20,000 --> 00:14:21,541
going to be a condition that we can't

313
00:14:21,541 --> 00:14:24,490
predict that's going to allow us to break out of that loop.

314
00:14:24,490 --> 00:14:26,730
But both of them give us the first version

315
00:14:26,730 --> 00:14:29,030
of iterative algorithms.

