0
00:00:00,000 --> 00:00:00,670
...

1
00:00:00,670 --> 00:00:02,270
Now that we've introduced the idea

2
00:00:02,270 --> 00:00:04,100
of a definition, a function in particular,

3
00:00:04,100 --> 00:00:07,230
as a way of doing encapsulation of information,

4
00:00:07,230 --> 00:00:09,640
we can start exploring some of the variations to them.

5
00:00:09,640 --> 00:00:12,250
And I want to show you one place in Python this actually

6
00:00:12,250 --> 00:00:13,790
can be very handy.

7
00:00:13,790 --> 00:00:17,600
And that is that I can have a function definition

8
00:00:17,600 --> 00:00:19,980
that I can change in terms of how I want

9
00:00:19,980 --> 00:00:21,650
to think about invoking it.

10
00:00:21,650 --> 00:00:23,582
So let's start with a simple function here.

11
00:00:23,582 --> 00:00:25,040
This is a very simple function that

12
00:00:25,040 --> 00:00:26,930
says if the last argument is true,

13
00:00:26,930 --> 00:00:29,690
then I'm going to print the last name comma first name.

14
00:00:29,690 --> 00:00:32,390
Otherwise I'm going to print the first name comma followed

15
00:00:32,390 --> 00:00:33,380
by the last name.

16
00:00:33,380 --> 00:00:35,340
And I'm going to expect those to be strings.

17
00:00:35,340 --> 00:00:38,420
And I've got a simple little implementation over here.

18
00:00:38,420 --> 00:00:42,894
I'm going to import it into my Python shell so I can use it.

19
00:00:42,894 --> 00:00:45,310
But at this stage, you can hopefully look at this function

20
00:00:45,310 --> 00:00:49,160
and realize, given some value for reverse,

21
00:00:49,160 --> 00:00:50,570
I'm going to test that.

22
00:00:50,570 --> 00:00:53,624
If it's true, I'm going to do this, which is just to print.

23
00:00:53,624 --> 00:00:55,040
It's not going to return anything.

24
00:00:55,040 --> 00:00:57,550
If it's false, I'm going to do that.

25
00:00:57,550 --> 00:00:58,920
OK?

26
00:00:58,920 --> 00:01:02,190
Now, here's one of the nice variations on it.

27
00:01:02,190 --> 00:01:05,010
First of all, that first call does what I'd expect.

28
00:01:05,010 --> 00:01:07,060
And, in fact, if I go to my Python and type

29
00:01:07,060 --> 00:01:10,570
it in, I can say if I do print name--

30
00:01:10,570 --> 00:01:17,250
and I'll do myself-- of Eric Grimson,

31
00:01:17,250 --> 00:01:22,400
and I give false as a value for reverse,

32
00:01:22,400 --> 00:01:24,715
it prints it out in the order I expect it.

33
00:01:24,715 --> 00:01:26,340
I could do, by the way, the same thing.

34
00:01:26,340 --> 00:01:28,210
I could say print name just to show you

35
00:01:28,210 --> 00:01:31,030
it does the right thing of Eric and Grimson.

36
00:01:31,030 --> 00:01:33,990
Notice the commas, by the way, to separate the parameters.

37
00:01:33,990 --> 00:01:37,164
And I give it true.

38
00:01:37,164 --> 00:01:38,330
It would help if I can type.

39
00:01:38,330 --> 00:01:47,720
So I'll do it one more time with Eric Grimson and true.

40
00:01:47,720 --> 00:01:50,220
Now it prints it out in the other order.

41
00:01:50,220 --> 00:01:52,400
But here are some of the variations.

42
00:01:52,400 --> 00:01:57,070
I could say explicitly give the binding to the parameter

43
00:01:57,070 --> 00:02:00,419
name reverse the value false.

44
00:02:00,419 --> 00:02:02,960
So doing it in the same place, but I can actually specify it.

45
00:02:02,960 --> 00:02:07,850
I could similarly for any of the parameters in the invocation

46
00:02:07,850 --> 00:02:10,830
literally say the parameter followed by an equal sign

47
00:02:10,830 --> 00:02:11,914
and the value that I want.

48
00:02:11,914 --> 00:02:13,788
And all three of these are going to print out

49
00:02:13,788 --> 00:02:14,772
exactly the same thing.

50
00:02:14,772 --> 00:02:16,230
And, in fact, so will the last one.

51
00:02:16,230 --> 00:02:21,390
But notice here I have reversed the order.

52
00:02:21,390 --> 00:02:24,030
So if I'm not going to use this kind of formalism,

53
00:02:24,030 --> 00:02:26,990
I have to give the parameter in the place it expects.

54
00:02:26,990 --> 00:02:28,760
But in this case, I reversed it.

55
00:02:28,760 --> 00:02:31,390
Even though the function expects first name then last name,

56
00:02:31,390 --> 00:02:33,640
I've said I'm going to have last name have the binding

57
00:02:33,640 --> 00:02:35,620
Grimson, first name have the binding Eric,

58
00:02:35,620 --> 00:02:38,410
and reverse equal to false.

59
00:02:38,410 --> 00:02:40,280
That's nice if I forget the order

60
00:02:40,280 --> 00:02:43,496
or if I just decide I want to call them in a different way.

61
00:02:43,496 --> 00:02:45,120
I can do some other things here though.

62
00:02:45,120 --> 00:02:48,920
I can change the definition of my function to give a default

63
00:02:48,920 --> 00:02:51,660
value to one of the parameters.

64
00:02:51,660 --> 00:02:54,240
In this case, the syntax is there's the parameter name,

65
00:02:54,240 --> 00:02:58,800
and I'm saying let it have initially the binding of false.

66
00:02:58,800 --> 00:03:02,210
And that means that if I call the function, as I do right

67
00:03:02,210 --> 00:03:06,090
here, without an explicit parameter passed in,

68
00:03:06,090 --> 00:03:08,290
or value passed in for that parameter,

69
00:03:08,290 --> 00:03:09,800
the default holds true.

70
00:03:09,800 --> 00:03:12,510
In this case, I'm going to assume that reverse is false,

71
00:03:12,510 --> 00:03:14,950
and therefore I'm going to do this particular print

72
00:03:14,950 --> 00:03:16,125
statement.

73
00:03:16,125 --> 00:03:17,500
Now, on the other hand, if I want

74
00:03:17,500 --> 00:03:19,210
to change the value of that, I need

75
00:03:19,210 --> 00:03:23,470
to give it an explicit value to overwrite the default value.

76
00:03:23,470 --> 00:03:26,117
And this is handy if I've got a parameter that normally I

77
00:03:26,117 --> 00:03:28,700
expect just to have a particular value, but on a rare occasion

78
00:03:28,700 --> 00:03:30,830
I might want to change it, my invocations

79
00:03:30,830 --> 00:03:33,070
don't have to always pass in those values.

80
00:03:33,070 --> 00:03:35,010
So a nice little variation on how we pass

81
00:03:35,010 --> 00:03:40,043
values into parameters of definitions of functions.

82
00:03:40,043 --> 00:03:40,543


